import{r as gt,j as ps}from"./chunk-CnlBHst8.js";import{p as ys,y as bA,z as TA,v as kA,s as d,w as de,Q as W,f3 as LA,f4 as fs,f5 as _A,f6 as PA,O as Pt,f7 as pe,f8 as pt,f9 as ms,fa as Ot,fb as ye,fc as ws,r as Et,a5 as fe,a3 as yt,fd as MA,b2 as me,aq as Ds,fe as xs,X as Ss,ff as bs,fg as we,fh as ks,fi as Ms,fj as jA,fk as Fs,fl as Ns,fm as ee,ab as De,fn as st,b4 as Rs,fo as vs,b9 as se,fp as Gs,fq as Us,fr as ie,fs as ae,ae as re}from"./chunk-Dd3xtWba.js";import"./chunk-D7HrI6pR.js";let hA;const xe=typeof TextDecoder<"u"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};typeof TextDecoder<"u"&&xe.decode();let WA=null;function Ls(){return(WA===null||WA.byteLength===0)&&(WA=new Uint8Array(hA.memory.buffer)),WA}function _s(s,A){return s=s>>>0,xe.decode(Ls().subarray(s,s+A))}function Ys(s,A,t,e,i,a,r,n,I,o,B){return hA.raycast_splats(s,A,t,e,i,a,r,n,I,o,B)}async function Ts(s,A){if(typeof Response=="function"&&s instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(s,A)}catch(e){if(s.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",e);else throw e}const t=await s.arrayBuffer();return await WebAssembly.instantiate(t,A)}else{const t=await WebAssembly.instantiate(s,A);return t instanceof WebAssembly.Instance?{instance:t,module:s}:t}}function Js(){const s={};return s.wbg={},s.wbg.__wbg_buffer_609cc3eee51ed158=function(A){return A.buffer},s.wbg.__wbg_length_3b4f022188ae8db6=function(A){return A.length},s.wbg.__wbg_length_6ca527665d89694d=function(A){return A.length},s.wbg.__wbg_length_8cfd2c6409af88ad=function(A){return A.length},s.wbg.__wbg_new_9fee97a409b32b68=function(A){return new Uint16Array(A)},s.wbg.__wbg_new_e3b321dcfef89fc7=function(A){return new Uint32Array(A)},s.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354=function(A,t,e){return new Float32Array(A,t>>>0,e>>>0)},s.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212=function(A,t,e){return new Uint32Array(A,t>>>0,e>>>0)},s.wbg.__wbg_newwithlength_5a5efe313cfd59f1=function(A){return new Float32Array(A>>>0)},s.wbg.__wbg_set_10bad9bee0e9c58b=function(A,t,e){A.set(t,e>>>0)},s.wbg.__wbg_set_d23661d19148b229=function(A,t,e){A.set(t,e>>>0)},s.wbg.__wbg_set_f4f1f0daa30696fc=function(A,t,e){A.set(t,e>>>0)},s.wbg.__wbg_subarray_3aaeec89bb2544f0=function(A,t,e){return A.subarray(t>>>0,e>>>0)},s.wbg.__wbg_subarray_769e1e0f81bb259b=function(A,t,e){return A.subarray(t>>>0,e>>>0)},s.wbg.__wbindgen_init_externref_table=function(){const A=hA.__wbindgen_export_0,t=A.grow(4);A.set(0,void 0),A.set(t+0,void 0),A.set(t+1,null),A.set(t+2,!0),A.set(t+3,!1)},s.wbg.__wbindgen_memory=function(){return hA.memory},s.wbg.__wbindgen_throw=function(A,t){throw new Error(_s(A,t))},s}function Hs(s,A){return hA=s.exports,Se.__wbindgen_wasm_module=A,WA=null,hA.__wbindgen_start(),hA}async function Se(s){if(hA!==void 0)return hA;typeof s<"u"&&(Object.getPrototypeOf(s)===Object.prototype?{module_or_path:s}=s:console.warn("using deprecated parameters for the initialization function; pass a single object instead")),typeof s>"u"&&(s=new URL("data:application/wasm;base64,",import.meta.url));const A=Js();(typeof s=="string"||typeof Request=="function"&&s instanceof Request||typeof URL=="function"&&s instanceof URL)&&(s=fetch(s));const{instance:t,module:e}=await Ts(await s,A);return Hs(t,e)}const YA=-9,qs=9,OA=(qs-YA)/254,zs=11,Ks=11,x=1<<zs,RA=1<<Ks,Ps=1;function Os(s){return s==="bool"||s==="bvec2"||s==="bvec3"||s==="bvec4"}function vA(s){return s==="int"||s==="ivec2"||s==="ivec3"||s==="ivec4"}function GA(s){return s==="uint"||s==="uvec2"||s==="uvec3"||s==="uvec4"}function js(s){return s==="float"||s==="vec2"||s==="vec3"||s==="vec4"}function Zs(s){return s==="mat2"||s==="mat2x2"||s==="mat2x3"||s==="mat2x4"||s==="mat3"||s==="mat3x2"||s==="mat3x3"||s==="mat3x4"||s==="mat4"||s==="mat4x2"||s==="mat4x3"||s==="mat4x4"}function it(s){return js(s)||Zs(s)}function JA(s){return s==="mat2"||s==="mat2x2"}function HA(s){return s==="mat3"||s==="mat3x3"}function qA(s){return s==="mat4"||s==="mat4x4"}function Vs(s){switch(s){case"vec2":return"float";case"vec3":return"float";case"vec4":return"float";case"ivec2":return"int";case"ivec3":return"int";case"ivec4":return"int";case"uvec2":return"uint";case"uvec3":return"uint";case"uvec4":return"uint";default:throw new Error(`Invalid vector type: ${s}`)}}function Ws(s){switch(s){case"vec2":case"ivec2":case"uvec2":return 2;case"vec3":case"ivec3":case"uvec3":return 3;case"vec4":case"ivec4":case"uvec4":return 4;default:throw new Error(`Invalid vector type: ${s}`)}}function R(s){return Math.trunc(s).toString()}function v(s){return`${Math.max(0,Math.trunc(s)).toString()}u`}function m(s){return s===Number.POSITIVE_INFINITY?"INFINITY":s===Number.NEGATIVE_INFINITY?"-INFINITY":Number.isInteger(s)?s.toFixed(1):s.toString()}function SA(s){return s instanceof UA?s.type:s.dynoOut().type}class UA{constructor(A){this.__isDynoValue=!0,this.type=A}}class P extends UA{constructor(A,t){super(A.outTypes[t]),this.dyno=A,this.key=t}}class lt extends UA{constructor(A,t){super(A),this.literal=t}getLiteral(){return this.literal}}class Xs extends lt{constructor(A,t){super(A,""),this.value=t}getLiteral(){const{type:A,value:t}=this;switch(A){case"bool":return t?"true":"false";case"uint":return v(t);case"int":return R(t);case"float":return m(t);case"bvec2":{const e=t;return`bvec2(${e[0]}, ${e[1]})`}case"uvec2":{if(t instanceof Et)return`uvec2(${v(t.x)}, ${v(t.y)})`;const e=t;return`uvec2(${v(e[0])}, ${v(e[1])})`}case"ivec2":{if(t instanceof Et)return`ivec2(${R(t.x)}, ${R(t.y)})`;const e=t;return`ivec2(${R(e[0])}, ${R(e[1])})`}case"vec2":{if(t instanceof Et)return`vec2(${m(t.x)}, ${m(t.y)})`;const e=t;return`vec2(${m(e[0])}, ${m(e[1])})`}case"bvec3":{const e=t;return`bvec3(${e[0]}, ${e[1]}, ${e[2]})`}case"uvec3":{if(t instanceof d)return`uvec3(${v(t.x)}, ${v(t.y)}, ${v(t.z)})`;const e=t;return`uvec3(${v(e[0])}, ${v(e[1])}, ${v(e[2])})`}case"ivec3":{if(t instanceof d)return`ivec3(${R(t.x)}, ${R(t.y)}, ${R(t.z)})`;const e=t;return`ivec3(${R(e[0])}, ${R(e[1])}, ${R(e[2])})`}case"vec3":{if(t instanceof d)return`vec3(${m(t.x)}, ${m(t.y)}, ${m(t.z)})`;const e=t;return`vec3(${m(e[0])}, ${m(e[1])}, ${m(e[2])})`}case"bvec4":{const e=t;return`bvec4(${e[0]}, ${e[1]}, ${e[2]}, ${e[3]})`}case"uvec4":{if(t instanceof bA)return`uvec4(${v(t.x)}, ${v(t.y)}, ${v(t.z)}, ${v(t.w)})`;const e=t;return`uvec4(${v(e[0])}, ${v(e[1])}, ${v(e[2])}, ${v(e[3])})`}case"ivec4":{if(t instanceof bA)return`ivec4(${R(t.x)}, ${R(t.y)}, ${R(t.z)}, ${R(t.w)})`;const e=t;return`ivec4(${R(e[0])}, ${R(e[1])}, ${R(e[2])}, ${R(e[3])})`}case"vec4":{if(t instanceof bA)return`vec4(${m(t.x)}, ${m(t.y)}, ${m(t.z)}, ${m(t.w)})`;if(t instanceof W)return`vec4(${m(t.x)}, ${m(t.y)}, ${m(t.z)}, ${m(t.w)})`;const e=t;return`vec4(${m(e[0])}, ${m(e[1])}, ${m(e[2])}, ${m(e[3])})`}case"mat2":case"mat2x2":{const e=t,i=e instanceof ws?e.elements:t,a=new Array(4).fill(0).map((r,n)=>m(i[n]));return`${A}(${a.join(", ")})`}case"mat2x3":{const e=t,i=new Array(6).fill(0).map((a,r)=>m(e[r]));return`${A}(${i.join(", ")})`}case"mat2x4":{const e=t,i=new Array(8).fill(0).map((a,r)=>m(e[r]));return`${A}(${i.join(", ")})`}case"mat3":case"mat3x3":{const e=t,i=e instanceof de?e.elements:t,a=new Array(9).fill(0).map((r,n)=>m(i[n]));return`${A}(${a.join(", ")})`}case"mat3x2":{const e=t,i=new Array(6).fill(0).map((a,r)=>m(e[r]));return`${A}(${i.join(", ")})`}case"mat3x4":{const e=t,i=new Array(12).fill(0).map((a,r)=>m(e[r]));return`${A}(${i.join(", ")})`}case"mat4":case"mat4x4":{const e=t,i=e instanceof kA?e.elements:t,a=new Array(16).fill(0).map((r,n)=>m(i[n]));return`${A}(${a.join(", ")})`}case"mat4x2":{const e=t,i=new Array(8).fill(0).map((a,r)=>m(e[r]));return`${A}(${i.join(", ")})`}case"mat4x3":{const e=t,i=new Array(12).fill(0).map((a,r)=>m(e[r]));return`${A}(${i.join(", ")})`}default:throw new Error(`Type not implemented: ${String(A)}`)}}}function _t(s,A){return new Xs(s,A)}function ot(s){const A=String(s);if(Os(s))return`${A}(false)`;if(it(s))return`${A}(0.0)`;if(vA(s))return`${A}(0)`;if(GA(s))return`${A}(0u)`;throw new Error(`Type not implemented: ${A}`)}const ne="    ";class $s{constructor({indent:A}={}){this.globals=new Set,this.statements=[],this.uniforms={},this.declares=new Set,this.updaters=[],this.sequence=0,this.indent=ne,this.indent=A??ne}nextSequence(){return this.sequence++}}class Y{constructor({inTypes:A,outTypes:t,inputs:e,update:i,globals:a,statements:r,generate:n}){this.inTypes=A??{},this.outTypes=t??{},this.inputs=e??{},this.update=i,this.globals=a,this.statements=r,this.generate=n??(({inputs:I,outputs:o,compile:B})=>{var g,Q;return{globals:(g=this.globals)==null?void 0:g.call(this,{inputs:I,outputs:o,compile:B}),statements:(Q=this.statements)==null?void 0:Q.call(this,{inputs:I,outputs:o,compile:B})}})}get outputs(){const A={};for(const t in this.outTypes)A[t]=new P(this,t);return A}apply(A){return Object.assign(this.inputs,A),this.outputs}compile({inputs:A,outputs:t,compile:e}){const i=[`// ${this.constructor.name}(${Object.values(A).join(", ")}) => (${Object.values(t).join(", ")})`],a=[];for(const o in t){const B=t[o];B&&!e.declares.has(B)&&(e.declares.add(B),a.push(o))}const{globals:r,statements:n,uniforms:I}=this.generate({inputs:A,outputs:t,compile:e});for(const o of r??[])e.globals.add(o);for(const o in I)e.uniforms[o]=I[o];this.update&&e.updaters.push(this.update);for(const o of a){const B=t[o];B&&(e.uniforms[B]||i.push(`${be(B,this.outTypes[o])};`))}return n!=null&&n.length&&(i.push("{"),i.push(...n.map(o=>e.indent+o)),i.push("}")),i}}class Ai extends Y{constructor({inTypes:A,outTypes:t,inputs:e,update:i,globals:a,construct:r}){super({inTypes:A,outTypes:t,inputs:e,update:i,globals:a,generate:n=>this.generateBlock(n)}),this.construct=r}generateBlock({inputs:A,outputs:t,compile:e}){var i,a;const r={},n={};for(const C in A)A[C]!=null&&(r[C]=new lt(this.inTypes[C],A[C]));for(const C in t)t[C]!=null&&(n[C]=new UA(this.outTypes[C]));const I={roots:[]},o=this.construct(r,n,I);for(const C of((i=this.globals)==null?void 0:i.call(this,{inputs:A,outputs:t,compile:e}))??[])e.globals.add(C);const B=[],g=new Map;function Q(C,h,y){let u=g.get(C);if(!u){u={sequence:e.nextSequence(),outNames:new Map,newOuts:new Set},g.set(C,u);for(const l in C.inputs){let p=C.inputs[l];for(;p;){if(p instanceof UA){p instanceof P&&Q(p.dyno,p.key);break}p=p.dynoOut()}}B.push(C)}h&&(y||u.newOuts.add(h),u.outNames.set(h,y??`${h}_${u.sequence}`))}for(const C of I.roots)Q(C);for(const C in n){let h=(o==null?void 0:o[C])??n[C];for(;h;){if(h instanceof UA){h instanceof P&&Q(h.dyno,h.key,t[C]);break}h=h.dynoOut()}n[C]=h}const c=[];for(const C of B){const h={},y={};for(const p in C.inputs){let f=C.inputs[p];for(;f;){if(f instanceof UA){if(f instanceof lt)h[p]=f.getLiteral();else if(f instanceof P){const D=(a=g.get(f.dyno))==null?void 0:a.outNames.get(f.key);if(!D)throw new Error(`Source not found for ${f.dyno.constructor.name}.${f.key}`);h[p]=D}break}f=f.dynoOut()}}const u=g.get(C)??{outNames:new Map};for(const[p,f]of u.outNames.entries())y[p]=f;const l=C.compile({inputs:h,outputs:y,compile:e});c.push(l)}const E=[];for(const C in t)n[C]instanceof lt&&E.push(`${t[C]} = ${n[C].getLiteral()};`);return E.length>0&&c.push(E),{statements:c.flatMap((C,h)=>h===0?C:["",...C])}}}function FA(s,A,t,{update:e,globals:i}={}){return new Ai({inTypes:s,outTypes:A,construct:t,update:e,globals:i})}function xt({inTypes:s,outTypes:A,inputs:t,update:e,globals:i,statements:a,generate:r}){return new Y({inTypes:s,outTypes:A,inputs:t,update:e,globals:i,statements:a,generate:r})}function be(s,A,t){const e=typeof A=="string"?A:A.type;if(!e)throw new Error(`Invalid DynoType: ${String(A)}`);return`${e} ${s}${t!=null?`[${t}]`:""}`}function QA(s){var A;let t=!1;const e=s.split(`
`).map(r=>{const n=r.trimEnd();return t?n:n.length>0?(t=!0,n):null}).filter(r=>r!=null);for(;e.length>0&&e[e.length-1].length===0;)e.pop();if(e.length===0)return[];const i=(A=e[0].match(/^\s*/))==null?void 0:A[0];if(!i)return e;const a=new RegExp(`^${i}`);return e.map(r=>r.replace(a,""))}function O(s){return QA(s).join(`
`)}class jt extends Y{constructor({a:A,outKey:t,outTypeFunc:e}){const i={a:SA(A)},a=e(SA(A)),r={[t]:a};super({inTypes:i,outTypes:r,inputs:{a:A}}),this.outKey=t}dynoOut(){return new P(this,this.outKey)}}class St extends Y{constructor({a:A,b:t,outKey:e,outTypeFunc:i}){const a={a:SA(A),b:SA(t)},r=i(SA(A),SA(t)),n={[e]:r};super({inTypes:a,outTypes:n,inputs:{a:A,b:t}}),this.outKey=e}dynoOut(){return new P(this,this.outKey)}}const G={type:"Gsplat"},bt={type:"PackedSplats"},ft=(s,A)=>new ei({packedSplats:s,index:A}),ti=(s,A,t,e)=>new si({packedSplats:s,index:A,base:t,count:e}),ht=s=>new ii({gsplat:s}),kt=({gsplat:s,flags:A,index:t,center:e,scales:i,quaternion:a,rgba:r,rgb:n,opacity:I,x:o,y:B,z:g,r:Q,g:c,b:E})=>new ai({gsplat:s,flags:A,index:t,center:e,scales:i,quaternion:a,rgba:r,rgb:n,opacity:I,x:o,y:B,z:g,r:Q,g:c,b:E}),ke=(s,{scale:A,rotate:t,translate:e,recolor:i})=>new ri({gsplat:s,scale:A,rotate:t,translate:e,recolor:i}),CA=O(`
  struct Gsplat {
    vec3 center;
    uint flags;
    vec3 scales;
    int index;
    vec4 quaternion;
    vec4 rgba;
  };
  const uint GSPLAT_FLAG_ACTIVE = 1u << 0u;

  bool isGsplatActive(uint flags) {
    return (flags & GSPLAT_FLAG_ACTIVE) != 0u;
  }
`),Zt=O(`
  struct PackedSplats {
    usampler2DArray texture;
    int numSplats;
  };
`),Me=O(`
  bool readPackedSplat(usampler2DArray texture, int numSplats, int index, out Gsplat gsplat) {
    if ((index >= 0) && (index < numSplats)) {
      uvec4 packed = texelFetch(texture, splatTexCoord(index), 0);
      unpackSplat(packed, gsplat.center, gsplat.scales, gsplat.quaternion, gsplat.rgba);
      return true;
    } else {
      return false;
    }
  }
`);class ei extends Y{constructor({packedSplats:A,index:t}){super({inTypes:{packedSplats:bt,index:"int"},outTypes:{gsplat:G},inputs:{packedSplats:A,index:t},globals:()=>[CA,Zt,Me],statements:({inputs:e,outputs:i})=>{const{gsplat:a}=i;if(!a)return[];const{packedSplats:r,index:n}=e;let I;return r&&n?I=QA(`
            if (readPackedSplat(${r}.texture, ${r}.numSplats, ${n}, ${a})) {
              bool zeroSize = all(equal(${a}.scales, vec3(0.0, 0.0, 0.0)));
              ${a}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
            } else {
              ${a}.flags = 0u;
            }
          `):I=[`${a}.flags = 0u;`],I.push(`${a}.index = ${n??"0"};`),I}})}dynoOut(){return new P(this,"gsplat")}}class si extends Y{constructor({packedSplats:A,index:t,base:e,count:i}){super({inTypes:{packedSplats:bt,index:"int",base:"int",count:"int"},outTypes:{gsplat:G},inputs:{packedSplats:A,index:t,base:e,count:i},globals:()=>[CA,Zt,Me],statements:({inputs:a,outputs:r})=>{const{gsplat:n}=r;if(!n)return[];const{packedSplats:I,index:o,base:B,count:g}=a;let Q;return I&&o&&B&&g?Q=QA(`
            ${n}.flags = 0u;
            if ((${o} >= ${B}) && (${o} < (${B} + ${g}))) {
              if (readPackedSplat(${I}.texture, ${I}.numSplats, ${o}, ${n})) {
                bool zeroSize = all(equal(${n}.scales, vec3(0.0, 0.0, 0.0)));
                ${n}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
              }
            }
          `):Q=[`${n}.flags = 0u;`],Q.push(`${n}.index = ${o??"0"};`),Q}})}dynoOut(){return new P(this,"gsplat")}}class ii extends Y{constructor({gsplat:A}){super({inTypes:{gsplat:G},outTypes:{flags:"uint",active:"bool",index:"int",center:"vec3",scales:"vec3",quaternion:"vec4",rgba:"vec4",rgb:"vec3",opacity:"float",x:"float",y:"float",z:"float",r:"float",g:"float",b:"float"},inputs:{gsplat:A},globals:()=>[CA],statements:({inputs:t,outputs:e})=>{const{gsplat:i}=t,{flags:a,active:r,index:n,center:I,scales:o,quaternion:B,rgba:g,rgb:Q,opacity:c,x:E,y:C,z:h,r:y,g:u,b:l}=e;return[a?`${a} = ${i?`${i}.flags`:"0u"};`:null,r?`${r} = isGsplatActive(${i?`${i}.flags`:"0u"});`:null,n?`${n} = ${i?`${i}.index`:"0"};`:null,I?`${I} = ${i?`${i}.center`:"vec3(0.0, 0.0, 0.0)"};`:null,o?`${o} = ${i?`${i}.scales`:"vec3(0.0, 0.0, 0.0)"};`:null,B?`${B} = ${i?`${i}.quaternion`:"vec4(0.0, 0.0, 0.0, 1.0)"};`:null,g?`${g} = ${i?`${i}.rgba`:"vec4(0.0, 0.0, 0.0, 0.0)"};`:null,Q?`${Q} = ${i?`${i}.rgba.rgb`:"vec3(0.0, 0.0, 0.0)"};`:null,c?`${c} = ${i?`${i}.rgba.a`:"0.0"};`:null,E?`${E} = ${i?`${i}.center.x`:"0.0"};`:null,C?`${C} = ${i?`${i}.center.y`:"0.0"};`:null,h?`${h} = ${i?`${i}.center.z`:"0.0"};`:null,y?`${y} = ${i?`${i}.rgba.r`:"0.0"};`:null,u?`${u} = ${i?`${i}.rgba.g`:"0.0"};`:null,l?`${l} = ${i?`${i}.rgba.b`:"0.0"};`:null].filter(Boolean)}})}}class ai extends Y{constructor({gsplat:A,flags:t,index:e,center:i,scales:a,quaternion:r,rgba:n,rgb:I,opacity:o,x:B,y:g,z:Q,r:c,g:E,b:C}){super({inTypes:{gsplat:G,flags:"uint",index:"int",center:"vec3",scales:"vec3",quaternion:"vec4",rgba:"vec4",rgb:"vec3",opacity:"float",x:"float",y:"float",z:"float",r:"float",g:"float",b:"float"},outTypes:{gsplat:G},inputs:{gsplat:A,flags:t,index:e,center:i,scales:a,quaternion:r,rgba:n,rgb:I,opacity:o,x:B,y:g,z:Q,r:c,g:E,b:C},globals:()=>[CA],statements:({inputs:h,outputs:y})=>{const{gsplat:u}=y;if(!u)return[];const{gsplat:l,flags:p,index:f,center:D,scales:k,quaternion:b,rgba:T,rgb:J,opacity:H,x:U,y:M,z:F,r:j,g:z,b:N}=h;return[`${u}.flags = ${p??(l?`${l}.flags`:"0u")};`,`${u}.index = ${f??(l?`${l}.index`:"0")};`,`${u}.center = ${D??(l?`${l}.center`:"vec3(0.0, 0.0, 0.0)")};`,`${u}.scales = ${k??(l?`${l}.scales`:"vec3(0.0, 0.0, 0.0)")};`,`${u}.quaternion = ${b??(l?`${l}.quaternion`:"vec4(0.0, 0.0, 0.0, 1.0)")};`,`${u}.rgba = ${T??(l?`${l}.rgba`:"vec4(0.0, 0.0, 0.0, 0.0)")};`,J?`${u}.rgba.rgb = ${J};`:null,H?`${u}.rgba.a = ${H};`:null,U?`${u}.center.x = ${U};`:null,M?`${u}.center.y = ${M};`:null,F?`${u}.center.z = ${F};`:null,j?`${u}.rgba.r = ${j};`:null,z?`${u}.rgba.g = ${z};`:null,N?`${u}.rgba.b = ${N};`:null].filter(Boolean)}})}dynoOut(){return new P(this,"gsplat")}}O(`
  vec3 gsplatNormal(vec3 scales, vec4 quaternion) {
    float minScale = min(scales.x, min(scales.y, scales.z));
    vec3 normal;
    if (scales.z == minScale) {
      normal = vec3(0.0, 0.0, 1.0);
    } else if (scales.y == minScale) {
      normal = vec3(0.0, 1.0, 0.0);
    } else {
      normal = vec3(1.0, 0.0, 0.0);
    }
    return quatVec(quaternion, normal);
  }
`);class ri extends Y{constructor({gsplat:A,scale:t,rotate:e,translate:i,recolor:a}){super({inTypes:{gsplat:G,scale:"float",rotate:"vec4",translate:"vec3",recolor:"vec4"},outTypes:{gsplat:G},inputs:{gsplat:A,scale:t,rotate:e,translate:i,recolor:a},globals:()=>[CA],statements:({inputs:r,outputs:n,compile:I})=>{const{gsplat:o}=n;if(!o||!r.gsplat)return[];const{scale:B,rotate:g,translate:Q,recolor:c}=r,E=I.indent;return[`${o} = ${r.gsplat};`,`if (isGsplatActive(${o}.flags)) {`,B?`${E}${o}.center *= ${B};`:null,g?`${E}${o}.center = quatVec(${g}, ${o}.center);`:null,Q?`${E}${o}.center += ${Q};`:null,B?`${E}${o}.scales *= ${B};`:null,g?`${E}${o}.quaternion = quatQuat(${g}, ${o}.quaternion);`:null,c?`${E}${o}.rgba *= ${c};`:null,"}"].filter(Boolean)}})}dynoOut(){return new P(this,"gsplat")}}const ni=s=>new gi({gsplat:s});class gi extends Y{constructor({gsplat:A}){super({inTypes:{gsplat:G},inputs:{gsplat:A},globals:()=>[CA],statements:({inputs:t,outputs:e})=>{const{output:i}=e;if(!i)return[];const{gsplat:a}=t;return a?QA(`
            if (isGsplatActive(${a}.flags)) {
              ${i} = packSplat(${a}.center, ${a}.scales, ${a}.quaternion, ${a}.rgba);
            } else {
              ${i} = uvec4(0u, 0u, 0u, 0u);
            }
          `):[`${i} = uvec4(0u, 0u, 0u, 0u);`]}})}dynoOut(){return new P(this,"output")}}class oi extends Y{constructor({rgba8:A}){super({inTypes:{rgba8:"vec4"},inputs:{rgba8:A},statements:({inputs:t,outputs:e})=>[`target = ${t.rgba8??"vec4(0.0, 0.0, 0.0, 0.0)"};`]})}dynoOut(){return new P(this,"rgba8")}}class IA extends Y{constructor({key:A,type:t,count:e,value:i,update:a,globals:r}){A=A??"value",super({outTypes:{[A]:t},update:()=>{if(a){const n=a(this.value);n!==void 0&&(this.value=n)}this.uniform.value=this.value},generate:({inputs:n,outputs:I})=>{const o=(r==null?void 0:r({inputs:n,outputs:I}))??[],B={},g=I[A];return g&&(o.push(`uniform ${be(g,t,e)};`),B[g]=this.uniform),{globals:o,uniforms:B}}}),this.type=t,this.count=e,this.value=i,this.uniform={value:i},this.outKey=A}dynoOut(){return new P(this,this.outKey)}}class ge extends IA{constructor({key:A,value:t,update:e}){super({key:A,type:"bool",value:t,update:e})}}class Yt extends IA{constructor({key:A,value:t,update:e}){super({key:A,type:"int",value:t,update:e})}}class at extends IA{constructor({key:A,value:t,update:e}){super({key:A,type:"float",value:t,update:e})}}class mt extends IA{constructor({key:A,value:t,update:e}){super({key:A,type:"vec3",value:t,update:e})}}class Vt extends IA{constructor({key:A,value:t,update:e}){super({key:A,type:"vec4",value:t,update:e})}}class Mt extends IA{constructor({key:A,value:t,update:e}){super({key:A,type:"usampler2DArray",value:t,update:e})}}var _=Uint8Array,At=Uint16Array,Ii=Int32Array,Fe=new _([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),Ne=new _([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),Bi=new _([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Re=function(s,A){for(var t=new At(31),e=0;e<31;++e)t[e]=A+=1<<s[e-1];for(var i=new Ii(t[30]),e=1;e<30;++e)for(var a=t[e];a<t[e+1];++a)i[a]=a-t[e]<<5|e;return{b:t,r:i}},ve=Re(Fe,2),Ge=ve.b,Qi=ve.r;Ge[28]=258,Qi[258]=28;var Ci=Re(Ne,0),ci=Ci.b,Ue=new At(32768);for(var S=0;S<32768;++S){var xA=(S&43690)>>1|(S&21845)<<1;xA=(xA&52428)>>2|(xA&13107)<<2,xA=(xA&61680)>>4|(xA&3855)<<4,Ue[S]=((xA&65280)>>8|(xA&255)<<8)>>1}var tt=function(s,A,t){for(var e=s.length,i=0,a=new At(A);i<e;++i)s[i]&&++a[s[i]-1];var r=new At(A);for(i=1;i<A;++i)r[i]=r[i-1]+a[i-1]<<1;var n;{n=new At(1<<A);var I=15-A;for(i=0;i<e;++i)if(s[i])for(var o=i<<4|s[i],B=A-s[i],g=r[s[i]-1]++<<B,Q=g|(1<<B)-1;g<=Q;++g)n[Ue[g]>>I]=o}return n},nt=new _(288);for(var S=0;S<144;++S)nt[S]=8;for(var S=144;S<256;++S)nt[S]=9;for(var S=256;S<280;++S)nt[S]=7;for(var S=280;S<288;++S)nt[S]=8;var Le=new _(32);for(var S=0;S<32;++S)Le[S]=5;var Ei=tt(nt,9),li=tt(Le,5),Ft=function(s){for(var A=s[0],t=1;t<s.length;++t)s[t]>A&&(A=s[t]);return A},aA=function(s,A,t){var e=A/8|0;return(s[e]|s[e+1]<<8)>>(A&7)&t},Nt=function(s,A){var t=A/8|0;return(s[t]|s[t+1]<<8|s[t+2]<<16)>>(A&7)},_e=function(s){return(s+7)/8|0},ut=function(s,A,t){return(A==null||A<0)&&(A=0),(t==null||t>s.length)&&(t=s.length),new _(s.subarray(A,t))},hi=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],$=function(s,A,t){var e=new Error(A||hi[s]);if(e.code=s,Error.captureStackTrace&&Error.captureStackTrace(e,$),!t)throw e;return e},ui=function(s,A,t,e){var i=s.length,a=0;if(!i||A.f&&!A.l)return t||new _(0);var r=!t,n=r||A.i!=2,I=A.i;r&&(t=new _(i*3));var o=function(iA){var pA=t.length;if(iA>pA){var yA=new _(Math.max(pA*2,iA));yA.set(t),t=yA}},B=A.f||0,g=A.p||0,Q=A.b||0,c=A.l,E=A.d,C=A.m,h=A.n,y=i*8;do{if(!c){B=aA(s,g,1);var u=aA(s,g+1,3);if(g+=3,u)if(u==1)c=Ei,E=li,C=9,h=5;else if(u==2){var l=aA(s,g,31)+257,p=aA(s,g+10,15)+4,f=l+aA(s,g+5,31)+1;g+=14;for(var D=new _(f),k=new _(19),b=0;b<p;++b)k[Bi[b]]=aA(s,g+b*3,7);g+=p*3;for(var T=Ft(k),J=(1<<T)-1,H=tt(k,T),b=0;b<f;){var U=H[aA(s,g,J)];g+=U&15;var M=U>>4;if(M<16)D[b++]=M;else{var F=0,j=0;for(M==16?(j=3+aA(s,g,3),g+=2,F=D[b-1]):M==17?(j=3+aA(s,g,7),g+=3):M==18&&(j=11+aA(s,g,127),g+=7);j--;)D[b++]=F}}var z=D.subarray(0,l),N=D.subarray(l);C=Ft(z),h=Ft(N),c=tt(z,C),E=tt(N,h)}else $(1);else{var M=_e(g)+4,X=s[M-4]|s[M-3]<<8,tA=M+X;if(tA>i){I&&$(0);break}n&&o(Q+X),t.set(s.subarray(M,tA),Q),A.b=Q+=X,A.p=g=tA*8,A.f=B;continue}if(g>y){I&&$(0);break}}n&&o(Q+131072);for(var dA=(1<<C)-1,rA=(1<<h)-1,nA=g;;nA=g){var F=c[Nt(s,g)&dA],Z=F>>4;if(g+=F&15,g>y){I&&$(0);break}if(F||$(2),Z<256)t[Q++]=Z;else if(Z==256){nA=g,c=null;break}else{var cA=Z-254;if(Z>264){var b=Z-257,eA=Fe[b];cA=aA(s,g,(1<<eA)-1)+Ge[b],g+=eA}var gA=E[Nt(s,g)&rA],w=gA>>4;gA||$(3),g+=gA&15;var N=ci[w];if(w>3){var eA=Ne[w];N+=Nt(s,g)&(1<<eA)-1,g+=eA}if(g>y){I&&$(0);break}n&&o(Q+131072);var oA=Q+cA;if(Q<N){var sA=a-N,EA=Math.min(N,oA);for(sA+Q<0&&$(3);Q<EA;++Q)t[Q]=e[sA+Q]}for(;Q<oA;++Q)t[Q]=t[Q-N]}}A.l=c,A.p=nA,A.b=Q,A.f=B,c&&(B=1,A.m=C,A.d=E,A.n=h)}while(!B);return Q!=t.length&&r?ut(t,0,Q):t.subarray(0,Q)},di=new _(0),pi=function(s){(s[0]!=31||s[1]!=139||s[2]!=8)&&$(6,"invalid gzip data");var A=s[3],t=10;A&4&&(t+=(s[10]|s[11]<<8)+2);for(var e=(A>>3&1)+(A>>4&1);e>0;e-=!s[t++]);return t+(A&2)},Rt=function(){function s(A,t){typeof A=="function"&&(t=A,A={}),this.ondata=t;var e=A&&A.dictionary&&A.dictionary.subarray(-32768);this.s={i:0,b:e?e.length:0},this.o=new _(32768),this.p=new _(0),e&&this.o.set(e)}return s.prototype.e=function(A){if(this.ondata||$(5),this.d&&$(4),!this.p.length)this.p=A;else if(A.length){var t=new _(this.p.length+A.length);t.set(this.p),t.set(A,this.p.length),this.p=t}},s.prototype.c=function(A){this.s.i=+(this.d=A||!1);var t=this.s.b,e=ui(this.p,this.s,this.o);this.ondata(ut(e,t,this.s.b),this.d),this.o=ut(e,this.s.b-32768),this.s.b=this.o.length,this.p=ut(this.p,this.s.p/8|0),this.s.p&=7},s.prototype.push=function(A,t){this.e(A),this.c(t)},s}(),yi=function(){function s(A,t){this.v=1,this.r=0,Rt.call(this,A,t)}return s.prototype.push=function(A,t){if(Rt.prototype.e.call(this,A),this.r+=A.length,this.v){var e=this.p.subarray(this.v-1),i=e.length>3?pi(e):4;if(i>e.length){if(!t)return}else this.v>1&&this.onmember&&this.onmember(this.r-e.length);this.p=e.subarray(i),this.v=0}Rt.prototype.c.call(this,t),this.s.f&&!this.s.l&&!t&&(this.v=_e(this.s.p)+9,this.s={i:0},this.o=new _(0),this.push(new _(0),t))},s}(),fi=typeof TextDecoder<"u"&&new TextDecoder,mi=0;try{fi.decode(di,{stream:!0}),mi=1}catch{}const Wt=new Float32Array(1),Ye=new Uint32Array(Wt.buffer);function vt(s){Wt[0]=s;const A=Ye[0],t=A>>31&1,e=A>>23&255,i=A&8388607,a=t<<15;if(e===255)return i!==0?a|32767:a|31744;const r=e-127+15;if(r>=31)return a|31744;if(r<=0){if(r<-10)return a;const I=(i|8388608)>>1-r+13;return a|I}const n=i>>13;return a|r<<10|n}function Gt(s){const A=s>>15&1,t=s>>10&31,e=s&1023;let i;if(t===0)if(e===0)i=A<<31;else{let a=e,r=-14;for(;!(a&1024);)a<<=1,r--;a&=1023;const n=r+127,I=a<<13;i=A<<31|n<<23|I}else if(t===31)e===0?i=A<<31|2139095040:i=A<<31|2143289344;else{const a=t-15+127,r=e<<13;i=A<<31|a<<23|r}return Ye[0]=i,Wt[0]}function It(s){return Math.max(0,Math.min(255,Math.round(s*255)))}function wi(s){const A=[],t=new Set;function e(i){i&&typeof i=="object"&&!t.has(i)&&(t.add(i),i instanceof ArrayBuffer?A.push(i):ArrayBuffer.isView(i)?A.push(i.buffer):Array.isArray(i)?i.forEach(e):Object.values(i).forEach(e))}return e(s),A}class Di{constructor({allocate:A,dispose:t,valid:e}){this.items=[],this.allocate=A,this.dispose=t,this.valid=e}alloc(A){for(;;){const t=this.items.pop();if(!t)break;if(this.valid(t,A))return t;this.dispose&&this.dispose(t)}return this.allocate(A)}free(A){this.items.push(A)}disposeAll(){let A;for(A=this.items.pop();A;)this.dispose&&this.dispose(A),A=this.items.pop()}}function oe(s,A,t,e,i,a,r,n,I,o,B,g,Q,c,E,C){const h=It(c),y=It(E),u=It(C),l=It(Q),p=Ui(new W(I,o,B,g)),f=p&255,D=p>>>8&255,k=p>>>16&255,b=a===0?0:Math.min(255,Math.max(0,Math.round((Math.log(a)-YA)/OA)+1)),T=r===0?0:Math.min(255,Math.max(0,Math.round((Math.log(r)-YA)/OA)+1)),J=n===0?0:Math.min(255,Math.max(0,Math.round((Math.log(n)-YA)/OA)+1)),H=vt(t),U=vt(e),M=vt(i),F=A*4;s[F]=h|y<<8|u<<16|l<<24,s[F+1]=H|U<<16,s[F+2]=M|f<<16|D<<24,s[F+3]=b|T<<8|J<<16|k<<24}const xi=new d,Si=new d,bi=new W,ki=new TA,Mi={center:xi,scales:Si,quaternion:bi,color:ki,opacity:0};function Ie(s,A){const t=Mi,e=A*4,i=s[e],a=s[e+1],r=s[e+2],n=s[e+3];t.color.set((i&255)/255,(i>>>8&255)/255,(i>>>16&255)/255),t.opacity=(i>>>24&255)/255,t.center.set(Gt(a&65535),Gt(a>>>16&65535),Gt(r&65535));const I=n&255;t.scales.x=I===0?0:Math.exp(YA+(I-1)*OA);const o=n>>>8&255;t.scales.y=o===0?0:Math.exp(YA+(o-1)*OA);const B=n>>>16&255;t.scales.z=B===0?0:Math.exp(YA+(B-1)*OA);const g=r>>>16&65535|n>>>8&16711680;return Li(g,t.quaternion),t}function AA(s){const A=x,t=Math.max(Ps,Math.min(RA,Math.ceil(s/A))),e=Math.ceil(s/(A*t)),i=A*t*e;return{width:A,height:t,depth:e,maxSplats:i}}function Fi(s){const A=new we(s.autoStart);return A.startTime=s.startTime,A.oldTime=s.oldTime,A.elapsedTime=s.elapsedTime,A.running=s.running,A}const Ni=O(`
  precision highp float;

  in vec3 position;

  void main() {
    gl_Position = vec4(position.xy, 0.0, 1.0);
  }
`);function Ri(s){const A=new d;for(const t of s)A.add(t);return A.divideScalar(s.length)}function vi(s){if(s.length===0)return new W;const A=s[0].clone();for(let t=1;t<s.length;t++)s[t].dot(s[0])<0?(A.x-=s[t].x,A.y-=s[t].y,A.z-=s[t].z,A.w-=s[t].w):(A.x+=s[t].x,A.y+=s[t].y,A.z+=s[t].z,A.w+=s[t].w);return A.normalize()}function Gi(s,A){const[t,e]=[new d,new W],[i,a]=[new d,new W];s.decompose(t,e,new d),A.decompose(i,a,new d);const r=t.distanceTo(i),n=Math.abs(e.dot(a));return{distance:r,coorient:n}}function Tt({matrix1:s,matrix2:A,maxDistance:t,minCoorient:e}){const{distance:i,coorient:a}=Gi(s,A);return i<=t&&(e==null||a>=e)}function Ui(s){const A=s.clone().normalize();A.w<0&&A.set(-A.x,-A.y,-A.z,-A.w);const t=2*Math.acos(A.w),e=Math.sqrt(A.x*A.x+A.y*A.y+A.z*A.z),i=e<1e-6?new d(1,0,0):new d(A.x,A.y,A.z).divideScalar(e),a=Math.abs(i.x)+Math.abs(i.y)+Math.abs(i.z);let r=i.x/a,n=i.y/a;if(i.z<0){const Q=r;r=(1-Math.abs(n))*(r>=0?1:-1),n=(1-Math.abs(Q))*(n>=0?1:-1)}const I=r*.5+.5,o=n*.5+.5,B=Math.round(I*255),g=Math.round(o*255);return Math.round(t*(255/Math.PI))<<16|g<<8|B}function Li(s,A){const t=s&255,e=s>>>8&255,i=s>>>16&255,a=t/255,r=e/255;let n=(a-.5)*2,I=(r-.5)*2;const o=1-(Math.abs(n)+Math.abs(I)),B=Math.max(-o,0);n+=n>=0?-B:B,I+=I>=0?-B:B;const g=new d(n,I,o).normalize(),Q=i/255*Math.PI*.5,c=Math.sin(Q),E=Math.cos(Q);return A.set(g.x*c,g.y*c,g.z*c,E),A}function _i(s,A){const t=[];let e=0,i=null;const a=new yi((I,o)=>{if(t.push(I),e+=I.length,o||e>=A){const B=new Uint8Array(e);let g=0;for(const Q of t)B.set(Q,g),g+=Q.length;i=B.slice(0,A)}}),r=1024;let n=0;for(;i==null&&n<s.length;){const I=s.slice(n,n+r);a.push(I,!1),n+=r}if(i==null&&(a.push(new Uint8Array,!0),i==null))throw new Error("Failed to decompress partial gzip");return i}class Te{constructor({graph:A,inputs:t,outputs:e,template:i}){this.graph=A,this.template=i,this.inputs=t??{},this.outputs=e??{};const a=new $s({indent:this.template.indent});for(const n in this.outputs)this.outputs[n]&&a.declares.add(this.outputs[n]);const r=A.compile({inputs:this.inputs,outputs:this.outputs,compile:a});this.shader=i.generate({globals:a.globals,statements:r}),this.uniforms=a.uniforms,this.updaters=a.updaters}prepareMaterial(){return Yi(this)}update(){for(const A of this.updaters)A()}}class Je{constructor(A){const t=A.match(/^([ \t]*)\{\{\s*GLOBALS\s*\}\}/m),e=A.match(/^([ \t]*)\{\{\s*STATEMENTS\s*\}\}/m);if(!t||!e)throw new Error("Template must contain {{ GLOBALS }} and {{ STATEMENTS }}");this.before=A.substring(0,t.index),this.between=A.substring(t.index+t[0].length,e.index),this.after=A.substring(e.index+e[0].length),this.indent=e[1]}generate({globals:A,statements:t}){return this.before+Array.from(A).join(`

`)+this.between+t.map(e=>this.indent+e).join(`
`)+this.after}}const Be=new Map;function Yi(s){let A=Be.get(s);return A||(A=new Ot({glslVersion:ye,vertexShader:Ni,fragmentShader:s.shader,uniforms:s.uniforms}),Be.set(s,A),A)}function He(s,A,t="add"){const e=()=>{throw new Error(`Invalid ${t} types: ${s}, ${A}`)};if(s===A)return s;if(s==="int"){if(vA(A))return A;e()}if(A==="int"){if(vA(s))return s;e()}if(s==="uint"){if(GA(A))return A;e()}if(A==="uint"){if(GA(s))return s;e()}if(s==="float"){if(it(A))return A;e()}if(A==="float"){if(it(s))return s;e()}throw new Error(`Invalid ${t} types: ${s}, ${A}`)}function Ti(s,A){return He(s,A,"sub")}function Ji(s,A){const t=()=>{throw new Error(`Invalid mul types: ${s}, ${A}`)},e=i=>i;if(s==="int"){if(vA(A))return e(A);t()}if(A==="int"){if(vA(s))return e(s);t()}if(s==="uint"){if(GA(A))return e(A);t()}if(A==="uint"){if(GA(s))return e(s);t()}if(s==="float"){if(it(A))return e(A);t()}if(A==="float"){if(it(s))return e(s);t()}if(vA(s)||GA(s)||vA(A)||GA(A)){if(s===A)return e(s);t()}if(s==="vec2"){if(A==="vec2"||JA(A))return e("vec2");if(A==="mat3x2")return e("vec3");if(A==="mat4x2")return e("vec4");t()}if(s==="vec3"){if(A==="mat2x3")return e("vec2");if(A==="vec3"||HA(A))return e("vec3");if(A==="mat4x3")return e("vec4");t()}if(s==="vec4"){if(A==="mat2x4")return e("vec2");if(A==="mat3x4")return e("vec3");if(A==="vec4"||qA(A))return e("vec4");t()}if(A==="vec2"){if(JA(s))return e("vec2");if(s==="mat2x3")return e("vec3");if(s==="mat2x4")return e("vec4");t()}if(A==="vec3"){if(s==="mat3x2")return e("vec2");if(HA(s))return e("vec3");if(s==="mat3x4")return e("vec4");t()}if(A==="vec4"){if(s==="mat4x2")return e("vec2");if(s==="mat4x3")return e("vec3");if(qA(s))return e("vec4");t()}if(JA(s)){if(JA(A))return e("mat2");if(A==="mat3x2")return e("mat3x2");if(A==="mat4x2")return e("mat4x2");t()}if(s==="mat2x3"){if(JA(A))return e("mat2x3");if(A==="mat3x2")return e("mat3");if(A==="mat4x2")return e("mat4x3");t()}if(s==="mat2x4"){if(JA(A))return e("mat2x4");if(A==="mat3x2")return e("mat3x4");if(A==="mat4x2")return e("mat4");t()}if(s==="mat3x2"){if(A==="mat2x3")return e("mat2");if(HA(A))return e("mat3x2");if(A==="mat4x3")return e("mat4x2");t()}if(HA(s)){if(A==="mat2x3")return e("mat2x3");if(HA(A))return e("mat3");if(A==="mat4x3")return e("mat4x3");t()}if(s==="mat3x4"){if(A==="mat2x3")return e("mat2x4");if(HA(A))return e("mat3x4");if(A==="mat4x3")return e("mat4");t()}if(s==="mat4x2"){if(A==="mat2x4")return e("mat2");if(A==="mat3x4")return e("mat3x2");if(qA(A))return e("mat4x2");t()}if(s==="mat4x3"){if(A==="mat2x4")return e("mat2x3");if(A==="mat3x4")return e("mat3");if(qA(A))return e("mat4x3");t()}if(qA(s)){if(A==="mat2x4")return e("mat2x4");if(A==="mat3x4")return e("mat3x4");if(qA(A))return e("mat4");t()}throw new Error(`Invalid mul types: ${s}, ${A}`)}const et=(s,A)=>new qi({a:s,b:A}),Hi=(s,A)=>new zi({a:s,b:A}),qe=(s,A)=>new Ki({a:s,b:A});class qi extends St{constructor({a:A,b:t}){super({a:A,b:t,outKey:"sum",outTypeFunc:He}),this.statements=({inputs:e,outputs:i})=>[`${i.sum} = ${e.a} + ${e.b};`]}}class zi extends St{constructor({a:A,b:t}){super({a:A,b:t,outKey:"difference",outTypeFunc:Ti}),this.statements=({inputs:e,outputs:i})=>[`${i.difference} = ${e.a} - ${e.b};`]}}class Ki extends St{constructor({a:A,b:t}){super({a:A,b:t,outKey:"product",outTypeFunc:Ji}),this.statements=({inputs:e,outputs:i})=>[`${i.product} = ${e.a} * ${e.b};`]}}const Pi=s=>new ji({value:s}),Oi=s=>new Zi({value:s});class ji extends jt{constructor({value:A}){super({a:A,outKey:"uint",outTypeFunc:()=>"uint"}),this.statements=({inputs:t,outputs:e})=>[`${e.uint} = packHalf2x16(${t.a});`]}}class Zi extends jt{constructor({value:A}){super({a:A,outKey:"rgba8",outTypeFunc:()=>"vec4"}),this.statements=({inputs:t,outputs:e})=>[`uvec4 uRgba = uvec4(${t.a} & 0xffu, (${t.a} >> 8u) & 0xffu, (${t.a} >> 16u) & 0xffu, (${t.a} >> 24u) & 0xffu);`,`${e.rgba8} = vec4(uRgba) / 255.0;`]}}const Vi=s=>new $i({a:s}),Wi=({vector:s,vectorType:A,x:t,y:e,z:i,w:a,r,g:n,b:I,a:o})=>new ea({vector:s,vectorType:A,x:t,y:e,z:i,w:a,r,g:n,b:I,a:o}),Xi=(s,A)=>new ta({a:s,b:A});class $i extends jt{constructor({a:A}){super({a:A,outTypeFunc:t=>t,outKey:"normalize"}),this.statements=({inputs:t,outputs:e})=>[`${e.normalize} = normalize(${t.a});`]}}function Aa(s){if(s==="float")return"vec2";if(s==="vec2")return"vec3";if(s==="vec3")return"vec4";throw new Error("Invalid type")}class ta extends St{constructor({a:A,b:t}){const e=SA(A),i=Aa(e);super({a:A,b:t,outKey:"extend",outTypeFunc:()=>i}),this.statements=({inputs:a,outputs:r})=>[`${r.extend} = ${i}(${a.a}, ${a.b});`]}}class ea extends Y{constructor({vector:A,vectorType:t,x:e,y:i,z:a,w:r,r:n,g:I,b:o,a:B}){if(!A&&!t)throw new Error("Either vector or vectorType must be provided");const g=t??SA(A),Q=Vs(g),c=Ws(g),E={vector:g,x:Q,y:Q,r:Q,g:Q},C={vector:A,x:e,y:i,r:n,g:I};c>=3&&(Object.assign(E,{z:Q,b:Q}),Object.assign(C,{z:a,b:o})),c>=4&&(Object.assign(E,{w:Q,a:Q}),Object.assign(C,{w:r,a:B})),super({inTypes:E,outTypes:{vector:g},inputs:C}),this.statements=({inputs:h,outputs:y})=>{const{vector:u}=y,{vector:l,x:p,y:f,z:D,w:k,r:b,g:T,b:J,a:H}=h,U=[`${u}.x = ${p??b??(l?`${l}.x`:ot(Q))};`,`${u}.y = ${f??T??(l?`${l}.y`:ot(Q))};`];return c>=3&&U.push(`${u}.z = ${D??J??(l?`${l}.z`:ot(Q))};`),c>=4&&U.push(`${u}.w = ${k??H??(l?`${l}.w`:ot(Q))};`),U}}dynoOut(){return new P(this,"vector")}}const sa=(s,{scale:A,scales:t,rotate:e,translate:i})=>new aa({position:s,scale:A,scales:t,rotate:e,translate:i}).outputs.position,ia=(s,{scale:A,scales:t,rotate:e})=>new ra({dir:s,scale:A,scales:t,rotate:e}).outputs.dir;class aa extends Y{constructor({position:A,scale:t,scales:e,rotate:i,translate:a}){super({inTypes:{position:"vec3",scale:"float",scales:"vec3",rotate:"vec4",translate:"vec3"},outTypes:{position:"vec3"},inputs:{position:A,scale:t,scales:e,rotate:i,translate:a},statements:({inputs:r,outputs:n})=>{const{position:I}=n;if(!I)return[];const{scale:o,scales:B,rotate:g,translate:Q}=r;return[`${I} = ${r.position??"vec3(0.0, 0.0, 0.0)"};`,o?`${I} *= ${o};`:null,B?`${I} *= ${B};`:null,g?`${I} = quatVec(${g}, ${I});`:null,Q?`${I} += ${Q};`:null].filter(Boolean)}})}}class ra extends Y{constructor({dir:A,scale:t,scales:e,rotate:i}){super({inTypes:{dir:"vec3",scale:"float",scales:"vec3",rotate:"vec4"},outTypes:{dir:"vec3"},inputs:{dir:A,scale:t,scales:e,rotate:i},statements:({inputs:a,outputs:r})=>{const{dir:n}=r;if(!n)return[];const{scale:I,scales:o,rotate:B}=a;return[`${n} = ${a.dir??"vec3(0.0, 0.0, 0.0)"};`,I?`${n} *= ${I};`:null,o?`${n} *= ${o};`:null,B?`${n} = quatVec(${B}, ${n});`:null].filter(Boolean)}})}}var na=`precision highp float;
precision highp int;
precision highp sampler2D;
precision highp usampler2D;
precision highp isampler2D;
precision highp sampler2DArray;
precision highp usampler2DArray;
precision highp isampler2DArray;
precision highp sampler3D;
precision highp usampler3D;
precision highp isampler3D;

#include <splatDefines>

uniform uint targetLayer;
uniform int targetBase;
uniform int targetCount;

out vec4 target;

{{ GLOBALS }}

void computeReadback(int index) {
    {{ STATEMENTS }}
}

void main() {
    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);
    int index = targetIndex - targetBase;

    if ((index >= 0) && (index < targetCount)) {
        computeReadback(index);
    } else {
        target = vec4(0.0, 0.0, 0.0, 0.0);
    }
}`;const uA=class lA{constructor({renderer:A}={}){this.renderer=A,this.capacity=0,this.count=0}dispose(){this.target&&(this.target.dispose(),this.target=void 0)}ensureBuffer(A,t){const e=Math.ceil(Math.max(1,A)/x)*x*4;if(t.byteLength>=e)return t;const i=new ArrayBuffer(e);if(t instanceof ArrayBuffer)return i;const a=t.constructor;return new a(i)}ensureCapacity(A){const{width:t,height:e,depth:i,maxSplats:a}=AA(A);(!this.target||a>this.capacity)&&(this.dispose(),this.capacity=a,this.target=new pe(t,e,i,{depthBuffer:!1,stencilBuffer:!1,generateMipmaps:!1,magFilter:pt,minFilter:pt}),this.target.texture.format=jA,this.target.texture.type=st,this.target.texture.internalFormat="RGBA8")}prepareProgramMaterial(A){let t=lA.readbackProgram.get(A);if(!t){const i=FA({index:"int"},{rgba8:"vec4"},({index:a})=>(A.inputs.index=a,{rgba8:new oi({rgba8:A.outputs.rgba8})}));lA.programTemplate||(lA.programTemplate=new Je(na)),t=new Te({graph:i,inputs:{index:"index"},outputs:{rgba8:"target"},template:lA.programTemplate}),Object.assign(t.uniforms,{targetLayer:{value:0},targetBase:{value:0},targetCount:{value:0}}),lA.readbackProgram.set(A,t)}const e=t.prepareMaterial();return lA.mesh.material=e,{program:t,material:e}}saveRenderState(A){return{xrPresenting:A.xr.isPresenting,autoClear:A.autoClear,scissorTest:A.getScissorTest(),pixelRatio:A.getPixelRatio()}}resetRenderState(A,t){A.setRenderTarget(null),A.setPixelRatio(t.pixelRatio),A.xr.isPresenting=t.xrPresenting,A.autoClear=t.autoClear,A.setScissorTest(t.scissorTest)}process({count:A,material:t}){const e=this.renderer;if(!e)throw new Error("No renderer");if(!this.target)throw new Error("No target");const i=x*RA;t.uniforms.targetBase.value=0,t.uniforms.targetCount.value=A;let a=0;for(;a<A;){const r=Math.floor(a/i),n=r*i,I=Math.min(RA,Math.ceil((A-n)/x));t.uniforms.targetLayer.value=r,e.setPixelRatio(1),e.setRenderTarget(this.target,r),e.xr.isPresenting=!1,e.autoClear=!1,e.setScissorTest(!0),e.setScissor(0,0,x,I),e.render(lA.scene,lA.camera),a+=x*I}this.count=A}async read({readback:A}){const t=this.renderer;if(!t)throw new Error("No renderer");if(!this.target)throw new Error("No target");const e=Math.ceil(this.count/x)*x;if(A.byteLength<e*4)throw new Error(`Readback buffer too small: ${A.byteLength} < ${e*4}`);const i=new Uint8Array(A instanceof ArrayBuffer?A:A.buffer),a=x*RA;let r=0;const n=[];for(;r<this.count;){const I=Math.floor(r/a),o=I*a,B=Math.min(RA,Math.ceil((this.count-o)/x));t.setPixelRatio(1),t.setRenderTarget(this.target,I);const g=x*B*4,Q=i.subarray(o*4,o*4+g),c=t==null?void 0:t.readRenderTargetPixelsAsync(this.target,0,0,x,B,Q);n.push(c),r+=x*B}return Promise.all(n).then(()=>A)}render({reader:A,count:t,renderer:e}){if(this.renderer=e||this.renderer,!this.renderer)throw new Error("No renderer");this.ensureCapacity(t);const{program:i,material:a}=this.prepareProgramMaterial(A);i.update();const r=this.saveRenderState(this.renderer);this.process({count:t,material:a}),this.resetRenderState(this.renderer,r)}async readback({readback:A}){if(!this.renderer)throw new Error("No renderer");const t=this.saveRenderState(this.renderer),e=this.read({readback:A});return this.resetRenderState(this.renderer,t),e}async renderReadback({reader:A,count:t,renderer:e,readback:i}){if(this.renderer=e||this.renderer,!this.renderer)throw new Error("No renderer");this.ensureCapacity(t);const{program:a,material:r}=this.prepareProgramMaterial(A);a.update();const n=this.saveRenderState(this.renderer);this.process({count:t,material:r});const I=this.read({readback:i});return this.resetRenderState(this.renderer,n),I}getTexture(){var A;return(A=this.target)==null?void 0:A.texture}};uA.programTemplate=null;uA.readbackProgram=new Map;uA.geometry=new fe(2,2);uA.mesh=new yt(uA.geometry,new Ot({visible:!1}));uA.scene=new MA().add(uA.mesh);uA.camera=new me;let ze=uA;const Xt=class q{constructor(A={}){this.capacity=0,this.count=0,this.array=null,this.readback=null,this.source=null,this.needsUpdate=!0,this.dyno=new IA({key:"rgbaArray",type:Ke,globals:()=>[Pe],value:{texture:q.getEmpty(),count:0},update:t=>{var e;return t.texture=((e=this.readback)==null?void 0:e.getTexture())??this.source??q.getEmpty(),t.count=this.count,t}}),A.array?(this.array=A.array,this.capacity=Math.floor(this.array.length/4),this.capacity=Math.floor(this.capacity/x)*x,this.count=Math.min(this.capacity,A.count??Number.POSITIVE_INFINITY)):(this.capacity=A.capacity??0,this.count=0)}dispose(){this.readback&&(this.readback.dispose(),this.readback=null),this.source&&(this.source.dispose(),this.source=null)}ensureCapacity(A){var t;if(!this.array||A>(((t=this.array)==null?void 0:t.length)??0)/4){this.capacity=AA(A).maxSplats;const e=new Uint8Array(this.capacity*4);this.array&&e.set(this.array),this.array=e}return this.array}getTexture(){var A;let t=(A=this.readback)==null?void 0:A.getTexture();return(this.source||this.array)&&(t=this.maybeUpdateSource()),t??q.getEmpty()}maybeUpdateSource(){if(!this.array)throw new Error("No array");if(this.needsUpdate||!this.source){if(this.needsUpdate=!1,this.source){const{width:A,height:t,depth:e}=this.source.image;this.capacity!==A*t*e&&(this.source.dispose(),this.source=null)}if(this.source)this.array.buffer!==this.source.image.data.buffer&&(this.source.image.data=new Uint8Array(this.array.buffer));else{const{width:A,height:t,depth:e}=AA(this.capacity);this.source=new LA(this.array,A,t,e),this.source.format=jA,this.source.type=st,this.source.internalFormat="RGBA8",this.source.needsUpdate=!0}this.source.needsUpdate=!0}return this.source}render({reader:A,count:t,renderer:e}){this.readback||(this.readback=new ze({renderer:e})),this.readback.render({reader:A,count:t,renderer:e}),this.capacity=this.readback.capacity,this.count=this.readback.count}fromPackedSplats({packedSplats:A,base:t,count:e,renderer:i}){const{dynoSplats:a,dynoBase:r,dynoCount:n,reader:I}=q.makeDynos();return a.packedSplats=A,r.value=t,n.value=e,this.render({reader:I,count:e,renderer:i}),this}async read(){if(!this.readback)throw new Error("No readback");return(!this.array||this.array.length<this.count*4)&&(this.array=new Uint8Array(this.capacity*4)),(await this.readback.readback({readback:this.array})).subarray(0,this.count*4)}static getEmpty(){if(!q.emptySource){const A=new Uint8Array(4);q.emptySource=new LA(A,1,1,1),q.emptySource.format=jA,q.emptySource.type=st,q.emptySource.internalFormat="RGBA8",q.emptySource.needsUpdate=!0}return q.emptySource}static makeDynos(){if(!q.dynos){const A=new $t,t=new Yt({value:0}),e=new Yt({value:0}),i=FA({index:"int"},{rgba8:"vec4"},({index:a})=>{if(!a)throw new Error("index is undefined");a=et(a,t);const r=ti(A,a,t,e);return{rgba8:ht(r).outputs.rgba}});q.dynos={dynoSplats:A,dynoBase:t,dynoCount:e,reader:i}}return q.dynos}};Xt.emptySource=null;Xt.dynos=null;let ga=Xt;const Ke={type:"RgbaArray"},Pe=O(`
  struct RgbaArray {
    sampler2DArray texture;
    int count;
  };
`);function oa(s,A){return new Y({inTypes:{rgba:Ke,index:"int"},outTypes:{rgba:"vec4"},inputs:{rgba:s,index:A},globals:()=>[Pe],statements:({inputs:t,outputs:e})=>QA(`
        if ((index >= 0) && (index < ${t.rgba}.count)) {
          ${e.rgba} = texelFetch(${t.rgba}.texture, splatTexCoord(index), 0);
        } else {
          ${e.rgba} = vec4(0.0, 0.0, 0.0, 0.0);
        }
      `)}).outputs.rgba}function Ia(s){switch(s){case"all":return 0;case"plane":return 1;case"sphere":return 2;case"box":return 3;case"ellipsoid":return 4;case"cylinder":return 5;case"capsule":return 6;case"infinite_cone":return 7;default:throw new Error(`Unknown SDF type: ${s}`)}}function Ba(s){switch(s){case"multiply":return 0;case"set_rgb":return 1;case"add_rgba":return 2;default:throw new Error(`Unknown blend mode: ${s}`)}}class Qa extends Pt{constructor(A={}){super();const{type:t,invert:e,opacity:i,color:a,displace:r,radius:n}=A;this.type=t??"sphere",this.invert=e??!1,this.opacity=i??1,this.color=a??new TA(1,1,1),this.displace=r??new d(0,0,0),this.radius=n??0}}const Oe=class je extends Pt{constructor(A={}){const{name:t,rgbaBlendMode:e="multiply",sdfSmooth:i=0,softEdge:a=0,invert:r=!1,sdfs:n=null}=A;super(),this.rgbaBlendMode=e,this.sdfSmooth=i,this.softEdge=a,this.invert=r,this.sdfs=n,this.ordering=je.nextOrdering++,this.name=t??`Edit ${this.ordering}`}addSdf(A){this.sdfs==null&&(this.sdfs=[]),this.sdfs.push(A)}removeSdf(A){this.sdfs!=null&&(this.sdfs=this.sdfs.filter(t=>t!==A))}};Oe.nextOrdering=1;let Ze=Oe;class Ca{constructor({maxSdfs:A,maxEdits:t}){this.maxSdfs=Math.max(16,A??0),this.numSdfs=0,this.sdfData=new Uint32Array(this.maxSdfs*8*4),this.sdfFloatData=new Float32Array(this.sdfData.buffer),this.sdfTexture=this.newSdfTexture(this.sdfData,this.maxSdfs),this.dynoSdfArray=new IA({key:"sdfArray",type:Ve,globals:()=>[We],value:{numSdfs:0,sdfTexture:this.sdfTexture},update:e=>(e.numSdfs=this.numSdfs,e.sdfTexture=this.sdfTexture,e)}),this.maxEdits=Math.max(16,t??0),this.numEdits=0,this.editData=new Uint32Array(this.maxEdits*4),this.editFloatData=new Float32Array(this.editData.buffer),this.dynoNumEdits=new Yt({value:0}),this.dynoEdits=this.newEdits(this.editData,this.maxEdits)}newSdfTexture(A,t){const e=new ms(A,8,t,PA,_A);return e.internalFormat="RGBA32UI",e.needsUpdate=!0,e}newEdits(A,t){return new IA({key:"edits",type:"uvec4",count:t,globals:()=>[Xe],value:A})}ensureCapacity({maxSdfs:A,maxEdits:t}){let e=!1;return A>this.sdfTexture.image.height&&(this.sdfTexture.dispose(),this.maxSdfs=Math.max(this.maxSdfs*2,A),this.sdfData=new Uint32Array(this.maxSdfs*8*4),this.sdfFloatData=new Float32Array(this.sdfData.buffer),this.sdfTexture=this.newSdfTexture(this.sdfData,this.maxSdfs)),t>(this.dynoEdits.count??0)&&(this.maxEdits=Math.max(this.maxEdits*2,t),this.editData=new Uint32Array(this.maxEdits*4),this.editFloatData=new Float32Array(this.editData.buffer),this.dynoEdits=this.newEdits(this.editData,this.maxEdits),e=!0),e}updateEditData(A,t){const e=this.editData[A]!==t;return this.editData[A]=t,e}updateEditFloatData(A,t){zA[0]=t;const e=this.editFloatData[A]!==zA[0];return e&&(this.editFloatData[A]=zA[0]),e}encodeEdit(A,{sdfFirst:t,sdfCount:e,invert:i,rgbaBlendMode:a,softEdge:r,sdfSmooth:n}){const I=A*4;let o=!1;return o=this.updateEditData(I+0,a|(i?256:0))||o,o=this.updateEditData(I+1,t|e<<16)||o,o=this.updateEditFloatData(I+2,r)||o,o=this.updateEditFloatData(I+3,n)||o,o}updateSdfData(A,t){const e=this.sdfData[A]!==t;return this.sdfData[A]=t,e}updateSdfFloatData(A,t){zA[0]=t;const e=this.sdfFloatData[A]!==zA[0];return e&&(this.sdfFloatData[A]=zA[0]),e}encodeSdf(A,{sdfType:t,invert:e,center:i,quaternion:a,scale:r,sizes:n},I){const o=A*32,B=t|(e?256:0);let g=!1;g=this.updateSdfFloatData(o+0,(i==null?void 0:i.x)??0)||g,g=this.updateSdfFloatData(o+1,(i==null?void 0:i.y)??0)||g,g=this.updateSdfFloatData(o+2,(i==null?void 0:i.z)??0)||g,g=this.updateSdfData(o+3,B)||g,g=this.updateSdfFloatData(o+4,(a==null?void 0:a.x)??0)||g,g=this.updateSdfFloatData(o+5,(a==null?void 0:a.y)??0)||g,g=this.updateSdfFloatData(o+6,(a==null?void 0:a.z)??0)||g,g=this.updateSdfFloatData(o+7,(a==null?void 0:a.w)??0)||g,g=this.updateSdfFloatData(o+8,(r==null?void 0:r.x)??0)||g,g=this.updateSdfFloatData(o+9,(r==null?void 0:r.y)??0)||g,g=this.updateSdfFloatData(o+10,(r==null?void 0:r.z)??0)||g,g=this.updateSdfData(o+11,0)||g,g=this.updateSdfFloatData(o+12,(n==null?void 0:n.x)??0)||g,g=this.updateSdfFloatData(o+13,(n==null?void 0:n.y)??0)||g,g=this.updateSdfFloatData(o+14,(n==null?void 0:n.z)??0)||g,g=this.updateSdfFloatData(o+15,(n==null?void 0:n.w)??0)||g;const Q=Math.min(4,I.length);for(let c=0;c<Q;++c){const E=o+16+c*4;g=this.updateSdfFloatData(E+0,I[c].x)||g,g=this.updateSdfFloatData(E+1,I[c].y)||g,g=this.updateSdfFloatData(E+2,I[c].z)||g,g=this.updateSdfFloatData(E+3,I[c].w)||g}return g}update(A){const t=A.reduce((g,{sdfs:Q})=>g+Q.length,0),e=this.ensureCapacity({maxEdits:A.length,maxSdfs:t}),i=[new bA,new bA],a=new d,r=new W,n=new d,I=new bA;let o=0,B=e;A.length!==this.dynoNumEdits.value&&(this.dynoNumEdits.value=A.length,this.numEdits=A.length,B=!0);for(const[g,{edit:Q,sdfs:c}]of A.entries()){B=this.encodeEdit(g,{sdfFirst:o,sdfCount:c.length,invert:Q.invert,rgbaBlendMode:Ba(Q.rgbaBlendMode),softEdge:Q.softEdge,sdfSmooth:Q.sdfSmooth})||B;let E=!1;for(const C of c)I.set(C.scale.x,C.scale.y,C.scale.z,C.radius),C.scale.setScalar(1),C.updateMatrixWorld(),C.matrixWorld.clone().invert().decompose(a,r,n),C.scale.set(I.x,I.y,I.z),C.updateMatrixWorld(),i[0].set(C.color.r,C.color.g,C.color.b,C.opacity),i[1].set(C.displace.x,C.displace.y,C.displace.z,1),E=this.encodeSdf(o,{sdfType:Ia(C.type),invert:C.invert,center:a,quaternion:r,scale:n,sizes:I},i)||E,o+=1;this.numSdfs=o,E&&(this.sdfTexture.needsUpdate=!0),B||(B=E)}return{updated:B,dynoUpdated:e}}modify(A){return ca(A,this.dynoSdfArray,this.dynoNumEdits,this.dynoEdits)}}const Ve={type:"SdfArray"},We=O(`
  struct SdfArray {
    int numSdfs;
    usampler2D sdfTexture;
  };

  void unpackSdfArray(
    usampler2D sdfTexture, int sdfIndex, out uint flags,
    out vec3 center, out vec4 quaternion, out vec3 scale, out vec4 sizes,
    int numValues, out vec4 values[4]
  ) {
    uvec4 temp = texelFetch(sdfTexture, ivec2(0, sdfIndex), 0);
    flags = temp.w;
    center = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(1, sdfIndex), 0);
    quaternion = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    temp = texelFetch(sdfTexture, ivec2(2, sdfIndex), 0);
    scale = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(3, sdfIndex), 0);
    sizes = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    for (int i = 0; i < numValues; ++i) {
      temp = texelFetch(sdfTexture, ivec2(4 + i, sdfIndex), 0);
      values[i] = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));
    }
  }

  const uint SDF_FLAG_TYPE = 0xFFu;
  const uint SDF_FLAG_INVERT = 1u << 8u;

  const uint SDF_TYPE_ALL = 0u;
  const uint SDF_TYPE_PLANE = 1u;
  const uint SDF_TYPE_SPHERE = 2u;
  const uint SDF_TYPE_BOX = 3u;
  const uint SDF_TYPE_ELLIPSOID = 4u;
  const uint SDF_TYPE_CYLINDER = 5u;
  const uint SDF_TYPE_CAPSULE = 6u;
  const uint SDF_TYPE_INFINITE_CONE = 7u;

  float evaluateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 outValues[4]
  ) {
    float distanceAccum = (smoothK == 0.0) ? 1.0 / 0.0 : 0.0;
    float maxExp = -1.0 / 0.0;
    for (int i = 0; i < numValues; ++i) {
        outValues[i] = vec4(0.0);
    }

    uint flags;
    vec3 center, scale;
    vec4 quaternion, sizes;
    vec4 values[4];

    int sdfLast = min(sdfFirst + sdfCount, numSdfs);
    for (int index = sdfFirst; index < sdfLast; ++index) {
      unpackSdfArray(sdfTexture, index, flags, center, quaternion, scale, sizes, numValues, values);
      uint sdfType = flags & SDF_FLAG_TYPE;
      vec3 sdfPos = quatVec(quaternion, pos * scale) + center;

      float distance;
      switch (sdfType) {
        case SDF_TYPE_ALL:
          distance = -1.0 / 0.0;
          break;
        case SDF_TYPE_PLANE: {
          distance = sdfPos.z;
          break;
        }
        case SDF_TYPE_SPHERE: {
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_BOX: {
          vec3 q = abs(sdfPos) - sizes.xyz + sizes.w;
          distance = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - sizes.w;
          break;
        }
        case SDF_TYPE_ELLIPSOID: {
          vec3 sizes = sizes.xyz;
          float k0 = length(sdfPos / sizes);
          float k1 = length(sdfPos / dot(sizes, sizes));
          distance = k0 * (k0 - 1.0) / k1;
          break;
        }
        case SDF_TYPE_CYLINDER: {
          vec2 d = abs(vec2(length(sdfPos.xz), sdfPos.y)) - sizes.wy;
          distance = min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
          break;
        }
        case SDF_TYPE_CAPSULE: {
          sdfPos.y -= clamp(sdfPos.y, -0.5 * sizes.y, 0.5 * sizes.y);
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_INFINITE_CONE: {
          float angle = 0.25 * PI * sizes.w;
          vec2 c = vec2(sin(angle), cos(angle));
          vec2 q = vec2(length(sdfPos.xy), -sdfPos.z);
          float d = length(q - c * max(dot(q, c), 0.0));
          distance = d * (((q.x * c.y - q.y * c.x) < 0.0) ? -1.0 : 1.0);
          break;
        }
      }

      if ((flags & SDF_FLAG_INVERT) != 0u) {
        distance = -distance;
      }

      if (smoothK == 0.0) {
        if (distance < distanceAccum) {
          distanceAccum = distance;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] = values[i];
          }
        }
      } else {
        float scaledDistance = -distance / smoothK;
        if (scaledDistance > maxExp) {
          float scale = exp(maxExp - scaledDistance);
          distanceAccum *= scale;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] *= scale;
          }
          maxExp = scaledDistance;
        }

        float weight = exp(scaledDistance - maxExp);
        distanceAccum += weight;
        for (int i = 0; i < numValues; ++i) {
          outValues[i] += weight * values[i];
        }
      }
    }

    if (smoothK == 0.0) {
      return distanceAccum;
    } else {
      // Very distant SDFs may result in 0 accumulation
      if (distanceAccum == 0.0) {
        return 1.0 / 0.0;
      }
      for (int i = 0; i < numValues; ++i) {
        outValues[i] /= distanceAccum;
      }
      return (-log(distanceAccum) - maxExp) * smoothK;
    }
  }

  float modulateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 values[4],
    float softEdge, bool invert
  ) {
    float distance = evaluateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, numValues, values);
    if (invert) {
      distance = -distance;
    }

    return (softEdge == 0.0) ? ((distance < 0.0) ? 1.0 : 0.0)
      : clamp(-distance / softEdge + 0.5, 0.0, 1.0);
  }
`),Xe=O(`
  const uint EDIT_FLAG_BLEND = 0xFFu;
  const uint EDIT_BLEND_MULTIPLY = 0u;
  const uint EDIT_BLEND_SET_RGB = 1u;
  const uint EDIT_BLEND_ADD_RGBA = 2u;
  const uint EDIT_FLAG_INVERT = 0x100u;

  void decodeEdit(
    uvec4 packedEdit, out int sdfFirst, out int sdfCount,
    out bool invert, out uint rgbaBlendMode, out float softEdge, out float sdfSmooth
  ) {
    rgbaBlendMode = packedEdit.x & EDIT_FLAG_BLEND;
    invert = (packedEdit.x & EDIT_FLAG_INVERT) != 0u;

    sdfFirst = int(packedEdit.y & 0xFFFFu);
    sdfCount = int(packedEdit.y >> 16u);

    softEdge = uintBitsToFloat(packedEdit.z);
    sdfSmooth = uintBitsToFloat(packedEdit.w);
  }

  void applyRgbaDisplaceEdit(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, inout vec3 pos,
    float smoothK, float softEdge, bool invert, uint rgbaBlendMode, inout vec4 rgba
  ) {
    vec4 values[4];
    float modulate = modulateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, 2, values, softEdge, invert);
    // On Android, moving values[0] is necessary to work around a compiler bug.
    vec4 sdfRgba = values[0];
    vec4 sdfDisplaceScale = values[1];

    vec4 target;
    switch (rgbaBlendMode) {
      case EDIT_BLEND_MULTIPLY:
        target = rgba * sdfRgba;
        break;
      case EDIT_BLEND_SET_RGB:
        target = vec4(sdfRgba.rgb, rgba.a * sdfRgba.a);
        break;
      case EDIT_BLEND_ADD_RGBA:
        target = rgba + sdfRgba;
        break;
      default:
        // Debug output if blend mode not set
        target = vec4(fract(pos), 1.0);
    }
    rgba = mix(rgba, target, modulate);
    pos += sdfDisplaceScale.xyz * modulate;
  }

  void applyPackedRgbaDisplaceEdit(uvec4 packedEdit, usampler2D sdfTexture, int numSdfs, inout vec3 pos, inout vec4 rgba) {
    int sdfFirst, sdfCount;
    bool invert;
    uint rgbaBlendMode;
    float softEdge, sdfSmooth;
    decodeEdit(packedEdit, sdfFirst, sdfCount, invert, rgbaBlendMode, softEdge, sdfSmooth);
    applyRgbaDisplaceEdit(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, sdfSmooth, softEdge, invert, rgbaBlendMode, rgba);
  }
`);function ca(s,A,t,e){return new Y({inTypes:{gsplat:G,sdfArray:Ve,numEdits:"int",rgbaDisplaceEdits:"uvec4"},outTypes:{gsplat:G},globals:()=>[We,Xe],inputs:{gsplat:s,sdfArray:A,numEdits:t,rgbaDisplaceEdits:e},statements:({inputs:i,outputs:a})=>{const{sdfArray:r,numEdits:n,rgbaDisplaceEdits:I}=i,{gsplat:o}=a;return QA(`
        ${o} = ${i.gsplat};
        if (isGsplatActive(${o}.flags)) {
          for (int editIndex = 0; editIndex < ${n}; ++editIndex) {
            applyPackedRgbaDisplaceEdit(
              ${I}[editIndex], ${r}.sdfTexture, ${r}.numSdfs,
              ${o}.center, ${o}.rgba
            );
          }
        }
      `)}}).outputs.gsplat}const zA=new Float32Array(1);class Ea{constructor(A){this.modifier=A,this.cache=new Map}apply(A){let t=this.cache.get(A);return t||(t=FA({index:"int"},{gsplat:G},({index:e})=>{const{gsplat:i}=A.apply({index:e});return this.modifier.apply({gsplat:i})}),this.cache.set(A,t)),t}}class Bt{constructor(){this.scale=new at({value:Number.NEGATIVE_INFINITY}),this.rotate=new Vt({value:new W(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY)}),this.translate=new mt({value:new d(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY)})}apply(A){return sa(A,{scale:this.scale,rotate:this.rotate,translate:this.translate})}applyDir(A){return ia(A,{rotate:this.rotate})}applyGsplat(A){return ke(A,{scale:this.scale,rotate:this.rotate,translate:this.translate})}updateFromMatrix(A){const t=new d,e=new W,i=new d;A.decompose(i,e,t);const a=(t.x+t.y+t.z)/3;let r=!1;return a!==this.scale.value&&(this.scale.value=a,r=!0),i.equals(this.translate.value)||(this.translate.value.copy(i),r=!0),e.equals(this.rotate.value)||(this.rotate.value.copy(e),r=!0),r}update(A){return A.updateMatrixWorld(),this.updateFromMatrix(A.matrixWorld)}}class $e extends Pt{constructor({numSplats:A,generator:t,construct:e,update:i}){if(super(),this.numSplats=A??0,this.generator=t,this.frameUpdate=i,this.version=0,e){const a=e(this);Object.assign(this,a)}}updateVersion(){this.version+=1}set needsUpdate(A){A&&this.updateVersion()}}const rt=class Jt extends $e{constructor(A={}){const t=new Bt,e=new Bt,i=new Bt,a=new Bt,r=new Vt({value:new bA(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY)}),n=new at({value:0}),I=new at({value:0}),o={transform:t,viewToWorld:e,worldToView:i,viewToObject:a,recolor:r,time:n,deltaTime:I};if(super({update:({time:B,deltaTime:g,viewToWorld:Q,globalEdits:c})=>this.update({time:B,deltaTime:g,viewToWorld:Q,globalEdits:c})}),this.isInitialized=!1,this.recolor=new TA(1,1,1),this.opacity=1,this.enableViewToObject=!1,this.enableViewToWorld=!1,this.enableWorldToView=!1,this.skinning=null,this.edits=null,this.rgbaDisplaceEdits=null,this.splatRgba=null,this.maxSh=3,this.packedSplats=A.packedSplats??new ZA,this.numSplats=this.packedSplats.numSplats,this.editable=A.editable??!0,this.onFrame=A.onFrame,this.context=o,this.objectModifier=A.objectModifier,this.worldModifier=A.worldModifier,this.updateGenerator(),A.url||A.fileBytes||A.constructSplats||A.packedSplats&&!A.packedSplats.isInitialized)this.initialized=this.asyncInitialize(A).then(async()=>{if(this.updateGenerator(),this.isInitialized=!0,A.onLoad){const B=A.onLoad(this);B instanceof Promise&&await B}return this});else if(this.isInitialized=!0,this.initialized=Promise.resolve(this),A.onLoad){const B=A.onLoad(this);B instanceof Promise&&(this.initialized=B.then(()=>this))}}async asyncInitialize(A){const{url:t,fileBytes:e,fileType:i,fileName:a,maxSplats:r,constructSplats:n}=A;if(t||e||n){const I={url:t,fileBytes:e,fileType:i,fileName:a,maxSplats:r,construct:n};this.packedSplats.reinitialize(I)}this.packedSplats&&(await this.packedSplats.initialized,this.numSplats=this.packedSplats.numSplats,this.updateGenerator())}static async staticInitialize(){await Se(),Jt.isStaticInitialized=!0}pushSplat(A,t,e,i,a){this.packedSplats.pushSplat(A,t,e,i,a)}forEachSplat(A){this.packedSplats.forEachSplat(A)}dispose(){this.packedSplats.dispose()}constructGenerator(A){const{transform:t,viewToObject:e,recolor:i}=A,a=FA({index:"int"},{gsplat:G},({index:r})=>{if(!r)throw new Error("index is undefined");let n=ft(this.packedSplats.dyno,r);if(this.maxSh>=1){const{sh1Texture:o,sh2Texture:B,sh3Texture:g}=this.ensureShTextures();if(o){const Q=e.translate,{center:c}=ht(n).outputs,E=Vi(Hi(c,Q));let C=da(n,o,E);this.maxSh>=2&&B&&(C=et(C,pa(n,B,E))),this.maxSh>=3&&g&&(C=et(C,ya(n,g,E)));let{rgba:h}=ht(n).outputs;h=et(h,Xi(C,_t("float",0))),n=kt({gsplat:n,rgba:h})}}if(this.splatRgba){const o=oa(this.splatRgba.dyno,r);n=kt({gsplat:n,rgba:o})}this.skinning&&(n=this.skinning.modify(n)),this.objectModifier&&(n=this.objectModifier.apply({gsplat:n}).gsplat),n=t.applyGsplat(n);const I=qe(i,ht(n).outputs.rgba);return n=kt({gsplat:n,rgba:I}),this.rgbaDisplaceEdits&&(n=this.rgbaDisplaceEdits.modify(n)),this.worldModifier&&(n=this.worldModifier.apply({gsplat:n}).gsplat),{gsplat:n}});this.generator=a}updateGenerator(){this.constructGenerator(this.context)}update({time:A,viewToWorld:t,deltaTime:e,globalEdits:i}){var a;this.numSplats=this.packedSplats.numSplats,this.context.time.value=A,this.context.deltaTime.value=e,Jt.dynoTime.value=A;const{transform:r,viewToObject:n,recolor:I}=this.context;let o=r.update(this);this.context.viewToWorld.updateFromMatrix(t)&&this.enableViewToWorld&&(o=!0);const B=t.clone().invert();this.context.worldToView.updateFromMatrix(B)&&this.enableWorldToView&&(o=!0);const g=new kA().compose(r.translate.value,r.rotate.value,new d().setScalar(r.scale.value)).invert().multiply(t);n.updateFromMatrix(g)&&(this.enableViewToObject||this.packedSplats.extra.sh1)&&(o=!0);const Q=new bA(this.recolor.r,this.recolor.g,this.recolor.b,this.opacity);Q.equals(I.value)||(I.value.copy(Q),o=!0);const c=this.editable?(this.edits??[]).concat(i):[];this.editable&&!this.edits&&this.traverseVisible(C=>{C instanceof Ze&&c.push(C)}),c.sort((C,h)=>C.ordering-h.ordering);const E=c.map(C=>{if(C.sdfs!=null)return{edit:C,sdfs:C.sdfs};const h=[];return C.traverseVisible(y=>{y instanceof Qa&&h.push(y)}),{edit:C,sdfs:h}});if(E.length>0&&!this.rgbaDisplaceEdits){const C=E.length,h=E.reduce((y,u)=>y+u.sdfs.length,0);this.rgbaDisplaceEdits=new Ca({maxEdits:C,maxSdfs:h}),this.updateGenerator()}if(this.rgbaDisplaceEdits){const C=this.rgbaDisplaceEdits.update(E);o||(o=C.updated),C.dynoUpdated&&this.updateGenerator()}o&&this.updateVersion(),(a=this.onFrame)==null||a.call(this,{mesh:this,time:A,deltaTime:e})}raycast(A,t){if(!this.packedSplats.packedArray||!this.packedSplats.numSplats)return;const{near:e,far:i,ray:a}=A,r=this.matrixWorld.clone().invert(),n=new de().setFromMatrix4(r),I=a.origin.clone().applyMatrix4(r),o=a.direction.clone().applyMatrix3(n),B=new d;r.decompose(new d,new W,B),(B.x*B.y*B.z)**(1/3);const g=Ys(I.x,I.y,I.z,o.x,o.y,o.z,e,i,this.packedSplats.numSplats,this.packedSplats.packedArray,!0);for(const Q of g){const c=a.direction.clone().multiplyScalar(Q).add(a.origin);t.push({distance:Q,point:c,object:this})}}ensureShTextures(){if(!this.packedSplats.extra.sh1)return{};let A=this.packedSplats.extra.sh1Texture;if(!A){let i=this.packedSplats.extra.sh1;const{width:a,height:r,depth:n,maxSplats:I}=AA(i.length/2);if(i.length<I*2){const B=new Uint32Array(I*2);B.set(i),this.packedSplats.extra.sh1=B,i=B}const o=new LA(i,a,r,n);o.format=fs,o.type=_A,o.internalFormat="RG32UI",o.needsUpdate=!0,A=new Mt({value:o,key:"sh1"}),this.packedSplats.extra.sh1Texture=A}if(!this.packedSplats.extra.sh2)return{sh1Texture:A};let t=this.packedSplats.extra.sh2Texture;if(!t){let i=this.packedSplats.extra.sh2;const{width:a,height:r,depth:n,maxSplats:I}=AA(i.length/4);if(i.length<I*4){const B=new Uint32Array(I*4);B.set(i),this.packedSplats.extra.sh2=B,i=B}const o=new LA(i,a,r,n);o.format=PA,o.type=_A,o.internalFormat="RGBA32UI",o.needsUpdate=!0,t=new Mt({value:o,key:"sh2"}),this.packedSplats.extra.sh2Texture=t}if(!this.packedSplats.extra.sh3)return{sh1Texture:A,sh2Texture:t};let e=this.packedSplats.extra.sh3Texture;if(!e){let i=this.packedSplats.extra.sh3;const{width:a,height:r,depth:n,maxSplats:I}=AA(i.length/4);if(i.length<I*4){const B=new Uint32Array(I*4);B.set(i),this.packedSplats.extra.sh3=B,i=B}const o=new LA(i,a,r,n);o.format=PA,o.type=_A,o.internalFormat="RGBA32UI",o.needsUpdate=!0,e=new Mt({value:o,key:"sh3"}),this.packedSplats.extra.sh3Texture=e}return{sh1Texture:A,sh2Texture:t,sh3Texture:e}}};rt.staticInitialized=rt.staticInitialize();rt.isStaticInitialized=!1;rt.dynoTime=new at({value:0});let wt=rt;const la=O(`
  vec3 evaluateSH1(Gsplat gsplat, usampler2DArray sh1, vec3 viewDir) {
    // Extract sint7 values packed into 2 x uint32
    uvec2 packed = texelFetch(sh1, splatTexCoord(gsplat.index), 0).rg;
    vec3 sh1_0 = vec3(ivec3(
      int(packed.x << 25u) >> 25,
      int(packed.x << 18u) >> 25,
      int(packed.x << 11u) >> 25
    )) / 63.0;
    vec3 sh1_1 = vec3(ivec3(
      int(packed.x << 4u) >> 25,
      int((packed.x >> 3u) | (packed.y << 29u)) >> 25,
      int(packed.y << 22u) >> 25
    )) / 63.0;
    vec3 sh1_2 = vec3(ivec3(
      int(packed.y << 15u) >> 25,
      int(packed.y << 8u) >> 25,
      int(packed.y << 1u) >> 25
    )) / 63.0;

    return sh1_0 * (-0.4886025 * viewDir.y)
      + sh1_1 * (0.4886025 * viewDir.z)
      + sh1_2 * (-0.4886025 * viewDir.x);
  }
`),ha=O(`
  vec3 evaluateSH2(Gsplat gsplat, usampler2DArray sh2, vec3 viewDir) {
    // Extract sint8 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh2, splatTexCoord(gsplat.index), 0);
    vec3 sh2_0 = vec3(ivec3(
      int(packed.x << 24u) >> 24,
      int(packed.x << 16u) >> 24,
      int(packed.x << 8u) >> 24
    )) / 127.0;
    vec3 sh2_1 = vec3(ivec3(
      int(packed.x) >> 24,
      int(packed.y << 24u) >> 24,
      int(packed.y << 16u) >> 24
    )) / 127.0;
    vec3 sh2_2 = vec3(ivec3(
      int(packed.y << 8u) >> 24,
      int(packed.y) >> 24,
      int(packed.z << 24u) >> 24
    )) / 127.0;
    vec3 sh2_3 = vec3(ivec3(
      int(packed.z << 16u) >> 24,
      int(packed.z << 8u) >> 24,
      int(packed.z) >> 24
    )) / 127.0;
    vec3 sh2_4 = vec3(ivec3(
      int(packed.w << 24u) >> 24,
      int(packed.w << 16u) >> 24,
      int(packed.w << 8u) >> 24
    )) / 127.0;

    return sh2_0 * (1.0925484 * viewDir.x * viewDir.y)
      + sh2_1 * (1.0925484 * viewDir.y * viewDir.z)
      + sh2_2 * (0.3153915 * (2.0 * viewDir.z * viewDir.z - viewDir.x * viewDir.x - viewDir.y * viewDir.y))
      + sh2_3 * (1.0925484 * viewDir.x * viewDir.z)
      + sh2_4 * (0.5462742 * (viewDir.x * viewDir.x - viewDir.y * viewDir.y));
  }
`),ua=O(`
  vec3 evaluateSH3(Gsplat gsplat, usampler2DArray sh3, vec3 viewDir) {
    // Extract sint6 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh3, splatTexCoord(gsplat.index), 0);
    vec3 sh3_0 = vec3(ivec3(
      int(packed.x << 26u) >> 26,
      int(packed.x << 20u) >> 26,
      int(packed.x << 14u) >> 26
    )) / 31.0;
    vec3 sh3_1 = vec3(ivec3(
      int(packed.x << 8u) >> 26,
      int(packed.x << 2u) >> 26,
      int((packed.x >> 4u) | (packed.y << 28u)) >> 26
    )) / 31.0;
    vec3 sh3_2 = vec3(ivec3(
      int(packed.y << 22u) >> 26,
      int(packed.y << 16u) >> 26,
      int(packed.y << 10u) >> 26
    )) / 31.0;
    vec3 sh3_3 = vec3(ivec3(
      int(packed.y << 4u) >> 26,
      int((packed.y >> 2u) | (packed.z << 30u)) >> 26,
      int(packed.z << 24u) >> 26
    )) / 31.0;
    vec3 sh3_4 = vec3(ivec3(
      int(packed.z << 18u) >> 26,
      int(packed.z << 12u) >> 26,
      int(packed.z << 6u) >> 26
    )) / 31.0;
    vec3 sh3_5 = vec3(ivec3(
      int(packed.z) >> 26,
      int(packed.w << 26u) >> 26,
      int(packed.w << 20u) >> 26
    )) / 31.0;
    vec3 sh3_6 = vec3(ivec3(
      int(packed.w << 14u) >> 26,
      int(packed.w << 8u) >> 26,
      int(packed.w << 2u) >> 26
    )) / 31.0;

    float xx = viewDir.x * viewDir.x;
    float yy = viewDir.y * viewDir.y;
    float zz = viewDir.z * viewDir.z;
    float xy = viewDir.x * viewDir.y;
    float yz = viewDir.y * viewDir.z;
    float zx = viewDir.z * viewDir.x;

    return sh3_0 * (-0.5900436 * viewDir.y * (3.0 * xx - yy))
      + sh3_1 * (2.8906114 * xy * viewDir.z) +
      + sh3_2 * (-0.4570458 * viewDir.y * (4.0 * zz - xx - yy))
      + sh3_3 * (0.3731763 * viewDir.z * (2.0 * zz - 3.0 * xx - 3.0 * yy))
      + sh3_4 * (-0.4570458 * viewDir.x * (4.0 * zz - xx - yy))
      + sh3_5 * (1.4453057 * viewDir.z * (xx - yy))
      + sh3_6 * (-0.5900436 * viewDir.x * (xx - 3.0 * yy));
  }
`);function da(s,A,t){return xt({inTypes:{gsplat:G,sh1:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:s,sh1:A,viewDir:t},globals:()=>[CA,la],statements:({inputs:e,outputs:i})=>QA(`
        if (isGsplatActive(${e.gsplat}.flags)) {
          ${i.rgb} = evaluateSH1(${e.gsplat}, ${e.sh1}, ${e.viewDir});
        } else {
          ${i.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}function pa(s,A,t){return xt({inTypes:{gsplat:G,sh2:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:s,sh2:A,viewDir:t},globals:()=>[CA,ha],statements:({inputs:e,outputs:i})=>QA(`
        if (isGsplatActive(${e.gsplat}.flags)) {
          ${i.rgb} = evaluateSH2(${e.gsplat}, ${e.sh2}, ${e.viewDir});
        } else {
          ${i.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}function ya(s,A,t){return xt({inTypes:{gsplat:G,sh3:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:s,sh3:A,viewDir:t},globals:()=>[CA,ua],statements:({inputs:e,outputs:i})=>QA(`
        if (isGsplatActive(${e.gsplat}.flags)) {
          ${i.rgb} = evaluateSH3(${e.gsplat}, ${e.sh3}, ${e.viewDir});
        } else {
          ${i.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}const As=class dt{constructor({fileBytes:A}){this.header="",this.littleEndian=!0,this.elements={},this.comments=[],this.data=null,this.numSplats=0,this.fileBytes=A instanceof ArrayBuffer?new Uint8Array(A):A}async parseHeader(){const A=new ReadableStream({start:a=>{a.enqueue(this.fileBytes.slice(0,65536)),a.close()}}).pipeThrough(new TextDecoderStream).getReader();this.header="";const t=`end_header
`;for(;;){const{value:a,done:r}=await A.read();if(r)throw new Error("Failed to read header");this.header+=a;const n=this.header.indexOf(t);if(n>=0){this.header=this.header.slice(0,n+t.length);break}}const e=new TextEncoder().encode(this.header).length;this.data=new DataView(this.fileBytes.buffer,e),this.elements={};let i=null;this.comments=[],this.header.trim().split(`
`).forEach((a,r)=>{const n=a.trim();if(r===0){if(n!=="ply")throw new Error("Invalid PLY header");return}if(n.length===0)return;const I=n.split(" ");switch(I[0]){case"format":if(I[1]==="binary_little_endian")this.littleEndian=!0;else if(I[1]==="binary_big_endian")this.littleEndian=!1;else throw new Error(`Unsupported PLY format: ${I[1]}`);if(I[2]!=="1.0")throw new Error(`Unsupported PLY version: ${I[2]}`);break;case"end_header":break;case"comment":this.comments.push(n.slice(8));break;case"element":{const o=I[1];i={name:o,count:Number.parseInt(I[2]),properties:{}},this.elements[o]=i;break}case"property":if(i==null)throw new Error("Property must be inside an element");I[1]==="list"?i.properties[I[4]]={isList:!0,type:I[3],countType:I[2]}:i.properties[I[2]]={isList:!1,type:I[1]};break}}),this.elements.vertex&&(this.numSplats=this.elements.vertex.count)}parseData(A){let t=0;const e=this.data;if(e==null)throw new Error("No data to parse");for(const i in this.elements){const a=this.elements[i],{count:r,properties:n}=a,I={},o=[];for(const[g,Q]of Object.entries(n))Q.isList?(I[g]=[],o.push(()=>{const c=I[g];c.length=Ct[Q.countType](e,t,this.littleEndian),t+=KA[Q.countType];for(let E=0;E<c.length;E++)c[E]=Ct[Q.type](e,t,this.littleEndian),t+=KA[Q.type]})):(I[g]=0,o.push(()=>{I[g]=Ct[Q.type](e,t,this.littleEndian),t+=KA[Q.type]}));const B=A(a)??(()=>{});for(let g=0;g<r;g++){for(const Q of o)Q();B(g,I)}}}parseSplats(A,t){if(this.elements.vertex==null)throw new Error("No vertex element found");let e=!1;const i=[];let a=0,r=[],n=[],I=[],o,B,g;function Q(){const y=wa[a];r=new Array(3).fill(null).flatMap((u,l)=>[0,1,2].map((p,f)=>`f_rest_${l+f*y/3}`)),n=new Array(5).fill(null).flatMap((u,l)=>[0,1,2].map((p,f)=>`f_rest_${3+l+f*y/3}`)),I=new Array(7).fill(null).flatMap((u,l)=>[0,1,2].map((p,f)=>`f_rest_${8+l+f*y/3}`)),o=a>=1?new Float32Array(3*3):void 0,B=a>=2?new Float32Array(5*3):void 0,g=a>=3?new Float32Array(7*3):void 0}function c(y,u){if(!o)throw new Error("Missing sh1");for(const[l,p]of r.entries())o[l]=u[p]*8/255-4;if(B)for(const[l,p]of n.entries())B[l]=u[p]*8/255-4;if(g)for(const[l,p]of I.entries())g[l]=u[p]*8/255-4;t==null||t(y,o,B,g)}function E(y){const{min_x:u,min_y:l,min_z:p,max_x:f,max_y:D,max_z:k,min_scale_x:b,min_scale_y:T,min_scale_z:J,max_scale_x:H,max_scale_y:U,max_scale_z:M,min_r:F,min_g:j,min_b:z,max_r:N,max_g:X,max_b:tA}=y.properties;if(!u||!l||!p||!f||!D||!k||!b||!T||!J||!H||!U||!M||!F||!j||!z||!N||!X||!tA)throw new Error("Missing PLY chunk properties");return e=!0,(dA,rA)=>{const{min_x:nA,min_y:Z,min_z:cA,max_x:eA,max_y:gA,max_z:w,min_scale_x:oA,min_scale_y:sA,min_scale_z:EA,max_scale_x:iA,max_scale_y:pA,max_scale_z:yA,min_r:VA,min_g:fA,min_b:mA,max_r:wA,max_g:DA,max_b:K}=rA;i.push({min_x:nA,min_y:Z,min_z:cA,max_x:eA,max_y:gA,max_z:w,min_scale_x:oA,min_scale_y:sA,min_scale_z:EA,max_scale_x:iA,max_scale_y:pA,max_scale_z:yA,min_r:VA,min_g:fA,min_b:mA,max_r:wA,max_g:DA,max_b:K})}}function C(y){if(t&&y.name==="sh")return a=Ce(y.properties),Q(),c;if(y.name!=="vertex")return null;const{packed_position:u,packed_rotation:l,packed_scale:p,packed_color:f}=y.properties;if(!u||!l||!p||!f)throw new Error("Missing PLY properties: packed_position, packed_rotation, packed_scale, packed_color");const D=Math.sqrt(2);return(k,b)=>{const T=i[k>>>8];if(T==null)throw new Error("Missing PLY chunk");const{min_x:J,min_y:H,min_z:U,max_x:M,max_y:F,max_z:j,min_scale_x:z,min_scale_y:N,min_scale_z:X,max_scale_x:tA,max_scale_y:dA,max_scale_z:rA,min_r:nA,min_g:Z,min_b:cA,max_r:eA,max_g:gA,max_b:w}=T,{packed_position:oA,packed_rotation:sA,packed_scale:EA,packed_color:iA}=b,pA=(oA>>>21&2047)/2047*(M-J)+J,yA=(oA>>>11&1023)/1023*(F-H)+H,VA=(oA&2047)/2047*(j-U)+U,fA=((sA>>>20&1023)/1023-.5)*D,mA=((sA>>>10&1023)/1023-.5)*D,wA=((sA&1023)/1023-.5)*D,DA=Math.sqrt(Math.max(0,1-fA*fA-mA*mA-wA*wA)),K=sA>>>30,NA=K===0?fA:K===1?DA:mA,Is=K<=1?mA:K===2?DA:wA,Bs=K<=2?wA:DA,Qs=K===0?DA:fA,Cs=Math.exp((EA>>>21&2047)/2047*(tA-z)+z),cs=Math.exp((EA>>>11&1023)/1023*(dA-N)+N),Es=Math.exp((EA&2047)/2047*(rA-X)+X),ls=(iA>>>24&255)/255*(eA-nA)+nA,hs=(iA>>>16&255)/255*(gA-Z)+Z,us=(iA>>>8&255)/255*(w-cA)+cA,ds=(iA&255)/255;A(k,pA,yA,VA,Cs,cs,Es,NA,Is,Bs,Qs,ds,ls,hs,us)}}const h=y=>{if(y.name==="chunk")return E(y);if(e)return C(y);if(y.name!=="vertex")return null;const{x:u,y:l,z:p,scale_0:f,scale_1:D,scale_2:k,rot_0:b,rot_1:T,rot_2:J,rot_3:H,opacity:U,f_dc_0:M,f_dc_1:F,f_dc_2:j,red:z,green:N,blue:X,alpha:tA}=y.properties;if(!u||!l||!p)throw new Error("Missing PLY properties: x, y, z");const dA=f&&D&&k,rA=b&&T&&J&&H,nA=tA!=null?ct[tA.type]:1,Z=z!=null?ct[z.type]:1,cA=N!=null?ct[N.type]:1,eA=X!=null?ct[X.type]:1;return a=Ce(y.properties),Q(),(gA,w)=>{const oA=dA?Math.exp(w.scale_0):dt.defaultPointScale,sA=dA?Math.exp(w.scale_1):dt.defaultPointScale,EA=dA?Math.exp(w.scale_2):dt.defaultPointScale,iA=rA?w.rot_1:0,pA=rA?w.rot_2:0,yA=rA?w.rot_3:0,VA=rA?w.rot_0:1,fA=U!=null?1/(1+Math.exp(-w.opacity)):tA!=null?w.alpha/nA:1,mA=M!=null?w.f_dc_0*Qt+.5:z!=null?w.red/Z:1,wA=F!=null?w.f_dc_1*Qt+.5:N!=null?w.green/cA:1,DA=j!=null?w.f_dc_2*Qt+.5:X!=null?w.blue/eA:1;if(A(gA,w.x,w.y,w.z,oA,sA,EA,iA,pA,yA,VA,fA,mA,wA,DA),t&&o){if(o)for(const[K,NA]of r.entries())o[K]=w[NA];if(B)for(const[K,NA]of n.entries())B[K]=w[NA];if(g)for(const[K,NA]of I.entries())g[K]=w[NA];t(gA,o,B,g)}}};this.parseData(h)}injectRgba(A){let t=0;const e=this.data;if(e==null)throw new Error("No parsed data");if(A.length!==this.numSplats*4)throw new Error("Invalid RGBA array length");for(const i in this.elements){const a=this.elements[i],{count:r,properties:n}=a,I=[];let o=0;const B=i==="vertex";if(B){for(const g of["opacity","f_dc_0","f_dc_1","f_dc_2"])if(!n[g]||n[g].type!=="float")throw new Error(`Can't injectRgba due to property: ${g}`)}for(const[g,Q]of Object.entries(n))if(Q.isList)I.push(()=>{const c=Ct[Q.countType](e,t,this.littleEndian);t+=KA[Q.countType],t+=c*KA[Q.type]});else{if(B)if(g==="f_dc_0"||g==="f_dc_1"||g==="f_dc_2"){const c=Number.parseInt(g.slice(5));I.push(()=>{const E=(A[o+c]/255-.5)/Qt;Qe[Q.type](e,t,this.littleEndian,E)})}else g==="opacity"&&I.push(()=>{const c=Math.max(-100,Math.min(100,-Math.log(1/(A[o+3]/255)-1)));Qe[Q.type](e,t,this.littleEndian,c)});I.push(()=>{t+=KA[Q.type]})}for(let g=0;g<r;g++){for(const Q of I)Q();B&&(o+=4)}}}};As.defaultPointScale=.001;let fa=As;const Qt=.28209479177387814,Ct={char:(s,A,t)=>s.getInt8(A),uchar:(s,A,t)=>s.getUint8(A),short:(s,A,t)=>s.getInt16(A,t),ushort:(s,A,t)=>s.getUint16(A,t),int:(s,A,t)=>s.getInt32(A,t),uint:(s,A,t)=>s.getUint32(A,t),float:(s,A,t)=>s.getFloat32(A,t),double:(s,A,t)=>s.getFloat64(A,t)},Qe={char:(s,A,t,e)=>{s.setInt8(A,e)},uchar:(s,A,t,e)=>{s.setUint8(A,e)},short:(s,A,t,e)=>{s.setInt16(A,e,t)},ushort:(s,A,t,e)=>{s.setUint16(A,e,t)},int:(s,A,t,e)=>{s.setInt32(A,e,t)},uint:(s,A,t,e)=>{s.setUint32(A,e,t)},float:(s,A,t,e)=>{s.setFloat32(A,e,t)},double:(s,A,t,e)=>{s.setFloat64(A,e,t)}},KA={char:1,uchar:1,short:2,ushort:2,int:4,uint:4,float:4,double:8},ct={char:127,uchar:255,short:32767,ushort:65535,int:2147483647,uint:4294967295,float:1,double:1},ma={0:0,9:1,24:2,45:3},wa={0:0,1:9,2:24,3:45};function Ce(s){let A=0;for(;s[`f_rest_${A}`];)A+=1;const t=ma[A];if(t==null)throw new Error(`Unsupported number of SH coefficients: ${A}`);return t}const ts=`(function() {
  "use strict";
  let wasm;
  const cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", { ignoreBOM: true, fatal: true }) : { decode: () => {
    throw Error("TextDecoder not available");
  } };
  if (typeof TextDecoder !== "undefined") {
    cachedTextDecoder.decode();
  }
  let cachedUint8ArrayMemory0 = null;
  function getUint8ArrayMemory0() {
    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
      cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8ArrayMemory0;
  }
  function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
  }
  function sort_splats(num_splats, readback, ordering) {
    const ret = wasm.sort_splats(num_splats, readback, ordering);
    return ret >>> 0;
  }
  function raycast_splats(origin_x, origin_y, origin_z, dir_x, dir_y, dir_z, near, far, num_splats, packed_splats, raycast_ellipsoid) {
    const ret = wasm.raycast_splats(origin_x, origin_y, origin_z, dir_x, dir_y, dir_z, near, far, num_splats, packed_splats, raycast_ellipsoid);
    return ret;
  }
  async function __wbg_load(module, imports) {
    if (typeof Response === "function" && module instanceof Response) {
      if (typeof WebAssembly.instantiateStreaming === "function") {
        try {
          return await WebAssembly.instantiateStreaming(module, imports);
        } catch (e) {
          if (module.headers.get("Content-Type") != "application/wasm") {
            console.warn("\`WebAssembly.instantiateStreaming\` failed because your server does not serve Wasm with \`application/wasm\` MIME type. Falling back to \`WebAssembly.instantiate\` which is slower. Original error:\\n", e);
          } else {
            throw e;
          }
        }
      }
      const bytes = await module.arrayBuffer();
      return await WebAssembly.instantiate(bytes, imports);
    } else {
      const instance = await WebAssembly.instantiate(module, imports);
      if (instance instanceof WebAssembly.Instance) {
        return { instance, module };
      } else {
        return instance;
      }
    }
  }
  function __wbg_get_imports() {
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbg_buffer_609cc3eee51ed158 = function(arg0) {
      const ret = arg0.buffer;
      return ret;
    };
    imports.wbg.__wbg_length_3b4f022188ae8db6 = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_length_6ca527665d89694d = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_length_8cfd2c6409af88ad = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_new_9fee97a409b32b68 = function(arg0) {
      const ret = new Uint16Array(arg0);
      return ret;
    };
    imports.wbg.__wbg_new_e3b321dcfef89fc7 = function(arg0) {
      const ret = new Uint32Array(arg0);
      return ret;
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354 = function(arg0, arg1, arg2) {
      const ret = new Float32Array(arg0, arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212 = function(arg0, arg1, arg2) {
      const ret = new Uint32Array(arg0, arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_newwithlength_5a5efe313cfd59f1 = function(arg0) {
      const ret = new Float32Array(arg0 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_set_10bad9bee0e9c58b = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_set_d23661d19148b229 = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_set_f4f1f0daa30696fc = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_subarray_3aaeec89bb2544f0 = function(arg0, arg1, arg2) {
      const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_subarray_769e1e0f81bb259b = function(arg0, arg1, arg2) {
      const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbindgen_init_externref_table = function() {
      const table = wasm.__wbindgen_export_0;
      const offset = table.grow(4);
      table.set(0, void 0);
      table.set(offset + 0, void 0);
      table.set(offset + 1, null);
      table.set(offset + 2, true);
      table.set(offset + 3, false);
    };
    imports.wbg.__wbindgen_memory = function() {
      const ret = wasm.memory;
      return ret;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
      throw new Error(getStringFromWasm0(arg0, arg1));
    };
    return imports;
  }
  function __wbg_finalize_init(instance, module) {
    wasm = instance.exports;
    __wbg_init.__wbindgen_wasm_module = module;
    cachedUint8ArrayMemory0 = null;
    wasm.__wbindgen_start();
    return wasm;
  }
  async function __wbg_init(module_or_path) {
    if (wasm !== void 0) return wasm;
    if (typeof module_or_path !== "undefined") {
      if (Object.getPrototypeOf(module_or_path) === Object.prototype) {
        ({ module_or_path } = module_or_path);
      } else {
        console.warn("using deprecated parameters for the initialization function; pass a single object instead");
      }
    }
    if (typeof module_or_path === "undefined") {
      module_or_path = new URL("data:application/wasm;base64,", self.location.href);
    }
    const imports = __wbg_get_imports();
    if (typeof module_or_path === "string" || typeof Request === "function" && module_or_path instanceof Request || typeof URL === "function" && module_or_path instanceof URL) {
      module_or_path = fetch(module_or_path);
    }
    const { instance, module } = await __wbg_load(await module_or_path, imports);
    return __wbg_finalize_init(instance, module);
  }
  var u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;
  var fleb = new u8([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    /* unused */
    0,
    0,
    /* impossible */
    0
  ]);
  var fdeb = new u8([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    /* unused */
    0,
    0
  ]);
  var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  var freb = function(eb, start) {
    var b = new u16(31);
    for (var i2 = 0; i2 < 31; ++i2) {
      b[i2] = start += 1 << eb[i2 - 1];
    }
    var r = new i32(b[30]);
    for (var i2 = 1; i2 < 30; ++i2) {
      for (var j = b[i2]; j < b[i2 + 1]; ++j) {
        r[j] = j - b[i2] << 5 | i2;
      }
    }
    return { b, r };
  };
  var _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;
  fl[28] = 258, revfl[258] = 28;
  var _b = freb(fdeb, 0), fd = _b.b;
  var rev = new u16(32768);
  for (var i = 0; i < 32768; ++i) {
    var x = (i & 43690) >> 1 | (i & 21845) << 1;
    x = (x & 52428) >> 2 | (x & 13107) << 2;
    x = (x & 61680) >> 4 | (x & 3855) << 4;
    rev[i] = ((x & 65280) >> 8 | (x & 255) << 8) >> 1;
  }
  var hMap = function(cd, mb, r) {
    var s = cd.length;
    var i2 = 0;
    var l = new u16(mb);
    for (; i2 < s; ++i2) {
      if (cd[i2])
        ++l[cd[i2] - 1];
    }
    var le = new u16(mb);
    for (i2 = 1; i2 < mb; ++i2) {
      le[i2] = le[i2 - 1] + l[i2 - 1] << 1;
    }
    var co;
    if (r) {
      co = new u16(1 << mb);
      var rvb = 15 - mb;
      for (i2 = 0; i2 < s; ++i2) {
        if (cd[i2]) {
          var sv = i2 << 4 | cd[i2];
          var r_1 = mb - cd[i2];
          var v = le[cd[i2] - 1]++ << r_1;
          for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
            co[rev[v] >> rvb] = sv;
          }
        }
      }
    } else {
      co = new u16(s);
      for (i2 = 0; i2 < s; ++i2) {
        if (cd[i2]) {
          co[i2] = rev[le[cd[i2] - 1]++] >> 15 - cd[i2];
        }
      }
    }
    return co;
  };
  var flt = new u8(288);
  for (var i = 0; i < 144; ++i)
    flt[i] = 8;
  for (var i = 144; i < 256; ++i)
    flt[i] = 9;
  for (var i = 256; i < 280; ++i)
    flt[i] = 7;
  for (var i = 280; i < 288; ++i)
    flt[i] = 8;
  var fdt = new u8(32);
  for (var i = 0; i < 32; ++i)
    fdt[i] = 5;
  var flrm = /* @__PURE__ */ hMap(flt, 9, 1);
  var fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);
  var max = function(a) {
    var m = a[0];
    for (var i2 = 1; i2 < a.length; ++i2) {
      if (a[i2] > m)
        m = a[i2];
    }
    return m;
  };
  var bits = function(d, p, m) {
    var o = p / 8 | 0;
    return (d[o] | d[o + 1] << 8) >> (p & 7) & m;
  };
  var bits16 = function(d, p) {
    var o = p / 8 | 0;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);
  };
  var shft = function(p) {
    return (p + 7) / 8 | 0;
  };
  var slc = function(v, s, e) {
    if (s == null || s < 0)
      s = 0;
    if (e == null || e > v.length)
      e = v.length;
    return new u8(v.subarray(s, e));
  };
  var ec = [
    "unexpected EOF",
    "invalid block type",
    "invalid length/literal",
    "invalid distance",
    "stream finished",
    "no stream handler",
    ,
    "no callback",
    "invalid UTF-8 data",
    "extra field too long",
    "date not in range 1980-2099",
    "filename too long",
    "stream finishing",
    "invalid zip data"
    // determined by unknown compression method
  ];
  var err = function(ind, msg, nt) {
    var e = new Error(msg || ec[ind]);
    e.code = ind;
    if (Error.captureStackTrace)
      Error.captureStackTrace(e, err);
    if (!nt)
      throw e;
    return e;
  };
  var inflt = function(dat, st, buf, dict) {
    var sl = dat.length, dl = 0;
    if (!sl || st.f && !st.l)
      return buf || new u8(0);
    var noBuf = !buf;
    var resize = noBuf || st.i != 2;
    var noSt = st.i;
    if (noBuf)
      buf = new u8(sl * 3);
    var cbuf = function(l2) {
      var bl = buf.length;
      if (l2 > bl) {
        var nbuf = new u8(Math.max(bl * 2, l2));
        nbuf.set(buf);
        buf = nbuf;
      }
    };
    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    var tbts = sl * 8;
    do {
      if (!lm) {
        final = bits(dat, pos, 1);
        var type = bits(dat, pos + 1, 3);
        pos += 3;
        if (!type) {
          var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
          if (t > sl) {
            if (noSt)
              err(0);
            break;
          }
          if (resize)
            cbuf(bt + l);
          buf.set(dat.subarray(s, t), bt);
          st.b = bt += l, st.p = pos = t * 8, st.f = final;
          continue;
        } else if (type == 1)
          lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
        else if (type == 2) {
          var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
          var tl = hLit + bits(dat, pos + 5, 31) + 1;
          pos += 14;
          var ldt = new u8(tl);
          var clt = new u8(19);
          for (var i2 = 0; i2 < hcLen; ++i2) {
            clt[clim[i2]] = bits(dat, pos + i2 * 3, 7);
          }
          pos += hcLen * 3;
          var clb = max(clt), clbmsk = (1 << clb) - 1;
          var clm = hMap(clt, clb, 1);
          for (var i2 = 0; i2 < tl; ) {
            var r = clm[bits(dat, pos, clbmsk)];
            pos += r & 15;
            var s = r >> 4;
            if (s < 16) {
              ldt[i2++] = s;
            } else {
              var c = 0, n = 0;
              if (s == 16)
                n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i2 - 1];
              else if (s == 17)
                n = 3 + bits(dat, pos, 7), pos += 3;
              else if (s == 18)
                n = 11 + bits(dat, pos, 127), pos += 7;
              while (n--)
                ldt[i2++] = c;
            }
          }
          var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
          lbt = max(lt);
          dbt = max(dt);
          lm = hMap(lt, lbt, 1);
          dm = hMap(dt, dbt, 1);
        } else
          err(1);
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
      }
      if (resize)
        cbuf(bt + 131072);
      var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
      var lpos = pos;
      for (; ; lpos = pos) {
        var c = lm[bits16(dat, pos) & lms], sym = c >> 4;
        pos += c & 15;
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
        if (!c)
          err(2);
        if (sym < 256)
          buf[bt++] = sym;
        else if (sym == 256) {
          lpos = pos, lm = null;
          break;
        } else {
          var add2 = sym - 254;
          if (sym > 264) {
            var i2 = sym - 257, b = fleb[i2];
            add2 = bits(dat, pos, (1 << b) - 1) + fl[i2];
            pos += b;
          }
          var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;
          if (!d)
            err(3);
          pos += d & 15;
          var dt = fd[dsym];
          if (dsym > 3) {
            var b = fdeb[dsym];
            dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
          }
          if (pos > tbts) {
            if (noSt)
              err(0);
            break;
          }
          if (resize)
            cbuf(bt + 131072);
          var end = bt + add2;
          if (bt < dt) {
            var shift = dl - dt, dend = Math.min(dt, end);
            if (shift + bt < 0)
              err(3);
            for (; bt < dend; ++bt)
              buf[bt] = dict[shift + bt];
          }
          for (; bt < end; ++bt)
            buf[bt] = buf[bt - dt];
        }
      }
      st.l = lm, st.p = lpos, st.b = bt, st.f = final;
      if (lm)
        final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);
    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);
  };
  var et = /* @__PURE__ */ new u8(0);
  var gzs = function(d) {
    if (d[0] != 31 || d[1] != 139 || d[2] != 8)
      err(6, "invalid gzip data");
    var flg = d[3];
    var st = 10;
    if (flg & 4)
      st += (d[10] | d[11] << 8) + 2;
    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])
      ;
    return st + (flg & 2);
  };
  var Inflate = /* @__PURE__ */ function() {
    function Inflate2(opts, cb) {
      if (typeof opts == "function")
        cb = opts, opts = {};
      this.ondata = cb;
      var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);
      this.s = { i: 0, b: dict ? dict.length : 0 };
      this.o = new u8(32768);
      this.p = new u8(0);
      if (dict)
        this.o.set(dict);
    }
    Inflate2.prototype.e = function(c) {
      if (!this.ondata)
        err(5);
      if (this.d)
        err(4);
      if (!this.p.length)
        this.p = c;
      else if (c.length) {
        var n = new u8(this.p.length + c.length);
        n.set(this.p), n.set(c, this.p.length), this.p = n;
      }
    };
    Inflate2.prototype.c = function(final) {
      this.s.i = +(this.d = final || false);
      var bts = this.s.b;
      var dt = inflt(this.p, this.s, this.o);
      this.ondata(slc(dt, bts, this.s.b), this.d);
      this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
      this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;
    };
    Inflate2.prototype.push = function(chunk, final) {
      this.e(chunk), this.c(final);
    };
    return Inflate2;
  }();
  var Gunzip = /* @__PURE__ */ function() {
    function Gunzip2(opts, cb) {
      this.v = 1;
      this.r = 0;
      Inflate.call(this, opts, cb);
    }
    Gunzip2.prototype.push = function(chunk, final) {
      Inflate.prototype.e.call(this, chunk);
      this.r += chunk.length;
      if (this.v) {
        var p = this.p.subarray(this.v - 1);
        var s = p.length > 3 ? gzs(p) : 4;
        if (s > p.length) {
          if (!final)
            return;
        } else if (this.v > 1 && this.onmember) {
          this.onmember(this.r - p.length);
        }
        this.p = p.subarray(s), this.v = 0;
      }
      Inflate.prototype.c.call(this, final);
      if (this.s.f && !this.s.l && !final) {
        this.v = shft(this.s.p) + 9;
        this.s = { i: 0 };
        this.o = new u8(0);
        this.push(new u8(0), final);
      }
    };
    return Gunzip2;
  }();
  var td = typeof TextDecoder != "undefined" && /* @__PURE__ */ new TextDecoder();
  var tds = 0;
  try {
    td.decode(et, { stream: true });
    tds = 1;
  } catch (e) {
  }
  /**
   * @license
   * Copyright 2010-2024 Three.js Authors
   * SPDX-License-Identifier: MIT
   */
  const REVISION = "172";
  const FrontSide = 0;
  const BackSide = 1;
  const NormalBlending = 1;
  const AddEquation = 100;
  const SrcAlphaFactor = 204;
  const OneMinusSrcAlphaFactor = 205;
  const LessEqualDepth = 3;
  const MultiplyOperation = 0;
  const UVMapping = 300;
  const RepeatWrapping = 1e3;
  const ClampToEdgeWrapping = 1001;
  const MirroredRepeatWrapping = 1002;
  const NearestFilter = 1003;
  const LinearFilter = 1006;
  const LinearMipmapLinearFilter = 1008;
  const UnsignedByteType = 1009;
  const UnsignedIntType = 1014;
  const FloatType = 1015;
  const RGBAFormat = 1023;
  const RGIntegerFormat = 1031;
  const RGBAIntegerFormat = 1033;
  const NoColorSpace = "";
  const SRGBColorSpace = "srgb";
  const LinearSRGBColorSpace = "srgb-linear";
  const LinearTransfer = "linear";
  const SRGBTransfer = "srgb";
  const KeepStencilOp = 7680;
  const AlwaysStencilFunc = 519;
  const StaticDrawUsage = 35044;
  const GLSL3 = "300 es";
  const WebGLCoordinateSystem = 2e3;
  const WebGPUCoordinateSystem = 2001;
  class EventDispatcher {
    addEventListener(type, listener) {
      if (this._listeners === void 0) this._listeners = {};
      const listeners = this._listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
    hasEventListener(type, listener) {
      if (this._listeners === void 0) return false;
      const listeners = this._listeners;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
      if (this._listeners === void 0) return;
      const listeners = this._listeners;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
    dispatchEvent(event) {
      if (this._listeners === void 0) return;
      const listeners = this._listeners;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        event.target = this;
        const array = listenerArray.slice(0);
        for (let i2 = 0, l = array.length; i2 < l; i2++) {
          array[i2].call(this, event);
        }
        event.target = null;
      }
    }
  }
  const _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
  function generateUUID() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    return uuid.toLowerCase();
  }
  function clamp(value, min, max2) {
    return Math.max(min, Math.min(max2, value));
  }
  function euclideanModulo(n, m) {
    return (n % m + m) % m;
  }
  function lerp(x2, y, t) {
    return (1 - t) * x2 + t * y;
  }
  function denormalize(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return value / 4294967295;
      case Uint16Array:
        return value / 65535;
      case Uint8Array:
        return value / 255;
      case Int32Array:
        return Math.max(value / 2147483647, -1);
      case Int16Array:
        return Math.max(value / 32767, -1);
      case Int8Array:
        return Math.max(value / 127, -1);
      default:
        throw new Error("Invalid component type.");
    }
  }
  function normalize$1(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return Math.round(value * 4294967295);
      case Uint16Array:
        return Math.round(value * 65535);
      case Uint8Array:
        return Math.round(value * 255);
      case Int32Array:
        return Math.round(value * 2147483647);
      case Int16Array:
        return Math.round(value * 32767);
      case Int8Array:
        return Math.round(value * 127);
      default:
        throw new Error("Invalid component type.");
    }
  }
  class Vector2 {
    constructor(x2 = 0, y = 0) {
      Vector2.prototype.isVector2 = true;
      this.x = x2;
      this.y = y;
    }
    get width() {
      return this.x;
    }
    set width(value) {
      this.x = value;
    }
    get height() {
      return this.y;
    }
    set height(value) {
      this.y = value;
    }
    set(x2, y) {
      this.x = x2;
      this.y = y;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m) {
      const x2 = this.x, y = this.y;
      const e = m.elements;
      this.x = e[0] * x2 + e[3] * y + e[6];
      this.y = e[1] * x2 + e[4] * y + e[7];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      return this;
    }
    clamp(min, max2) {
      this.x = clamp(this.x, min.x, max2.x);
      this.y = clamp(this.y, min.y, max2.y);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      return this;
    }
    clampLength(min, max2) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max2));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y;
    }
    cross(v) {
      return this.x * v.y - this.y * v.x;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    angle() {
      const angle = Math.atan2(-this.y, -this.x) + Math.PI;
      return angle;
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y;
      return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      return this;
    }
    rotateAround(center, angle) {
      const c = Math.cos(angle), s = Math.sin(angle);
      const x2 = this.x - center.x;
      const y = this.y - center.y;
      this.x = x2 * c - y * s + center.x;
      this.y = x2 * s + y * c + center.y;
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
    }
  }
  class Matrix3 {
    constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      Matrix3.prototype.isMatrix3 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
      }
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      const te = this.elements;
      te[0] = n11;
      te[1] = n21;
      te[2] = n31;
      te[3] = n12;
      te[4] = n22;
      te[5] = n32;
      te[6] = n13;
      te[7] = n23;
      te[8] = n33;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      );
      return this;
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
    setFromMatrix4(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[4],
        me[8],
        me[1],
        me[5],
        me[9],
        me[2],
        me[6],
        me[10]
      );
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[3], a13 = ae[6];
      const a21 = ae[1], a22 = ae[4], a23 = ae[7];
      const a31 = ae[2], a32 = ae[5], a33 = ae[8];
      const b11 = be[0], b12 = be[3], b13 = be[6];
      const b21 = be[1], b22 = be[4], b23 = be[7];
      const b31 = be[2], b32 = be[5], b33 = be[8];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[3] *= s;
      te[6] *= s;
      te[1] *= s;
      te[4] *= s;
      te[7] *= s;
      te[2] *= s;
      te[5] *= s;
      te[8] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i2 = te[8];
      return a * e * i2 - a * f * h - b * d * i2 + b * f * g + c * d * h - c * e * g;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n31 * n23 - n33 * n21) * detInv;
      te[2] = (n32 * n21 - n31 * n22) * detInv;
      te[3] = t12 * detInv;
      te[4] = (n33 * n11 - n31 * n13) * detInv;
      te[5] = (n31 * n12 - n32 * n11) * detInv;
      te[6] = t13 * detInv;
      te[7] = (n21 * n13 - n23 * n11) * detInv;
      te[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
    transpose() {
      let tmp;
      const m = this.elements;
      tmp = m[1];
      m[1] = m[3];
      m[3] = tmp;
      tmp = m[2];
      m[2] = m[6];
      m[6] = tmp;
      tmp = m[5];
      m[5] = m[7];
      m[7] = tmp;
      return this;
    }
    getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).invert().transpose();
    }
    transposeIntoArray(r) {
      const m = this.elements;
      r[0] = m[0];
      r[1] = m[3];
      r[2] = m[6];
      r[3] = m[1];
      r[4] = m[4];
      r[5] = m[7];
      r[6] = m[2];
      r[7] = m[5];
      r[8] = m[8];
      return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      const c = Math.cos(rotation);
      const s = Math.sin(rotation);
      this.set(
        sx * c,
        sx * s,
        -sx * (c * cx + s * cy) + cx + tx,
        -sy * s,
        sy * c,
        -sy * (-s * cx + c * cy) + cy + ty,
        0,
        0,
        1
      );
      return this;
    }
    //
    scale(sx, sy) {
      this.premultiply(_m3.makeScale(sx, sy));
      return this;
    }
    rotate(theta) {
      this.premultiply(_m3.makeRotation(-theta));
      return this;
    }
    translate(tx, ty) {
      this.premultiply(_m3.makeTranslation(tx, ty));
      return this;
    }
    // for 2D Transforms
    makeTranslation(x2, y) {
      if (x2.isVector2) {
        this.set(
          1,
          0,
          x2.x,
          0,
          1,
          x2.y,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          x2,
          0,
          1,
          y,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotation(theta) {
      const c = Math.cos(theta);
      const s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        s,
        c,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x2, y) {
      this.set(
        x2,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        1
      );
      return this;
    }
    //
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i2 = 0; i2 < 9; i2++) {
        if (te[i2] !== me[i2]) return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 9; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      return array;
    }
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
  }
  const _m3 = /* @__PURE__ */ new Matrix3();
  function arrayNeedsUint32(array) {
    for (let i2 = array.length - 1; i2 >= 0; --i2) {
      if (array[i2] >= 65535) return true;
    }
    return false;
  }
  function createElementNS(name) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name);
  }
  const LINEAR_REC709_TO_XYZ = /* @__PURE__ */ new Matrix3().set(
    0.4123908,
    0.3575843,
    0.1804808,
    0.212639,
    0.7151687,
    0.0721923,
    0.0193308,
    0.1191948,
    0.9505322
  );
  const XYZ_TO_LINEAR_REC709 = /* @__PURE__ */ new Matrix3().set(
    3.2409699,
    -1.5373832,
    -0.4986108,
    -0.9692436,
    1.8759675,
    0.0415551,
    0.0556301,
    -0.203977,
    1.0569715
  );
  function createColorManagement() {
    const ColorManagement2 = {
      enabled: true,
      workingColorSpace: LinearSRGBColorSpace,
      /**
       * Implementations of supported color spaces.
       *
       * Required:
       *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
       *	- whitePoint: reference white [ x y ]
       *	- transfer: transfer function (pre-defined)
       *	- toXYZ: Matrix3 RGB to XYZ transform
       *	- fromXYZ: Matrix3 XYZ to RGB transform
       *	- luminanceCoefficients: RGB luminance coefficients
       *
       * Optional:
       *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
       *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
       *
       * Reference:
       * - https://www.russellcottrell.com/photo/matrixCalculator.htm
       */
      spaces: {},
      convert: function(color, sourceColorSpace, targetColorSpace) {
        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
          return color;
        }
        if (this.spaces[sourceColorSpace].transfer === SRGBTransfer) {
          color.r = SRGBToLinear(color.r);
          color.g = SRGBToLinear(color.g);
          color.b = SRGBToLinear(color.b);
        }
        if (this.spaces[sourceColorSpace].primaries !== this.spaces[targetColorSpace].primaries) {
          color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);
          color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);
        }
        if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {
          color.r = LinearToSRGB(color.r);
          color.g = LinearToSRGB(color.g);
          color.b = LinearToSRGB(color.b);
        }
        return color;
      },
      fromWorkingColorSpace: function(color, targetColorSpace) {
        return this.convert(color, this.workingColorSpace, targetColorSpace);
      },
      toWorkingColorSpace: function(color, sourceColorSpace) {
        return this.convert(color, sourceColorSpace, this.workingColorSpace);
      },
      getPrimaries: function(colorSpace) {
        return this.spaces[colorSpace].primaries;
      },
      getTransfer: function(colorSpace) {
        if (colorSpace === NoColorSpace) return LinearTransfer;
        return this.spaces[colorSpace].transfer;
      },
      getLuminanceCoefficients: function(target, colorSpace = this.workingColorSpace) {
        return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);
      },
      define: function(colorSpaces) {
        Object.assign(this.spaces, colorSpaces);
      },
      // Internal APIs
      _getMatrix: function(targetMatrix, sourceColorSpace, targetColorSpace) {
        return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);
      },
      _getDrawingBufferColorSpace: function(colorSpace) {
        return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;
      },
      _getUnpackColorSpace: function(colorSpace = this.workingColorSpace) {
        return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;
      }
    };
    const REC709_PRIMARIES = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];
    const REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];
    const D65 = [0.3127, 0.329];
    ColorManagement2.define({
      [LinearSRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: LinearTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      },
      [SRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: SRGBTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      }
    });
    return ColorManagement2;
  }
  const ColorManagement = /* @__PURE__ */ createColorManagement();
  function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c) {
    return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
  }
  let _canvas;
  class ImageUtils {
    static getDataURL(image) {
      if (/^data:/i.test(image.src)) {
        return image.src;
      }
      if (typeof HTMLCanvasElement === "undefined") {
        return image.src;
      }
      let canvas;
      if (image instanceof HTMLCanvasElement) {
        canvas = image;
      } else {
        if (_canvas === void 0) _canvas = createElementNS("canvas");
        _canvas.width = image.width;
        _canvas.height = image.height;
        const context = _canvas.getContext("2d");
        if (image instanceof ImageData) {
          context.putImageData(image, 0, 0);
        } else {
          context.drawImage(image, 0, 0, image.width, image.height);
        }
        canvas = _canvas;
      }
      if (canvas.width > 2048 || canvas.height > 2048) {
        console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
        return canvas.toDataURL("image/jpeg", 0.6);
      } else {
        return canvas.toDataURL("image/png");
      }
    }
    static sRGBToLinear(image) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
        const canvas = createElementNS("canvas");
        canvas.width = image.width;
        canvas.height = image.height;
        const context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, image.width, image.height);
        const imageData = context.getImageData(0, 0, image.width, image.height);
        const data = imageData.data;
        for (let i2 = 0; i2 < data.length; i2++) {
          data[i2] = SRGBToLinear(data[i2] / 255) * 255;
        }
        context.putImageData(imageData, 0, 0);
        return canvas;
      } else if (image.data) {
        const data = image.data.slice(0);
        for (let i2 = 0; i2 < data.length; i2++) {
          if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
            data[i2] = Math.floor(SRGBToLinear(data[i2] / 255) * 255);
          } else {
            data[i2] = SRGBToLinear(data[i2]);
          }
        }
        return {
          data,
          width: image.width,
          height: image.height
        };
      } else {
        console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
        return image;
      }
    }
  }
  let _sourceId = 0;
  class Source {
    constructor(data = null) {
      this.isSource = true;
      Object.defineProperty(this, "id", { value: _sourceId++ });
      this.uuid = generateUUID();
      this.data = data;
      this.dataReady = true;
      this.version = 0;
    }
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.images[this.uuid] !== void 0) {
        return meta.images[this.uuid];
      }
      const output = {
        uuid: this.uuid,
        url: ""
      };
      const data = this.data;
      if (data !== null) {
        let url;
        if (Array.isArray(data)) {
          url = [];
          for (let i2 = 0, l = data.length; i2 < l; i2++) {
            if (data[i2].isDataTexture) {
              url.push(serializeImage(data[i2].image));
            } else {
              url.push(serializeImage(data[i2]));
            }
          }
        } else {
          url = serializeImage(data);
        }
        output.url = url;
      }
      if (!isRootObject) {
        meta.images[this.uuid] = output;
      }
      return output;
    }
  }
  function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return ImageUtils.getDataURL(image);
    } else {
      if (image.data) {
        return {
          data: Array.from(image.data),
          width: image.width,
          height: image.height,
          type: image.data.constructor.name
        };
      } else {
        console.warn("THREE.Texture: Unable to serialize Texture.");
        return {};
      }
    }
  }
  let _textureId = 0;
  class Texture extends EventDispatcher {
    constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
      super();
      this.isTexture = true;
      Object.defineProperty(this, "id", { value: _textureId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.source = new Source(image);
      this.mipmaps = [];
      this.mapping = mapping;
      this.channel = 0;
      this.wrapS = wrapS;
      this.wrapT = wrapT;
      this.magFilter = magFilter;
      this.minFilter = minFilter;
      this.anisotropy = anisotropy;
      this.format = format;
      this.internalFormat = null;
      this.type = type;
      this.offset = new Vector2(0, 0);
      this.repeat = new Vector2(1, 1);
      this.center = new Vector2(0, 0);
      this.rotation = 0;
      this.matrixAutoUpdate = true;
      this.matrix = new Matrix3();
      this.generateMipmaps = true;
      this.premultiplyAlpha = false;
      this.flipY = true;
      this.unpackAlignment = 4;
      this.colorSpace = colorSpace;
      this.userData = {};
      this.version = 0;
      this.onUpdate = null;
      this.renderTarget = null;
      this.isRenderTargetTexture = false;
      this.pmremVersion = 0;
    }
    get image() {
      return this.source.data;
    }
    set image(value = null) {
      this.source.data = value;
    }
    updateMatrix() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.source = source.source;
      this.mipmaps = source.mipmaps.slice(0);
      this.mapping = source.mapping;
      this.channel = source.channel;
      this.wrapS = source.wrapS;
      this.wrapT = source.wrapT;
      this.magFilter = source.magFilter;
      this.minFilter = source.minFilter;
      this.anisotropy = source.anisotropy;
      this.format = source.format;
      this.internalFormat = source.internalFormat;
      this.type = source.type;
      this.offset.copy(source.offset);
      this.repeat.copy(source.repeat);
      this.center.copy(source.center);
      this.rotation = source.rotation;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrix.copy(source.matrix);
      this.generateMipmaps = source.generateMipmaps;
      this.premultiplyAlpha = source.premultiplyAlpha;
      this.flipY = source.flipY;
      this.unpackAlignment = source.unpackAlignment;
      this.colorSpace = source.colorSpace;
      this.renderTarget = source.renderTarget;
      this.isRenderTargetTexture = source.isRenderTargetTexture;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      this.needsUpdate = true;
      return this;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.textures[this.uuid] !== void 0) {
        return meta.textures[this.uuid];
      }
      const output = {
        metadata: {
          version: 4.6,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        image: this.source.toJSON(meta).uuid,
        mapping: this.mapping,
        channel: this.channel,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        internalFormat: this.internalFormat,
        type: this.type,
        colorSpace: this.colorSpace,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        generateMipmaps: this.generateMipmaps,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      if (Object.keys(this.userData).length > 0) output.userData = this.userData;
      if (!isRootObject) {
        meta.textures[this.uuid] = output;
      }
      return output;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    transformUv(uv) {
      if (this.mapping !== UVMapping) return uv;
      uv.applyMatrix3(this.matrix);
      if (uv.x < 0 || uv.x > 1) {
        switch (this.wrapS) {
          case RepeatWrapping:
            uv.x = uv.x - Math.floor(uv.x);
            break;
          case ClampToEdgeWrapping:
            uv.x = uv.x < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.x) % 2) === 1) {
              uv.x = Math.ceil(uv.x) - uv.x;
            } else {
              uv.x = uv.x - Math.floor(uv.x);
            }
            break;
        }
      }
      if (uv.y < 0 || uv.y > 1) {
        switch (this.wrapT) {
          case RepeatWrapping:
            uv.y = uv.y - Math.floor(uv.y);
            break;
          case ClampToEdgeWrapping:
            uv.y = uv.y < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.y) % 2) === 1) {
              uv.y = Math.ceil(uv.y) - uv.y;
            } else {
              uv.y = uv.y - Math.floor(uv.y);
            }
            break;
        }
      }
      if (this.flipY) {
        uv.y = 1 - uv.y;
      }
      return uv;
    }
    set needsUpdate(value) {
      if (value === true) {
        this.version++;
        this.source.needsUpdate = true;
      }
    }
    set needsPMREMUpdate(value) {
      if (value === true) {
        this.pmremVersion++;
      }
    }
  }
  Texture.DEFAULT_IMAGE = null;
  Texture.DEFAULT_MAPPING = UVMapping;
  Texture.DEFAULT_ANISOTROPY = 1;
  class Vector4 {
    constructor(x2 = 0, y = 0, z = 0, w = 1) {
      Vector4.prototype.isVector4 = true;
      this.x = x2;
      this.y = y;
      this.z = z;
      this.w = w;
    }
    get width() {
      return this.z;
    }
    set width(value) {
      this.z = value;
    }
    get height() {
      return this.w;
    }
    set height(value) {
      this.w = value;
    }
    set(x2, y, z, w) {
      this.x = x2;
      this.y = y;
      this.z = z;
      this.w = w;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      this.w = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setW(w) {
      this.w = w;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        case 3:
          this.w = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      this.w = v.w !== void 0 ? v.w : 1;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      this.w += v.w;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      this.w += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      this.w = a.w + b.w;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      this.w += v.w * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      this.w -= v.w;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      this.w -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      this.w = a.w - b.w;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      this.w *= v.w;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      this.w *= scalar;
      return this;
    }
    applyMatrix4(m) {
      const x2 = this.x, y = this.y, z = this.z, w = this.w;
      const e = m.elements;
      this.x = e[0] * x2 + e[4] * y + e[8] * z + e[12] * w;
      this.y = e[1] * x2 + e[5] * y + e[9] * z + e[13] * w;
      this.z = e[2] * x2 + e[6] * y + e[10] * z + e[14] * w;
      this.w = e[3] * x2 + e[7] * y + e[11] * z + e[15] * w;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      this.w /= v.w;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q) {
      this.w = 2 * Math.acos(q.w);
      const s = Math.sqrt(1 - q.w * q.w);
      if (s < 1e-4) {
        this.x = 1;
        this.y = 0;
        this.z = 0;
      } else {
        this.x = q.x / s;
        this.y = q.y / s;
        this.z = q.z / s;
      }
      return this;
    }
    setAxisAngleFromRotationMatrix(m) {
      let angle, x2, y, z;
      const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
          this.set(1, 0, 0, 0);
          return this;
        }
        angle = Math.PI;
        const xx = (m11 + 1) / 2;
        const yy = (m22 + 1) / 2;
        const zz = (m33 + 1) / 2;
        const xy = (m12 + m21) / 4;
        const xz = (m13 + m31) / 4;
        const yz = (m23 + m32) / 4;
        if (xx > yy && xx > zz) {
          if (xx < epsilon) {
            x2 = 0;
            y = 0.707106781;
            z = 0.707106781;
          } else {
            x2 = Math.sqrt(xx);
            y = xy / x2;
            z = xz / x2;
          }
        } else if (yy > zz) {
          if (yy < epsilon) {
            x2 = 0.707106781;
            y = 0;
            z = 0.707106781;
          } else {
            y = Math.sqrt(yy);
            x2 = xy / y;
            z = yz / y;
          }
        } else {
          if (zz < epsilon) {
            x2 = 0.707106781;
            y = 0.707106781;
            z = 0;
          } else {
            z = Math.sqrt(zz);
            x2 = xz / z;
            y = yz / z;
          }
        }
        this.set(x2, y, z, angle);
        return this;
      }
      let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
      if (Math.abs(s) < 1e-3) s = 1;
      this.x = (m32 - m23) / s;
      this.y = (m13 - m31) / s;
      this.z = (m21 - m12) / s;
      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      this.w = e[15];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      this.w = Math.min(this.w, v.w);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      this.w = Math.max(this.w, v.w);
      return this;
    }
    clamp(min, max2) {
      this.x = clamp(this.x, min.x, max2.x);
      this.y = clamp(this.y, min.y, max2.y);
      this.z = clamp(this.z, min.z, max2.z);
      this.w = clamp(this.w, min.w, max2.w);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      this.w = clamp(this.w, minVal, maxVal);
      return this;
    }
    clampLength(min, max2) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max2));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      this.w = Math.trunc(this.w);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      this.w += (v.w - this.w) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      this.w = v1.w + (v2.w - v1.w) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      this.w = array[offset + 3];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      array[offset + 3] = this.w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      this.w = attribute.getW(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      this.w = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
      yield this.w;
    }
  }
  class RenderTarget extends EventDispatcher {
    constructor(width = 1, height = 1, options = {}) {
      super();
      this.isRenderTarget = true;
      this.width = width;
      this.height = height;
      this.depth = 1;
      this.scissor = new Vector4(0, 0, width, height);
      this.scissorTest = false;
      this.viewport = new Vector4(0, 0, width, height);
      const image = { width, height, depth: 1 };
      options = Object.assign({
        generateMipmaps: false,
        internalFormat: null,
        minFilter: LinearFilter,
        depthBuffer: true,
        stencilBuffer: false,
        resolveDepthBuffer: true,
        resolveStencilBuffer: true,
        depthTexture: null,
        samples: 0,
        count: 1
      }, options);
      const texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
      texture.flipY = false;
      texture.generateMipmaps = options.generateMipmaps;
      texture.internalFormat = options.internalFormat;
      this.textures = [];
      const count = options.count;
      for (let i2 = 0; i2 < count; i2++) {
        this.textures[i2] = texture.clone();
        this.textures[i2].isRenderTargetTexture = true;
        this.textures[i2].renderTarget = this;
      }
      this.depthBuffer = options.depthBuffer;
      this.stencilBuffer = options.stencilBuffer;
      this.resolveDepthBuffer = options.resolveDepthBuffer;
      this.resolveStencilBuffer = options.resolveStencilBuffer;
      this._depthTexture = null;
      this.depthTexture = options.depthTexture;
      this.samples = options.samples;
    }
    get texture() {
      return this.textures[0];
    }
    set texture(value) {
      this.textures[0] = value;
    }
    set depthTexture(current) {
      if (this._depthTexture !== null) this._depthTexture.renderTarget = null;
      if (current !== null) current.renderTarget = this;
      this._depthTexture = current;
    }
    get depthTexture() {
      return this._depthTexture;
    }
    setSize(width, height, depth = 1) {
      if (this.width !== width || this.height !== height || this.depth !== depth) {
        this.width = width;
        this.height = height;
        this.depth = depth;
        for (let i2 = 0, il = this.textures.length; i2 < il; i2++) {
          this.textures[i2].image.width = width;
          this.textures[i2].image.height = height;
          this.textures[i2].image.depth = depth;
        }
        this.dispose();
      }
      this.viewport.set(0, 0, width, height);
      this.scissor.set(0, 0, width, height);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.width = source.width;
      this.height = source.height;
      this.depth = source.depth;
      this.scissor.copy(source.scissor);
      this.scissorTest = source.scissorTest;
      this.viewport.copy(source.viewport);
      this.textures.length = 0;
      for (let i2 = 0, il = source.textures.length; i2 < il; i2++) {
        this.textures[i2] = source.textures[i2].clone();
        this.textures[i2].isRenderTargetTexture = true;
        this.textures[i2].renderTarget = this;
      }
      const image = Object.assign({}, source.texture.image);
      this.texture.source = new Source(image);
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      this.resolveDepthBuffer = source.resolveDepthBuffer;
      this.resolveStencilBuffer = source.resolveStencilBuffer;
      if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
      this.samples = source.samples;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  }
  class WebGLRenderTarget extends RenderTarget {
    constructor(width = 1, height = 1, options = {}) {
      super(width, height, options);
      this.isWebGLRenderTarget = true;
    }
  }
  class DataArrayTexture extends Texture {
    constructor(data = null, width = 1, height = 1, depth = 1) {
      super(null);
      this.isDataArrayTexture = true;
      this.image = { data, width, height, depth };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
      this.layerUpdates = /* @__PURE__ */ new Set();
    }
    addLayerUpdate(layerIndex) {
      this.layerUpdates.add(layerIndex);
    }
    clearLayerUpdates() {
      this.layerUpdates.clear();
    }
  }
  class WebGLArrayRenderTarget extends WebGLRenderTarget {
    constructor(width = 1, height = 1, depth = 1, options = {}) {
      super(width, height, options);
      this.isWebGLArrayRenderTarget = true;
      this.depth = depth;
      this.texture = new DataArrayTexture(null, width, height, depth);
      this.texture.isRenderTargetTexture = true;
    }
  }
  class Quaternion {
    constructor(x2 = 0, y = 0, z = 0, w = 1) {
      this.isQuaternion = true;
      this._x = x2;
      this._y = y;
      this._z = z;
      this._w = w;
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
      let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
      if (t === 0) {
        dst[dstOffset + 0] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
        return;
      }
      if (t === 1) {
        dst[dstOffset + 0] = x1;
        dst[dstOffset + 1] = y1;
        dst[dstOffset + 2] = z1;
        dst[dstOffset + 3] = w1;
        return;
      }
      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        let s = 1 - t;
        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
        if (sqrSin > Number.EPSILON) {
          const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
          s = Math.sin(s * len) / sin;
          t = Math.sin(t * len) / sin;
        }
        const tDir = t * dir;
        x0 = x0 * s + x1 * tDir;
        y0 = y0 * s + y1 * tDir;
        z0 = z0 * s + z1 * tDir;
        w0 = w0 * s + w1 * tDir;
        if (s === 1 - t) {
          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
          x0 *= f;
          y0 *= f;
          z0 *= f;
          w0 *= f;
        }
      }
      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      const x0 = src0[srcOffset0];
      const y0 = src0[srcOffset0 + 1];
      const z0 = src0[srcOffset0 + 2];
      const w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1];
      const y1 = src1[srcOffset1 + 1];
      const z1 = src1[srcOffset1 + 2];
      const w1 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get w() {
      return this._w;
    }
    set w(value) {
      this._w = value;
      this._onChangeCallback();
    }
    set(x2, y, z, w) {
      this._x = x2;
      this._y = y;
      this._z = z;
      this._w = w;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;
      this._onChangeCallback();
      return this;
    }
    setFromEuler(euler, update = true) {
      const x2 = euler._x, y = euler._y, z = euler._z, order = euler._order;
      const cos = Math.cos;
      const sin = Math.sin;
      const c1 = cos(x2 / 2);
      const c2 = cos(y / 2);
      const c3 = cos(z / 2);
      const s1 = sin(x2 / 2);
      const s2 = sin(y / 2);
      const s3 = sin(z / 2);
      switch (order) {
        case "XYZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "YXZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "ZXY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "ZYX":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "YZX":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "XZY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
      }
      if (update === true) this._onChangeCallback();
      return this;
    }
    setFromAxisAngle(axis, angle) {
      const halfAngle = angle / 2, s = Math.sin(halfAngle);
      this._x = axis.x * s;
      this._y = axis.y * s;
      this._z = axis.z * s;
      this._w = Math.cos(halfAngle);
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m) {
      const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
      if (trace > 0) {
        const s = 0.5 / Math.sqrt(trace + 1);
        this._w = 0.25 / s;
        this._x = (m32 - m23) * s;
        this._y = (m13 - m31) * s;
        this._z = (m21 - m12) * s;
      } else if (m11 > m22 && m11 > m33) {
        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
        this._w = (m32 - m23) / s;
        this._x = 0.25 * s;
        this._y = (m12 + m21) / s;
        this._z = (m13 + m31) / s;
      } else if (m22 > m33) {
        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this._w = (m13 - m31) / s;
        this._x = (m12 + m21) / s;
        this._y = 0.25 * s;
        this._z = (m23 + m32) / s;
      } else {
        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this._w = (m21 - m12) / s;
        this._x = (m13 + m31) / s;
        this._y = (m23 + m32) / s;
        this._z = 0.25 * s;
      }
      this._onChangeCallback();
      return this;
    }
    setFromUnitVectors(vFrom, vTo) {
      let r = vFrom.dot(vTo) + 1;
      if (r < Number.EPSILON) {
        r = 0;
        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r;
        }
      } else {
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r;
      }
      return this.normalize();
    }
    angleTo(q) {
      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
      const angle = this.angleTo(q);
      if (angle === 0) return this;
      const t = Math.min(1, step / angle);
      this.slerp(q, t);
      return this;
    }
    identity() {
      return this.set(0, 0, 0, 1);
    }
    invert() {
      return this.conjugate();
    }
    conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this._onChangeCallback();
      return this;
    }
    dot(v) {
      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
      let l = this.length();
      if (l === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l = 1 / l;
        this._x = this._x * l;
        this._y = this._y * l;
        this._z = this._z * l;
        this._w = this._w * l;
      }
      this._onChangeCallback();
      return this;
    }
    multiply(q) {
      return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
      return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
      const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
      const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      this._onChangeCallback();
      return this;
    }
    slerp(qb, t) {
      if (t === 0) return this;
      if (t === 1) return this.copy(qb);
      const x2 = this._x, y = this._y, z = this._z, w = this._w;
      let cosHalfTheta = w * qb._w + x2 * qb._x + y * qb._y + z * qb._z;
      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }
      if (cosHalfTheta >= 1) {
        this._w = w;
        this._x = x2;
        this._y = y;
        this._z = z;
        return this;
      }
      const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
      if (sqrSinHalfTheta <= Number.EPSILON) {
        const s = 1 - t;
        this._w = s * w + t * this._w;
        this._x = s * x2 + t * this._x;
        this._y = s * y + t * this._y;
        this._z = s * z + t * this._z;
        this.normalize();
        return this;
      }
      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
      this._w = w * ratioA + this._w * ratioB;
      this._x = x2 * ratioA + this._x * ratioB;
      this._y = y * ratioA + this._y * ratioB;
      this._z = z * ratioA + this._z * ratioB;
      this._onChangeCallback();
      return this;
    }
    slerpQuaternions(qa, qb, t) {
      return this.copy(qa).slerp(qb, t);
    }
    random() {
      const theta1 = 2 * Math.PI * Math.random();
      const theta2 = 2 * Math.PI * Math.random();
      const x0 = Math.random();
      const r1 = Math.sqrt(1 - x0);
      const r2 = Math.sqrt(x0);
      return this.set(
        r1 * Math.sin(theta1),
        r1 * Math.cos(theta1),
        r2 * Math.sin(theta2),
        r2 * Math.cos(theta2)
      );
    }
    equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
      this._x = array[offset];
      this._y = array[offset + 1];
      this._z = array[offset + 2];
      this._w = array[offset + 3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this._x = attribute.getX(index);
      this._y = attribute.getY(index);
      this._z = attribute.getZ(index);
      this._w = attribute.getW(index);
      this._onChangeCallback();
      return this;
    }
    toJSON() {
      return this.toArray();
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._w;
    }
  }
  class Vector3 {
    constructor(x2 = 0, y = 0, z = 0) {
      Vector3.prototype.isVector3 = true;
      this.x = x2;
      this.y = y;
      this.z = z;
    }
    set(x2, y, z) {
      if (z === void 0) z = this.z;
      this.x = x2;
      this.y = y;
      this.z = z;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
    multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    }
    applyEuler(euler) {
      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x2 + e[3] * y + e[6] * z;
      this.y = e[1] * x2 + e[4] * y + e[7] * z;
      this.z = e[2] * x2 + e[5] * y + e[8] * z;
      return this;
    }
    applyNormalMatrix(m) {
      return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      const w = 1 / (e[3] * x2 + e[7] * y + e[11] * z + e[15]);
      this.x = (e[0] * x2 + e[4] * y + e[8] * z + e[12]) * w;
      this.y = (e[1] * x2 + e[5] * y + e[9] * z + e[13]) * w;
      this.z = (e[2] * x2 + e[6] * y + e[10] * z + e[14]) * w;
      return this;
    }
    applyQuaternion(q) {
      const vx = this.x, vy = this.y, vz = this.z;
      const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
      const tx = 2 * (qy * vz - qz * vy);
      const ty = 2 * (qz * vx - qx * vz);
      const tz = 2 * (qx * vy - qy * vx);
      this.x = vx + qw * tx + qy * tz - qz * ty;
      this.y = vy + qw * ty + qz * tx - qx * tz;
      this.z = vz + qw * tz + qx * ty - qy * tx;
      return this;
    }
    project(camera) {
      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
    unproject(camera) {
      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
    transformDirection(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x2 + e[4] * y + e[8] * z;
      this.y = e[1] * x2 + e[5] * y + e[9] * z;
      this.z = e[2] * x2 + e[6] * y + e[10] * z;
      return this.normalize();
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      return this;
    }
    clamp(min, max2) {
      this.x = clamp(this.x, min.x, max2.x);
      this.y = clamp(this.y, min.y, max2.y);
      this.z = clamp(this.z, min.z, max2.z);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      return this;
    }
    clampLength(min, max2) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max2));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    // TODO lengthSquared?
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
    cross(v) {
      return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
      const ax = a.x, ay = a.y, az = a.z;
      const bx = b.x, by = b.y, bz = b.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
    projectOnVector(v) {
      const denominator = v.lengthSq();
      if (denominator === 0) return this.set(0, 0, 0);
      const scalar = v.dot(this) / denominator;
      return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
      _vector$c.copy(this).projectOnVector(planeNormal);
      return this.sub(_vector$c);
    }
    reflect(normal) {
      return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
      return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
      const sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
    setFromCylindrical(c) {
      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
      this.x = radius * Math.sin(theta);
      this.y = y;
      this.z = radius * Math.cos(theta);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
    setFromMatrixScale(m) {
      const sx = this.setFromMatrixColumn(m, 0).length();
      const sy = this.setFromMatrixColumn(m, 1).length();
      const sz = this.setFromMatrixColumn(m, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
    setFromMatrixColumn(m, index) {
      return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
      return this.fromArray(m.elements, index * 3);
    }
    setFromEuler(e) {
      this.x = e._x;
      this.y = e._y;
      this.z = e._z;
      return this;
    }
    setFromColor(c) {
      this.x = c.r;
      this.y = c.g;
      this.z = c.b;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
    randomDirection() {
      const theta = Math.random() * Math.PI * 2;
      const u = Math.random() * 2 - 1;
      const c = Math.sqrt(1 - u * u);
      this.x = c * Math.cos(theta);
      this.y = u;
      this.z = c * Math.sin(theta);
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
    }
  }
  const _vector$c = /* @__PURE__ */ new Vector3();
  const _quaternion$4 = /* @__PURE__ */ new Quaternion();
  class Box3 {
    constructor(min = new Vector3(Infinity, Infinity, Infinity), max2 = new Vector3(-Infinity, -Infinity, -Infinity)) {
      this.isBox3 = true;
      this.min = min;
      this.max = max2;
    }
    set(min, max2) {
      this.min.copy(min);
      this.max.copy(max2);
      return this;
    }
    setFromArray(array) {
      this.makeEmpty();
      for (let i2 = 0, il = array.length; i2 < il; i2 += 3) {
        this.expandByPoint(_vector$b.fromArray(array, i2));
      }
      return this;
    }
    setFromBufferAttribute(attribute) {
      this.makeEmpty();
      for (let i2 = 0, il = attribute.count; i2 < il; i2++) {
        this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i2));
      }
      return this;
    }
    setFromPoints(points) {
      this.makeEmpty();
      for (let i2 = 0, il = points.length; i2 < il; i2++) {
        this.expandByPoint(points[i2]);
      }
      return this;
    }
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    setFromObject(object, precise = false) {
      this.makeEmpty();
      return this.expandByObject(object, precise);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    expandByObject(object, precise = false) {
      object.updateWorldMatrix(false, false);
      const geometry = object.geometry;
      if (geometry !== void 0) {
        const positionAttribute = geometry.getAttribute("position");
        if (precise === true && positionAttribute !== void 0 && object.isInstancedMesh !== true) {
          for (let i2 = 0, l = positionAttribute.count; i2 < l; i2++) {
            if (object.isMesh === true) {
              object.getVertexPosition(i2, _vector$b);
            } else {
              _vector$b.fromBufferAttribute(positionAttribute, i2);
            }
            _vector$b.applyMatrix4(object.matrixWorld);
            this.expandByPoint(_vector$b);
          }
        } else {
          if (object.boundingBox !== void 0) {
            if (object.boundingBox === null) {
              object.computeBoundingBox();
            }
            _box$4.copy(object.boundingBox);
          } else {
            if (geometry.boundingBox === null) {
              geometry.computeBoundingBox();
            }
            _box$4.copy(geometry.boundingBox);
          }
          _box$4.applyMatrix4(object.matrixWorld);
          this.union(_box$4);
        }
      }
      const children = object.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        this.expandByObject(children[i2], precise);
      }
      return this;
    }
    containsPoint(point) {
      return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
      return target.set(
        (point.x - this.min.x) / (this.max.x - this.min.x),
        (point.y - this.min.y) / (this.max.y - this.min.y),
        (point.z - this.min.z) / (this.max.z - this.min.z)
      );
    }
    intersectsBox(box) {
      return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;
    }
    intersectsSphere(sphere) {
      this.clampPoint(sphere.center, _vector$b);
      return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
      let min, max2;
      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max2 = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max2 = plane.normal.x * this.min.x;
      }
      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max2 += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max2 += plane.normal.y * this.min.y;
      }
      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max2 += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max2 += plane.normal.z * this.min.z;
      }
      return min <= -plane.constant && max2 >= -plane.constant;
    }
    intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      }
      this.getCenter(_center);
      _extents.subVectors(this.max, _center);
      _v0$2.subVectors(triangle.a, _center);
      _v1$7.subVectors(triangle.b, _center);
      _v2$4.subVectors(triangle.c, _center);
      _f0.subVectors(_v1$7, _v0$2);
      _f1.subVectors(_v2$4, _v1$7);
      _f2.subVectors(_v0$2, _v2$4);
      let axes = [
        0,
        -_f0.z,
        _f0.y,
        0,
        -_f1.z,
        _f1.y,
        0,
        -_f2.z,
        _f2.y,
        _f0.z,
        0,
        -_f0.x,
        _f1.z,
        0,
        -_f1.x,
        _f2.z,
        0,
        -_f2.x,
        -_f0.y,
        _f0.x,
        0,
        -_f1.y,
        _f1.x,
        0,
        -_f2.y,
        _f2.x,
        0
      ];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      _triangleNormal.crossVectors(_f0, _f1);
      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
    }
    clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      return this.clampPoint(point, _vector$b).distanceTo(point);
    }
    getBoundingSphere(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
      } else {
        this.getCenter(target.center);
        target.radius = this.getSize(_vector$b).length() * 0.5;
      }
      return target;
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      if (this.isEmpty()) this.makeEmpty();
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    applyMatrix4(matrix) {
      if (this.isEmpty()) return this;
      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
      this.setFromPoints(_points);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  }
  const _points = [
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3()
  ];
  const _vector$b = /* @__PURE__ */ new Vector3();
  const _box$4 = /* @__PURE__ */ new Box3();
  const _v0$2 = /* @__PURE__ */ new Vector3();
  const _v1$7 = /* @__PURE__ */ new Vector3();
  const _v2$4 = /* @__PURE__ */ new Vector3();
  const _f0 = /* @__PURE__ */ new Vector3();
  const _f1 = /* @__PURE__ */ new Vector3();
  const _f2 = /* @__PURE__ */ new Vector3();
  const _center = /* @__PURE__ */ new Vector3();
  const _extents = /* @__PURE__ */ new Vector3();
  const _triangleNormal = /* @__PURE__ */ new Vector3();
  const _testAxis = /* @__PURE__ */ new Vector3();
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i2 = 0, j = axes.length - 3; i2 <= j; i2 += 3) {
      _testAxis.fromArray(axes, i2);
      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p2 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
        return false;
      }
    }
    return true;
  }
  const _box$3 = /* @__PURE__ */ new Box3();
  const _v1$6 = /* @__PURE__ */ new Vector3();
  const _v2$3 = /* @__PURE__ */ new Vector3();
  class Sphere {
    constructor(center = new Vector3(), radius = -1) {
      this.isSphere = true;
      this.center = center;
      this.radius = radius;
    }
    set(center, radius) {
      this.center.copy(center);
      this.radius = radius;
      return this;
    }
    setFromPoints(points, optionalCenter) {
      const center = this.center;
      if (optionalCenter !== void 0) {
        center.copy(optionalCenter);
      } else {
        _box$3.setFromPoints(points).getCenter(center);
      }
      let maxRadiusSq = 0;
      for (let i2 = 0, il = points.length; i2 < il; i2++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i2]));
      }
      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    }
    copy(sphere) {
      this.center.copy(sphere.center);
      this.radius = sphere.radius;
      return this;
    }
    isEmpty() {
      return this.radius < 0;
    }
    makeEmpty() {
      this.center.set(0, 0, 0);
      this.radius = -1;
      return this;
    }
    containsPoint(point) {
      return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
      return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
      const radiusSum = this.radius + sphere.radius;
      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
      return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
      const deltaLengthSq = this.center.distanceToSquared(point);
      target.copy(point);
      if (deltaLengthSq > this.radius * this.radius) {
        target.sub(this.center).normalize();
        target.multiplyScalar(this.radius).add(this.center);
      }
      return target;
    }
    getBoundingBox(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
        return target;
      }
      target.set(this.center, this.center);
      target.expandByScalar(this.radius);
      return target;
    }
    applyMatrix4(matrix) {
      this.center.applyMatrix4(matrix);
      this.radius = this.radius * matrix.getMaxScaleOnAxis();
      return this;
    }
    translate(offset) {
      this.center.add(offset);
      return this;
    }
    expandByPoint(point) {
      if (this.isEmpty()) {
        this.center.copy(point);
        this.radius = 0;
        return this;
      }
      _v1$6.subVectors(point, this.center);
      const lengthSq = _v1$6.lengthSq();
      if (lengthSq > this.radius * this.radius) {
        const length = Math.sqrt(lengthSq);
        const delta = (length - this.radius) * 0.5;
        this.center.addScaledVector(_v1$6, delta / length);
        this.radius += delta;
      }
      return this;
    }
    union(sphere) {
      if (sphere.isEmpty()) {
        return this;
      }
      if (this.isEmpty()) {
        this.copy(sphere);
        return this;
      }
      if (this.center.equals(sphere.center) === true) {
        this.radius = Math.max(this.radius, sphere.radius);
      } else {
        _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
        this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
        this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
      }
      return this;
    }
    equals(sphere) {
      return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  const _vector$a = /* @__PURE__ */ new Vector3();
  const _segCenter = /* @__PURE__ */ new Vector3();
  const _segDir = /* @__PURE__ */ new Vector3();
  const _diff = /* @__PURE__ */ new Vector3();
  const _edge1 = /* @__PURE__ */ new Vector3();
  const _edge2 = /* @__PURE__ */ new Vector3();
  const _normal$1 = /* @__PURE__ */ new Vector3();
  class Ray {
    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
      this.origin = origin;
      this.direction = direction;
    }
    set(origin, direction) {
      this.origin.copy(origin);
      this.direction.copy(direction);
      return this;
    }
    copy(ray) {
      this.origin.copy(ray.origin);
      this.direction.copy(ray.direction);
      return this;
    }
    at(t, target) {
      return target.copy(this.origin).addScaledVector(this.direction, t);
    }
    lookAt(v) {
      this.direction.copy(v).sub(this.origin).normalize();
      return this;
    }
    recast(t) {
      this.origin.copy(this.at(t, _vector$a));
      return this;
    }
    closestPointToPoint(point, target) {
      target.subVectors(point, this.origin);
      const directionDistance = target.dot(this.direction);
      if (directionDistance < 0) {
        return target.copy(this.origin);
      }
      return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
    }
    distanceToPoint(point) {
      return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
      const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }
      _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);
      return _vector$a.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
      _segDir.copy(v1).sub(v0).normalize();
      _diff.copy(this.origin).sub(_segCenter);
      const segExtent = v0.distanceTo(v1) * 0.5;
      const a01 = -this.direction.dot(_segDir);
      const b0 = _diff.dot(this.direction);
      const b1 = -_diff.dot(_segDir);
      const c = _diff.lengthSq();
      const det = Math.abs(1 - a01 * a01);
      let s0, s1, sqrDist, extDet;
      if (det > 0) {
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;
        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              const invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
            } else {
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          if (s1 <= -extDet) {
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          } else if (s1 <= extDet) {
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c;
          } else {
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        }
      } else {
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
      }
      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
      }
      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
      }
      return sqrDist;
    }
    intersectSphere(sphere, target) {
      _vector$a.subVectors(sphere.center, this.origin);
      const tca = _vector$a.dot(this.direction);
      const d2 = _vector$a.dot(_vector$a) - tca * tca;
      const radius2 = sphere.radius * sphere.radius;
      if (d2 > radius2) return null;
      const thc = Math.sqrt(radius2 - d2);
      const t0 = tca - thc;
      const t1 = tca + thc;
      if (t1 < 0) return null;
      if (t0 < 0) return this.at(t1, target);
      return this.at(t0, target);
    }
    intersectsSphere(sphere) {
      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
      const denominator = plane.normal.dot(this.direction);
      if (denominator === 0) {
        if (plane.distanceToPoint(this.origin) === 0) {
          return 0;
        }
        return null;
      }
      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
      return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
      const t = this.distanceToPlane(plane);
      if (t === null) {
        return null;
      }
      return this.at(t, target);
    }
    intersectsPlane(plane) {
      const distToPoint = plane.distanceToPoint(this.origin);
      if (distToPoint === 0) {
        return true;
      }
      const denominator = plane.normal.dot(this.direction);
      if (denominator * distToPoint < 0) {
        return true;
      }
      return false;
    }
    intersectBox(box, target) {
      let tmin, tmax, tymin, tymax, tzmin, tzmax;
      const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
      const origin = this.origin;
      if (invdirx >= 0) {
        tmin = (box.min.x - origin.x) * invdirx;
        tmax = (box.max.x - origin.x) * invdirx;
      } else {
        tmin = (box.max.x - origin.x) * invdirx;
        tmax = (box.min.x - origin.x) * invdirx;
      }
      if (invdiry >= 0) {
        tymin = (box.min.y - origin.y) * invdiry;
        tymax = (box.max.y - origin.y) * invdiry;
      } else {
        tymin = (box.max.y - origin.y) * invdiry;
        tymax = (box.min.y - origin.y) * invdiry;
      }
      if (tmin > tymax || tymin > tmax) return null;
      if (tymin > tmin || isNaN(tmin)) tmin = tymin;
      if (tymax < tmax || isNaN(tmax)) tmax = tymax;
      if (invdirz >= 0) {
        tzmin = (box.min.z - origin.z) * invdirz;
        tzmax = (box.max.z - origin.z) * invdirz;
      } else {
        tzmin = (box.max.z - origin.z) * invdirz;
        tzmax = (box.min.z - origin.z) * invdirz;
      }
      if (tmin > tzmax || tzmin > tmax) return null;
      if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
      if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
      if (tmax < 0) return null;
      return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
      return this.intersectBox(box, _vector$a) !== null;
    }
    intersectTriangle(a, b, c, backfaceCulling, target) {
      _edge1.subVectors(b, a);
      _edge2.subVectors(c, a);
      _normal$1.crossVectors(_edge1, _edge2);
      let DdN = this.direction.dot(_normal$1);
      let sign;
      if (DdN > 0) {
        if (backfaceCulling) return null;
        sign = 1;
      } else if (DdN < 0) {
        sign = -1;
        DdN = -DdN;
      } else {
        return null;
      }
      _diff.subVectors(this.origin, a);
      const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
      if (DdQxE2 < 0) {
        return null;
      }
      const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
      if (DdE1xQ < 0) {
        return null;
      }
      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      }
      const QdN = -sign * _diff.dot(_normal$1);
      if (QdN < 0) {
        return null;
      }
      return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
      this.origin.applyMatrix4(matrix4);
      this.direction.transformDirection(matrix4);
      return this;
    }
    equals(ray) {
      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  class Matrix4 {
    constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      Matrix4.prototype.isMatrix4 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
      }
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      const te = this.elements;
      te[0] = n11;
      te[4] = n12;
      te[8] = n13;
      te[12] = n14;
      te[1] = n21;
      te[5] = n22;
      te[9] = n23;
      te[13] = n24;
      te[2] = n31;
      te[6] = n32;
      te[10] = n33;
      te[14] = n34;
      te[3] = n41;
      te[7] = n42;
      te[11] = n43;
      te[15] = n44;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    clone() {
      return new Matrix4().fromArray(this.elements);
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      te[9] = me[9];
      te[10] = me[10];
      te[11] = me[11];
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      te[15] = me[15];
      return this;
    }
    copyPosition(m) {
      const te = this.elements, me = m.elements;
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      return this;
    }
    setFromMatrix3(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[3],
        me[6],
        0,
        me[1],
        me[4],
        me[7],
        0,
        me[2],
        me[5],
        me[8],
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrixColumn(this, 0);
      yAxis.setFromMatrixColumn(this, 1);
      zAxis.setFromMatrixColumn(this, 2);
      return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
      this.set(
        xAxis.x,
        yAxis.x,
        zAxis.x,
        0,
        xAxis.y,
        yAxis.y,
        zAxis.y,
        0,
        xAxis.z,
        yAxis.z,
        zAxis.z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractRotation(m) {
      const te = this.elements;
      const me = m.elements;
      const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
      const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
      const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;
      te[3] = 0;
      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;
      te[7] = 0;
      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromEuler(euler) {
      const te = this.elements;
      const x2 = euler.x, y = euler.y, z = euler.z;
      const a = Math.cos(x2), b = Math.sin(x2);
      const c = Math.cos(y), d = Math.sin(y);
      const e = Math.cos(z), f = Math.sin(z);
      if (euler.order === "XYZ") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = -c * f;
        te[8] = d;
        te[1] = af + be * d;
        te[5] = ae - bf * d;
        te[9] = -b * c;
        te[2] = bf - ae * d;
        te[6] = be + af * d;
        te[10] = a * c;
      } else if (euler.order === "YXZ") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce + df * b;
        te[4] = de * b - cf;
        te[8] = a * d;
        te[1] = a * f;
        te[5] = a * e;
        te[9] = -b;
        te[2] = cf * b - de;
        te[6] = df + ce * b;
        te[10] = a * c;
      } else if (euler.order === "ZXY") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce - df * b;
        te[4] = -a * f;
        te[8] = de + cf * b;
        te[1] = cf + de * b;
        te[5] = a * e;
        te[9] = df - ce * b;
        te[2] = -a * d;
        te[6] = b;
        te[10] = a * c;
      } else if (euler.order === "ZYX") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = be * d - af;
        te[8] = ae * d + bf;
        te[1] = c * f;
        te[5] = bf * d + ae;
        te[9] = af * d - be;
        te[2] = -d;
        te[6] = b * c;
        te[10] = a * c;
      } else if (euler.order === "YZX") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = bd - ac * f;
        te[8] = bc * f + ad;
        te[1] = f;
        te[5] = a * e;
        te[9] = -b * e;
        te[2] = -d * e;
        te[6] = ad * f + bc;
        te[10] = ac - bd * f;
      } else if (euler.order === "XZY") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = -f;
        te[8] = d * e;
        te[1] = ac * f + bd;
        te[5] = a * e;
        te[9] = ad * f - bc;
        te[2] = bc * f - ad;
        te[6] = b * e;
        te[10] = bd * f + ac;
      }
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromQuaternion(q) {
      return this.compose(_zero, q, _one);
    }
    lookAt(eye, target, up) {
      const te = this.elements;
      _z.subVectors(eye, target);
      if (_z.lengthSq() === 0) {
        _z.z = 1;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
      if (_x.lengthSq() === 0) {
        if (Math.abs(up.z) === 1) {
          _z.x += 1e-4;
        } else {
          _z.z += 1e-4;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
      }
      _x.normalize();
      _y.crossVectors(_z, _x);
      te[0] = _x.x;
      te[4] = _y.x;
      te[8] = _z.x;
      te[1] = _x.y;
      te[5] = _y.y;
      te[9] = _z.y;
      te[2] = _x.z;
      te[6] = _y.z;
      te[10] = _z.z;
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
      const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
      const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
      const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
      const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
      const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
      const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
      const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[4] *= s;
      te[8] *= s;
      te[12] *= s;
      te[1] *= s;
      te[5] *= s;
      te[9] *= s;
      te[13] *= s;
      te[2] *= s;
      te[6] *= s;
      te[10] *= s;
      te[14] *= s;
      te[3] *= s;
      te[7] *= s;
      te[11] *= s;
      te[15] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
      const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
      const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
      const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
      const te = this.elements;
      let tmp;
      tmp = te[1];
      te[1] = te[4];
      te[4] = tmp;
      tmp = te[2];
      te[2] = te[8];
      te[8] = tmp;
      tmp = te[6];
      te[6] = te[9];
      te[9] = tmp;
      tmp = te[3];
      te[3] = te[12];
      te[12] = tmp;
      tmp = te[7];
      te[7] = te[13];
      te[13] = tmp;
      tmp = te[11];
      te[11] = te[14];
      te[14] = tmp;
      return this;
    }
    setPosition(x2, y, z) {
      const te = this.elements;
      if (x2.isVector3) {
        te[12] = x2.x;
        te[13] = x2.y;
        te[14] = x2.z;
      } else {
        te[12] = x2;
        te[13] = y;
        te[14] = z;
      }
      return this;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
      te[4] = t12 * detInv;
      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
      te[8] = t13 * detInv;
      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
      te[12] = t14 * detInv;
      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
      return this;
    }
    scale(v) {
      const te = this.elements;
      const x2 = v.x, y = v.y, z = v.z;
      te[0] *= x2;
      te[4] *= y;
      te[8] *= z;
      te[1] *= x2;
      te[5] *= y;
      te[9] *= z;
      te[2] *= x2;
      te[6] *= y;
      te[10] *= z;
      te[3] *= x2;
      te[7] *= y;
      te[11] *= z;
      return this;
    }
    getMaxScaleOnAxis() {
      const te = this.elements;
      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x2, y, z) {
      if (x2.isVector3) {
        this.set(
          1,
          0,
          0,
          x2.x,
          0,
          1,
          0,
          x2.y,
          0,
          0,
          1,
          x2.z,
          0,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          0,
          x2,
          0,
          1,
          0,
          y,
          0,
          0,
          1,
          z,
          0,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotationX(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        1,
        0,
        0,
        0,
        0,
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationY(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        0,
        s,
        0,
        0,
        1,
        0,
        0,
        -s,
        0,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationZ(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationAxis(axis, angle) {
      const c = Math.cos(angle);
      const s = Math.sin(angle);
      const t = 1 - c;
      const x2 = axis.x, y = axis.y, z = axis.z;
      const tx = t * x2, ty = t * y;
      this.set(
        tx * x2 + c,
        tx * y - s * z,
        tx * z + s * y,
        0,
        tx * y + s * z,
        ty * y + c,
        ty * z - s * x2,
        0,
        tx * z - s * y,
        ty * z + s * x2,
        t * z * z + c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x2, y, z) {
      this.set(
        x2,
        0,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        0,
        z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeShear(xy, xz, yx, yz, zx, zy) {
      this.set(
        1,
        yx,
        zx,
        0,
        xy,
        1,
        zy,
        0,
        xz,
        yz,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    compose(position, quaternion, scale) {
      const te = this.elements;
      const x2 = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
      const x22 = x2 + x2, y2 = y + y, z2 = z + z;
      const xx = x2 * x22, xy = x2 * y2, xz = x2 * z2;
      const yy = y * y2, yz = y * z2, zz = z * z2;
      const wx = w * x22, wy = w * y2, wz = w * z2;
      const sx = scale.x, sy = scale.y, sz = scale.z;
      te[0] = (1 - (yy + zz)) * sx;
      te[1] = (xy + wz) * sx;
      te[2] = (xz - wy) * sx;
      te[3] = 0;
      te[4] = (xy - wz) * sy;
      te[5] = (1 - (xx + zz)) * sy;
      te[6] = (yz + wx) * sy;
      te[7] = 0;
      te[8] = (xz + wy) * sz;
      te[9] = (yz - wx) * sz;
      te[10] = (1 - (xx + yy)) * sz;
      te[11] = 0;
      te[12] = position.x;
      te[13] = position.y;
      te[14] = position.z;
      te[15] = 1;
      return this;
    }
    decompose(position, quaternion, scale) {
      const te = this.elements;
      let sx = _v1$5.set(te[0], te[1], te[2]).length();
      const sy = _v1$5.set(te[4], te[5], te[6]).length();
      const sz = _v1$5.set(te[8], te[9], te[10]).length();
      const det = this.determinant();
      if (det < 0) sx = -sx;
      position.x = te[12];
      position.y = te[13];
      position.z = te[14];
      _m1$2.copy(this);
      const invSX = 1 / sx;
      const invSY = 1 / sy;
      const invSZ = 1 / sz;
      _m1$2.elements[0] *= invSX;
      _m1$2.elements[1] *= invSX;
      _m1$2.elements[2] *= invSX;
      _m1$2.elements[4] *= invSY;
      _m1$2.elements[5] *= invSY;
      _m1$2.elements[6] *= invSY;
      _m1$2.elements[8] *= invSZ;
      _m1$2.elements[9] *= invSZ;
      _m1$2.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(_m1$2);
      scale.x = sx;
      scale.y = sy;
      scale.z = sz;
      return this;
    }
    makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const x2 = 2 * near / (right - left);
      const y = 2 * near / (top - bottom);
      const a = (right + left) / (right - left);
      const b = (top + bottom) / (top - bottom);
      let c, d;
      if (coordinateSystem === WebGLCoordinateSystem) {
        c = -(far + near) / (far - near);
        d = -2 * far * near / (far - near);
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        c = -far / (far - near);
        d = -far * near / (far - near);
      } else {
        throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = x2;
      te[4] = 0;
      te[8] = a;
      te[12] = 0;
      te[1] = 0;
      te[5] = y;
      te[9] = b;
      te[13] = 0;
      te[2] = 0;
      te[6] = 0;
      te[10] = c;
      te[14] = d;
      te[3] = 0;
      te[7] = 0;
      te[11] = -1;
      te[15] = 0;
      return this;
    }
    makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const w = 1 / (right - left);
      const h = 1 / (top - bottom);
      const p = 1 / (far - near);
      const x2 = (right + left) * w;
      const y = (top + bottom) * h;
      let z, zInv;
      if (coordinateSystem === WebGLCoordinateSystem) {
        z = (far + near) * p;
        zInv = -2 * p;
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        z = near * p;
        zInv = -1 * p;
      } else {
        throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = 2 * w;
      te[4] = 0;
      te[8] = 0;
      te[12] = -x2;
      te[1] = 0;
      te[5] = 2 * h;
      te[9] = 0;
      te[13] = -y;
      te[2] = 0;
      te[6] = 0;
      te[10] = zInv;
      te[14] = -z;
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[15] = 1;
      return this;
    }
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i2 = 0; i2 < 16; i2++) {
        if (te[i2] !== me[i2]) return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 16; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      array[offset + 9] = te[9];
      array[offset + 10] = te[10];
      array[offset + 11] = te[11];
      array[offset + 12] = te[12];
      array[offset + 13] = te[13];
      array[offset + 14] = te[14];
      array[offset + 15] = te[15];
      return array;
    }
  }
  const _v1$5 = /* @__PURE__ */ new Vector3();
  const _m1$2 = /* @__PURE__ */ new Matrix4();
  const _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
  const _one = /* @__PURE__ */ new Vector3(1, 1, 1);
  const _x = /* @__PURE__ */ new Vector3();
  const _y = /* @__PURE__ */ new Vector3();
  const _z = /* @__PURE__ */ new Vector3();
  const _matrix$2 = /* @__PURE__ */ new Matrix4();
  const _quaternion$3 = /* @__PURE__ */ new Quaternion();
  class Euler {
    constructor(x2 = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER) {
      this.isEuler = true;
      this._x = x2;
      this._y = y;
      this._z = z;
      this._order = order;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get order() {
      return this._order;
    }
    set order(value) {
      this._order = value;
      this._onChangeCallback();
    }
    set(x2, y, z, order = this._order) {
      this._x = x2;
      this._y = y;
      this._z = z;
      this._order = order;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler) {
      this._x = euler._x;
      this._y = euler._y;
      this._z = euler._z;
      this._order = euler._order;
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m, order = this._order, update = true) {
      const te = m.elements;
      const m11 = te[0], m12 = te[4], m13 = te[8];
      const m21 = te[1], m22 = te[5], m23 = te[9];
      const m31 = te[2], m32 = te[6], m33 = te[10];
      switch (order) {
        case "XYZ":
          this._y = Math.asin(clamp(m13, -1, 1));
          if (Math.abs(m13) < 0.9999999) {
            this._x = Math.atan2(-m23, m33);
            this._z = Math.atan2(-m12, m11);
          } else {
            this._x = Math.atan2(m32, m22);
            this._z = 0;
          }
          break;
        case "YXZ":
          this._x = Math.asin(-clamp(m23, -1, 1));
          if (Math.abs(m23) < 0.9999999) {
            this._y = Math.atan2(m13, m33);
            this._z = Math.atan2(m21, m22);
          } else {
            this._y = Math.atan2(-m31, m11);
            this._z = 0;
          }
          break;
        case "ZXY":
          this._x = Math.asin(clamp(m32, -1, 1));
          if (Math.abs(m32) < 0.9999999) {
            this._y = Math.atan2(-m31, m33);
            this._z = Math.atan2(-m12, m22);
          } else {
            this._y = 0;
            this._z = Math.atan2(m21, m11);
          }
          break;
        case "ZYX":
          this._y = Math.asin(-clamp(m31, -1, 1));
          if (Math.abs(m31) < 0.9999999) {
            this._x = Math.atan2(m32, m33);
            this._z = Math.atan2(m21, m11);
          } else {
            this._x = 0;
            this._z = Math.atan2(-m12, m22);
          }
          break;
        case "YZX":
          this._z = Math.asin(clamp(m21, -1, 1));
          if (Math.abs(m21) < 0.9999999) {
            this._x = Math.atan2(-m23, m22);
            this._y = Math.atan2(-m31, m11);
          } else {
            this._x = 0;
            this._y = Math.atan2(m13, m33);
          }
          break;
        case "XZY":
          this._z = Math.asin(-clamp(m12, -1, 1));
          if (Math.abs(m12) < 0.9999999) {
            this._x = Math.atan2(m32, m22);
            this._y = Math.atan2(m13, m11);
          } else {
            this._x = Math.atan2(-m23, m33);
            this._y = 0;
          }
          break;
        default:
          console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
      }
      this._order = order;
      if (update === true) this._onChangeCallback();
      return this;
    }
    setFromQuaternion(q, order, update) {
      _matrix$2.makeRotationFromQuaternion(q);
      return this.setFromRotationMatrix(_matrix$2, order, update);
    }
    setFromVector3(v, order = this._order) {
      return this.set(v.x, v.y, v.z, order);
    }
    reorder(newOrder) {
      _quaternion$3.setFromEuler(this);
      return this.setFromQuaternion(_quaternion$3, newOrder);
    }
    equals(euler) {
      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    fromArray(array) {
      this._x = array[0];
      this._y = array[1];
      this._z = array[2];
      if (array[3] !== void 0) this._order = array[3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._order;
      return array;
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._order;
    }
  }
  Euler.DEFAULT_ORDER = "XYZ";
  class Layers {
    constructor() {
      this.mask = 1 | 0;
    }
    set(channel) {
      this.mask = (1 << channel | 0) >>> 0;
    }
    enable(channel) {
      this.mask |= 1 << channel | 0;
    }
    enableAll() {
      this.mask = 4294967295 | 0;
    }
    toggle(channel) {
      this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
      this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
      this.mask = 0;
    }
    test(layers) {
      return (this.mask & layers.mask) !== 0;
    }
    isEnabled(channel) {
      return (this.mask & (1 << channel | 0)) !== 0;
    }
  }
  let _object3DId = 0;
  const _v1$4 = /* @__PURE__ */ new Vector3();
  const _q1 = /* @__PURE__ */ new Quaternion();
  const _m1$1 = /* @__PURE__ */ new Matrix4();
  const _target = /* @__PURE__ */ new Vector3();
  const _position$3 = /* @__PURE__ */ new Vector3();
  const _scale$2 = /* @__PURE__ */ new Vector3();
  const _quaternion$2 = /* @__PURE__ */ new Quaternion();
  const _xAxis = /* @__PURE__ */ new Vector3(1, 0, 0);
  const _yAxis = /* @__PURE__ */ new Vector3(0, 1, 0);
  const _zAxis = /* @__PURE__ */ new Vector3(0, 0, 1);
  const _addedEvent = { type: "added" };
  const _removedEvent = { type: "removed" };
  const _childaddedEvent = { type: "childadded", child: null };
  const _childremovedEvent = { type: "childremoved", child: null };
  class Object3D extends EventDispatcher {
    constructor() {
      super();
      this.isObject3D = true;
      Object.defineProperty(this, "id", { value: _object3DId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Object3D";
      this.parent = null;
      this.children = [];
      this.up = Object3D.DEFAULT_UP.clone();
      const position = new Vector3();
      const rotation = new Euler();
      const quaternion = new Quaternion();
      const scale = new Vector3(1, 1, 1);
      function onRotationChange() {
        quaternion.setFromEuler(rotation, false);
      }
      function onQuaternionChange() {
        rotation.setFromQuaternion(quaternion, void 0, false);
      }
      rotation._onChange(onRotationChange);
      quaternion._onChange(onQuaternionChange);
      Object.defineProperties(this, {
        position: {
          configurable: true,
          enumerable: true,
          value: position
        },
        rotation: {
          configurable: true,
          enumerable: true,
          value: rotation
        },
        quaternion: {
          configurable: true,
          enumerable: true,
          value: quaternion
        },
        scale: {
          configurable: true,
          enumerable: true,
          value: scale
        },
        modelViewMatrix: {
          value: new Matrix4()
        },
        normalMatrix: {
          value: new Matrix3()
        }
      });
      this.matrix = new Matrix4();
      this.matrixWorld = new Matrix4();
      this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
      this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
      this.matrixWorldNeedsUpdate = false;
      this.layers = new Layers();
      this.visible = true;
      this.castShadow = false;
      this.receiveShadow = false;
      this.frustumCulled = true;
      this.renderOrder = 0;
      this.animations = [];
      this.userData = {};
    }
    onBeforeShadow() {
    }
    onAfterShadow() {
    }
    onBeforeRender() {
    }
    onAfterRender() {
    }
    applyMatrix4(matrix) {
      if (this.matrixAutoUpdate) this.updateMatrix();
      this.matrix.premultiply(matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(q) {
      this.quaternion.premultiply(q);
      return this;
    }
    setRotationFromAxisAngle(axis, angle) {
      this.quaternion.setFromAxisAngle(axis, angle);
    }
    setRotationFromEuler(euler) {
      this.quaternion.setFromEuler(euler, true);
    }
    setRotationFromMatrix(m) {
      this.quaternion.setFromRotationMatrix(m);
    }
    setRotationFromQuaternion(q) {
      this.quaternion.copy(q);
    }
    rotateOnAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.multiply(_q1);
      return this;
    }
    rotateOnWorldAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.premultiply(_q1);
      return this;
    }
    rotateX(angle) {
      return this.rotateOnAxis(_xAxis, angle);
    }
    rotateY(angle) {
      return this.rotateOnAxis(_yAxis, angle);
    }
    rotateZ(angle) {
      return this.rotateOnAxis(_zAxis, angle);
    }
    translateOnAxis(axis, distance) {
      _v1$4.copy(axis).applyQuaternion(this.quaternion);
      this.position.add(_v1$4.multiplyScalar(distance));
      return this;
    }
    translateX(distance) {
      return this.translateOnAxis(_xAxis, distance);
    }
    translateY(distance) {
      return this.translateOnAxis(_yAxis, distance);
    }
    translateZ(distance) {
      return this.translateOnAxis(_zAxis, distance);
    }
    localToWorld(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    }
    lookAt(x2, y, z) {
      if (x2.isVector3) {
        _target.copy(x2);
      } else {
        _target.set(x2, y, z);
      }
      const parent = this.parent;
      this.updateWorldMatrix(true, false);
      _position$3.setFromMatrixPosition(this.matrixWorld);
      if (this.isCamera || this.isLight) {
        _m1$1.lookAt(_position$3, _target, this.up);
      } else {
        _m1$1.lookAt(_target, _position$3, this.up);
      }
      this.quaternion.setFromRotationMatrix(_m1$1);
      if (parent) {
        _m1$1.extractRotation(parent.matrixWorld);
        _q1.setFromRotationMatrix(_m1$1);
        this.quaternion.premultiply(_q1.invert());
      }
    }
    add(object) {
      if (arguments.length > 1) {
        for (let i2 = 0; i2 < arguments.length; i2++) {
          this.add(arguments[i2]);
        }
        return this;
      }
      if (object === this) {
        console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
        return this;
      }
      if (object && object.isObject3D) {
        object.removeFromParent();
        object.parent = this;
        this.children.push(object);
        object.dispatchEvent(_addedEvent);
        _childaddedEvent.child = object;
        this.dispatchEvent(_childaddedEvent);
        _childaddedEvent.child = null;
      } else {
        console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
      }
      return this;
    }
    remove(object) {
      if (arguments.length > 1) {
        for (let i2 = 0; i2 < arguments.length; i2++) {
          this.remove(arguments[i2]);
        }
        return this;
      }
      const index = this.children.indexOf(object);
      if (index !== -1) {
        object.parent = null;
        this.children.splice(index, 1);
        object.dispatchEvent(_removedEvent);
        _childremovedEvent.child = object;
        this.dispatchEvent(_childremovedEvent);
        _childremovedEvent.child = null;
      }
      return this;
    }
    removeFromParent() {
      const parent = this.parent;
      if (parent !== null) {
        parent.remove(this);
      }
      return this;
    }
    clear() {
      return this.remove(...this.children);
    }
    attach(object) {
      this.updateWorldMatrix(true, false);
      _m1$1.copy(this.matrixWorld).invert();
      if (object.parent !== null) {
        object.parent.updateWorldMatrix(true, false);
        _m1$1.multiply(object.parent.matrixWorld);
      }
      object.applyMatrix4(_m1$1);
      object.removeFromParent();
      object.parent = this;
      this.children.push(object);
      object.updateWorldMatrix(false, true);
      object.dispatchEvent(_addedEvent);
      _childaddedEvent.child = object;
      this.dispatchEvent(_childaddedEvent);
      _childaddedEvent.child = null;
      return this;
    }
    getObjectById(id) {
      return this.getObjectByProperty("id", id);
    }
    getObjectByName(name) {
      return this.getObjectByProperty("name", name);
    }
    getObjectByProperty(name, value) {
      if (this[name] === value) return this;
      for (let i2 = 0, l = this.children.length; i2 < l; i2++) {
        const child = this.children[i2];
        const object = child.getObjectByProperty(name, value);
        if (object !== void 0) {
          return object;
        }
      }
      return void 0;
    }
    getObjectsByProperty(name, value, result = []) {
      if (this[name] === value) result.push(this);
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        children[i2].getObjectsByProperty(name, value, result);
      }
      return result;
    }
    getWorldPosition(target) {
      this.updateWorldMatrix(true, false);
      return target.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, target, _scale$2);
      return target;
    }
    getWorldScale(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, _quaternion$2, target);
      return target;
    }
    getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(e[8], e[9], e[10]).normalize();
    }
    raycast() {
    }
    traverse(callback) {
      callback(this);
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        children[i2].traverse(callback);
      }
    }
    traverseVisible(callback) {
      if (this.visible === false) return;
      callback(this);
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        children[i2].traverseVisible(callback);
      }
    }
    traverseAncestors(callback) {
      const parent = this.parent;
      if (parent !== null) {
        callback(parent);
        parent.traverseAncestors(callback);
      }
    }
    updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(force) {
      if (this.matrixAutoUpdate) this.updateMatrix();
      if (this.matrixWorldNeedsUpdate || force) {
        if (this.matrixWorldAutoUpdate === true) {
          if (this.parent === null) {
            this.matrixWorld.copy(this.matrix);
          } else {
            this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
          }
        }
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        const child = children[i2];
        child.updateMatrixWorld(force);
      }
    }
    updateWorldMatrix(updateParents, updateChildren) {
      const parent = this.parent;
      if (updateParents === true && parent !== null) {
        parent.updateWorldMatrix(true, false);
      }
      if (this.matrixAutoUpdate) this.updateMatrix();
      if (this.matrixWorldAutoUpdate === true) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
      }
      if (updateChildren === true) {
        const children = this.children;
        for (let i2 = 0, l = children.length; i2 < l; i2++) {
          const child = children[i2];
          child.updateWorldMatrix(false, true);
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      const output = {};
      if (isRootObject) {
        meta = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {},
          nodes: {}
        };
        output.metadata = {
          version: 4.6,
          type: "Object",
          generator: "Object3D.toJSON"
        };
      }
      const object = {};
      object.uuid = this.uuid;
      object.type = this.type;
      if (this.name !== "") object.name = this.name;
      if (this.castShadow === true) object.castShadow = true;
      if (this.receiveShadow === true) object.receiveShadow = true;
      if (this.visible === false) object.visible = false;
      if (this.frustumCulled === false) object.frustumCulled = false;
      if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
      if (Object.keys(this.userData).length > 0) object.userData = this.userData;
      object.layers = this.layers.mask;
      object.matrix = this.matrix.toArray();
      object.up = this.up.toArray();
      if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
      if (this.isInstancedMesh) {
        object.type = "InstancedMesh";
        object.count = this.count;
        object.instanceMatrix = this.instanceMatrix.toJSON();
        if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
      }
      if (this.isBatchedMesh) {
        object.type = "BatchedMesh";
        object.perObjectFrustumCulled = this.perObjectFrustumCulled;
        object.sortObjects = this.sortObjects;
        object.drawRanges = this._drawRanges;
        object.reservedRanges = this._reservedRanges;
        object.visibility = this._visibility;
        object.active = this._active;
        object.bounds = this._bounds.map((bound) => ({
          boxInitialized: bound.boxInitialized,
          boxMin: bound.box.min.toArray(),
          boxMax: bound.box.max.toArray(),
          sphereInitialized: bound.sphereInitialized,
          sphereRadius: bound.sphere.radius,
          sphereCenter: bound.sphere.center.toArray()
        }));
        object.maxInstanceCount = this._maxInstanceCount;
        object.maxVertexCount = this._maxVertexCount;
        object.maxIndexCount = this._maxIndexCount;
        object.geometryInitialized = this._geometryInitialized;
        object.geometryCount = this._geometryCount;
        object.matricesTexture = this._matricesTexture.toJSON(meta);
        if (this._colorsTexture !== null) object.colorsTexture = this._colorsTexture.toJSON(meta);
        if (this.boundingSphere !== null) {
          object.boundingSphere = {
            center: object.boundingSphere.center.toArray(),
            radius: object.boundingSphere.radius
          };
        }
        if (this.boundingBox !== null) {
          object.boundingBox = {
            min: object.boundingBox.min.toArray(),
            max: object.boundingBox.max.toArray()
          };
        }
      }
      function serialize(library, element) {
        if (library[element.uuid] === void 0) {
          library[element.uuid] = element.toJSON(meta);
        }
        return element.uuid;
      }
      if (this.isScene) {
        if (this.background) {
          if (this.background.isColor) {
            object.background = this.background.toJSON();
          } else if (this.background.isTexture) {
            object.background = this.background.toJSON(meta).uuid;
          }
        }
        if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
          object.environment = this.environment.toJSON(meta).uuid;
        }
      } else if (this.isMesh || this.isLine || this.isPoints) {
        object.geometry = serialize(meta.geometries, this.geometry);
        const parameters = this.geometry.parameters;
        if (parameters !== void 0 && parameters.shapes !== void 0) {
          const shapes = parameters.shapes;
          if (Array.isArray(shapes)) {
            for (let i2 = 0, l = shapes.length; i2 < l; i2++) {
              const shape = shapes[i2];
              serialize(meta.shapes, shape);
            }
          } else {
            serialize(meta.shapes, shapes);
          }
        }
      }
      if (this.isSkinnedMesh) {
        object.bindMode = this.bindMode;
        object.bindMatrix = this.bindMatrix.toArray();
        if (this.skeleton !== void 0) {
          serialize(meta.skeletons, this.skeleton);
          object.skeleton = this.skeleton.uuid;
        }
      }
      if (this.material !== void 0) {
        if (Array.isArray(this.material)) {
          const uuids = [];
          for (let i2 = 0, l = this.material.length; i2 < l; i2++) {
            uuids.push(serialize(meta.materials, this.material[i2]));
          }
          object.material = uuids;
        } else {
          object.material = serialize(meta.materials, this.material);
        }
      }
      if (this.children.length > 0) {
        object.children = [];
        for (let i2 = 0; i2 < this.children.length; i2++) {
          object.children.push(this.children[i2].toJSON(meta).object);
        }
      }
      if (this.animations.length > 0) {
        object.animations = [];
        for (let i2 = 0; i2 < this.animations.length; i2++) {
          const animation = this.animations[i2];
          object.animations.push(serialize(meta.animations, animation));
        }
      }
      if (isRootObject) {
        const geometries = extractFromCache(meta.geometries);
        const materials = extractFromCache(meta.materials);
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        const shapes = extractFromCache(meta.shapes);
        const skeletons = extractFromCache(meta.skeletons);
        const animations = extractFromCache(meta.animations);
        const nodes = extractFromCache(meta.nodes);
        if (geometries.length > 0) output.geometries = geometries;
        if (materials.length > 0) output.materials = materials;
        if (textures.length > 0) output.textures = textures;
        if (images.length > 0) output.images = images;
        if (shapes.length > 0) output.shapes = shapes;
        if (skeletons.length > 0) output.skeletons = skeletons;
        if (animations.length > 0) output.animations = animations;
        if (nodes.length > 0) output.nodes = nodes;
      }
      output.object = object;
      return output;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data = cache[key];
          delete data.metadata;
          values.push(data);
        }
        return values;
      }
    }
    clone(recursive) {
      return new this.constructor().copy(this, recursive);
    }
    copy(source, recursive = true) {
      this.name = source.name;
      this.up.copy(source.up);
      this.position.copy(source.position);
      this.rotation.order = source.rotation.order;
      this.quaternion.copy(source.quaternion);
      this.scale.copy(source.scale);
      this.matrix.copy(source.matrix);
      this.matrixWorld.copy(source.matrixWorld);
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
      this.layers.mask = source.layers.mask;
      this.visible = source.visible;
      this.castShadow = source.castShadow;
      this.receiveShadow = source.receiveShadow;
      this.frustumCulled = source.frustumCulled;
      this.renderOrder = source.renderOrder;
      this.animations = source.animations.slice();
      this.userData = JSON.parse(JSON.stringify(source.userData));
      if (recursive === true) {
        for (let i2 = 0; i2 < source.children.length; i2++) {
          const child = source.children[i2];
          this.add(child.clone());
        }
      }
      return this;
    }
  }
  Object3D.DEFAULT_UP = /* @__PURE__ */ new Vector3(0, 1, 0);
  Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
  Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
  const _v0$1 = /* @__PURE__ */ new Vector3();
  const _v1$3 = /* @__PURE__ */ new Vector3();
  const _v2$2 = /* @__PURE__ */ new Vector3();
  const _v3$2 = /* @__PURE__ */ new Vector3();
  const _vab = /* @__PURE__ */ new Vector3();
  const _vac = /* @__PURE__ */ new Vector3();
  const _vbc = /* @__PURE__ */ new Vector3();
  const _vap = /* @__PURE__ */ new Vector3();
  const _vbp = /* @__PURE__ */ new Vector3();
  const _vcp = /* @__PURE__ */ new Vector3();
  const _v40 = /* @__PURE__ */ new Vector4();
  const _v41 = /* @__PURE__ */ new Vector4();
  const _v42 = /* @__PURE__ */ new Vector4();
  class Triangle {
    constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
      this.a = a;
      this.b = b;
      this.c = c;
    }
    static getNormal(a, b, c, target) {
      target.subVectors(c, b);
      _v0$1.subVectors(a, b);
      target.cross(_v0$1);
      const targetLengthSq = target.lengthSq();
      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }
      return target.set(0, 0, 0);
    }
    // static/instance method to calculate barycentric coordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    static getBarycoord(point, a, b, c, target) {
      _v0$1.subVectors(c, a);
      _v1$3.subVectors(b, a);
      _v2$2.subVectors(point, a);
      const dot00 = _v0$1.dot(_v0$1);
      const dot01 = _v0$1.dot(_v1$3);
      const dot02 = _v0$1.dot(_v2$2);
      const dot11 = _v1$3.dot(_v1$3);
      const dot12 = _v1$3.dot(_v2$2);
      const denom = dot00 * dot11 - dot01 * dot01;
      if (denom === 0) {
        target.set(0, 0, 0);
        return null;
      }
      const invDenom = 1 / denom;
      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
      return target.set(1 - u - v, v, u);
    }
    static containsPoint(point, a, b, c) {
      if (this.getBarycoord(point, a, b, c, _v3$2) === null) {
        return false;
      }
      return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;
    }
    static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
      if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {
        target.x = 0;
        target.y = 0;
        if ("z" in target) target.z = 0;
        if ("w" in target) target.w = 0;
        return null;
      }
      target.setScalar(0);
      target.addScaledVector(v1, _v3$2.x);
      target.addScaledVector(v2, _v3$2.y);
      target.addScaledVector(v3, _v3$2.z);
      return target;
    }
    static getInterpolatedAttribute(attr, i1, i2, i3, barycoord, target) {
      _v40.setScalar(0);
      _v41.setScalar(0);
      _v42.setScalar(0);
      _v40.fromBufferAttribute(attr, i1);
      _v41.fromBufferAttribute(attr, i2);
      _v42.fromBufferAttribute(attr, i3);
      target.setScalar(0);
      target.addScaledVector(_v40, barycoord.x);
      target.addScaledVector(_v41, barycoord.y);
      target.addScaledVector(_v42, barycoord.z);
      return target;
    }
    static isFrontFacing(a, b, c, direction) {
      _v0$1.subVectors(c, b);
      _v1$3.subVectors(a, b);
      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a, b, c) {
      this.a.copy(a);
      this.b.copy(b);
      this.c.copy(c);
      return this;
    }
    setFromPointsAndIndices(points, i0, i1, i2) {
      this.a.copy(points[i0]);
      this.b.copy(points[i1]);
      this.c.copy(points[i2]);
      return this;
    }
    setFromAttributeAndIndices(attribute, i0, i1, i2) {
      this.a.fromBufferAttribute(attribute, i0);
      this.b.fromBufferAttribute(attribute, i1);
      this.c.fromBufferAttribute(attribute, i2);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(triangle) {
      this.a.copy(triangle.a);
      this.b.copy(triangle.b);
      this.c.copy(triangle.c);
      return this;
    }
    getArea() {
      _v0$1.subVectors(this.c, this.b);
      _v1$3.subVectors(this.a, this.b);
      return _v0$1.cross(_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
      return Triangle.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
      return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getInterpolation(point, v1, v2, v3, target) {
      return Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
    }
    containsPoint(point) {
      return Triangle.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
      return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
      return box.intersectsTriangle(this);
    }
    closestPointToPoint(p, target) {
      const a = this.a, b = this.b, c = this.c;
      let v, w;
      _vab.subVectors(b, a);
      _vac.subVectors(c, a);
      _vap.subVectors(p, a);
      const d1 = _vab.dot(_vap);
      const d2 = _vac.dot(_vap);
      if (d1 <= 0 && d2 <= 0) {
        return target.copy(a);
      }
      _vbp.subVectors(p, b);
      const d3 = _vab.dot(_vbp);
      const d4 = _vac.dot(_vbp);
      if (d3 >= 0 && d4 <= d3) {
        return target.copy(b);
      }
      const vc = d1 * d4 - d3 * d2;
      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v = d1 / (d1 - d3);
        return target.copy(a).addScaledVector(_vab, v);
      }
      _vcp.subVectors(p, c);
      const d5 = _vab.dot(_vcp);
      const d6 = _vac.dot(_vcp);
      if (d6 >= 0 && d5 <= d6) {
        return target.copy(c);
      }
      const vb = d5 * d2 - d1 * d6;
      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w = d2 / (d2 - d6);
        return target.copy(a).addScaledVector(_vac, w);
      }
      const va = d3 * d6 - d5 * d4;
      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        _vbc.subVectors(c, b);
        w = (d4 - d3) / (d4 - d3 + (d5 - d6));
        return target.copy(b).addScaledVector(_vbc, w);
      }
      const denom = 1 / (va + vb + vc);
      v = vb * denom;
      w = vc * denom;
      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
    equals(triangle) {
      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
  }
  const _colorKeywords = {
    "aliceblue": 15792383,
    "antiquewhite": 16444375,
    "aqua": 65535,
    "aquamarine": 8388564,
    "azure": 15794175,
    "beige": 16119260,
    "bisque": 16770244,
    "black": 0,
    "blanchedalmond": 16772045,
    "blue": 255,
    "blueviolet": 9055202,
    "brown": 10824234,
    "burlywood": 14596231,
    "cadetblue": 6266528,
    "chartreuse": 8388352,
    "chocolate": 13789470,
    "coral": 16744272,
    "cornflowerblue": 6591981,
    "cornsilk": 16775388,
    "crimson": 14423100,
    "cyan": 65535,
    "darkblue": 139,
    "darkcyan": 35723,
    "darkgoldenrod": 12092939,
    "darkgray": 11119017,
    "darkgreen": 25600,
    "darkgrey": 11119017,
    "darkkhaki": 12433259,
    "darkmagenta": 9109643,
    "darkolivegreen": 5597999,
    "darkorange": 16747520,
    "darkorchid": 10040012,
    "darkred": 9109504,
    "darksalmon": 15308410,
    "darkseagreen": 9419919,
    "darkslateblue": 4734347,
    "darkslategray": 3100495,
    "darkslategrey": 3100495,
    "darkturquoise": 52945,
    "darkviolet": 9699539,
    "deeppink": 16716947,
    "deepskyblue": 49151,
    "dimgray": 6908265,
    "dimgrey": 6908265,
    "dodgerblue": 2003199,
    "firebrick": 11674146,
    "floralwhite": 16775920,
    "forestgreen": 2263842,
    "fuchsia": 16711935,
    "gainsboro": 14474460,
    "ghostwhite": 16316671,
    "gold": 16766720,
    "goldenrod": 14329120,
    "gray": 8421504,
    "green": 32768,
    "greenyellow": 11403055,
    "grey": 8421504,
    "honeydew": 15794160,
    "hotpink": 16738740,
    "indianred": 13458524,
    "indigo": 4915330,
    "ivory": 16777200,
    "khaki": 15787660,
    "lavender": 15132410,
    "lavenderblush": 16773365,
    "lawngreen": 8190976,
    "lemonchiffon": 16775885,
    "lightblue": 11393254,
    "lightcoral": 15761536,
    "lightcyan": 14745599,
    "lightgoldenrodyellow": 16448210,
    "lightgray": 13882323,
    "lightgreen": 9498256,
    "lightgrey": 13882323,
    "lightpink": 16758465,
    "lightsalmon": 16752762,
    "lightseagreen": 2142890,
    "lightskyblue": 8900346,
    "lightslategray": 7833753,
    "lightslategrey": 7833753,
    "lightsteelblue": 11584734,
    "lightyellow": 16777184,
    "lime": 65280,
    "limegreen": 3329330,
    "linen": 16445670,
    "magenta": 16711935,
    "maroon": 8388608,
    "mediumaquamarine": 6737322,
    "mediumblue": 205,
    "mediumorchid": 12211667,
    "mediumpurple": 9662683,
    "mediumseagreen": 3978097,
    "mediumslateblue": 8087790,
    "mediumspringgreen": 64154,
    "mediumturquoise": 4772300,
    "mediumvioletred": 13047173,
    "midnightblue": 1644912,
    "mintcream": 16121850,
    "mistyrose": 16770273,
    "moccasin": 16770229,
    "navajowhite": 16768685,
    "navy": 128,
    "oldlace": 16643558,
    "olive": 8421376,
    "olivedrab": 7048739,
    "orange": 16753920,
    "orangered": 16729344,
    "orchid": 14315734,
    "palegoldenrod": 15657130,
    "palegreen": 10025880,
    "paleturquoise": 11529966,
    "palevioletred": 14381203,
    "papayawhip": 16773077,
    "peachpuff": 16767673,
    "peru": 13468991,
    "pink": 16761035,
    "plum": 14524637,
    "powderblue": 11591910,
    "purple": 8388736,
    "rebeccapurple": 6697881,
    "red": 16711680,
    "rosybrown": 12357519,
    "royalblue": 4286945,
    "saddlebrown": 9127187,
    "salmon": 16416882,
    "sandybrown": 16032864,
    "seagreen": 3050327,
    "seashell": 16774638,
    "sienna": 10506797,
    "silver": 12632256,
    "skyblue": 8900331,
    "slateblue": 6970061,
    "slategray": 7372944,
    "slategrey": 7372944,
    "snow": 16775930,
    "springgreen": 65407,
    "steelblue": 4620980,
    "tan": 13808780,
    "teal": 32896,
    "thistle": 14204888,
    "tomato": 16737095,
    "turquoise": 4251856,
    "violet": 15631086,
    "wheat": 16113331,
    "white": 16777215,
    "whitesmoke": 16119285,
    "yellow": 16776960,
    "yellowgreen": 10145074
  };
  const _hslA = { h: 0, s: 0, l: 0 };
  const _hslB = { h: 0, s: 0, l: 0 };
  function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
    return p;
  }
  class Color {
    constructor(r, g, b) {
      this.isColor = true;
      this.r = 1;
      this.g = 1;
      this.b = 1;
      return this.set(r, g, b);
    }
    set(r, g, b) {
      if (g === void 0 && b === void 0) {
        const value = r;
        if (value && value.isColor) {
          this.copy(value);
        } else if (typeof value === "number") {
          this.setHex(value);
        } else if (typeof value === "string") {
          this.setStyle(value);
        }
      } else {
        this.setRGB(r, g, b);
      }
      return this;
    }
    setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
    setHex(hex, colorSpace = SRGBColorSpace) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
      this.r = r;
      this.g = g;
      this.b = b;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
      h = euclideanModulo(h, 1);
      s = clamp(s, 0, 1);
      l = clamp(l, 0, 1);
      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        const q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setStyle(style, colorSpace = SRGBColorSpace) {
      function handleAlpha(string) {
        if (string === void 0) return;
        if (parseFloat(string) < 1) {
          console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
      }
      let m;
      if (m = /^(\\w+)\\(([^\\)]*)\\)/.exec(style)) {
        let color;
        const name = m[1];
        const components = m[2];
        switch (name) {
          case "rgb":
          case "rgba":
            if (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(255, parseInt(color[1], 10)) / 255,
                Math.min(255, parseInt(color[2], 10)) / 255,
                Math.min(255, parseInt(color[3], 10)) / 255,
                colorSpace
              );
            }
            if (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(100, parseInt(color[1], 10)) / 100,
                Math.min(100, parseInt(color[2], 10)) / 100,
                Math.min(100, parseInt(color[3], 10)) / 100,
                colorSpace
              );
            }
            break;
          case "hsl":
          case "hsla":
            if (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setHSL(
                parseFloat(color[1]) / 360,
                parseFloat(color[2]) / 100,
                parseFloat(color[3]) / 100,
                colorSpace
              );
            }
            break;
          default:
            console.warn("THREE.Color: Unknown color model " + style);
        }
      } else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {
        const hex = m[1];
        const size = hex.length;
        if (size === 3) {
          return this.setRGB(
            parseInt(hex.charAt(0), 16) / 15,
            parseInt(hex.charAt(1), 16) / 15,
            parseInt(hex.charAt(2), 16) / 15,
            colorSpace
          );
        } else if (size === 6) {
          return this.setHex(parseInt(hex, 16), colorSpace);
        } else {
          console.warn("THREE.Color: Invalid hex color " + style);
        }
      } else if (style && style.length > 0) {
        return this.setColorName(style, colorSpace);
      }
      return this;
    }
    setColorName(style, colorSpace = SRGBColorSpace) {
      const hex = _colorKeywords[style.toLowerCase()];
      if (hex !== void 0) {
        this.setHex(hex, colorSpace);
      } else {
        console.warn("THREE.Color: Unknown color " + style);
      }
      return this;
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
      this.r = color.r;
      this.g = color.g;
      this.b = color.b;
      return this;
    }
    copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    }
    copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    }
    convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
    convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
    getHex(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
    }
    getHexString(colorSpace = SRGBColorSpace) {
      return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
    }
    getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      const max2 = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let hue, saturation;
      const lightness = (min + max2) / 2;
      if (min === max2) {
        hue = 0;
        saturation = 0;
      } else {
        const delta = max2 - min;
        saturation = lightness <= 0.5 ? delta / (max2 + min) : delta / (2 - max2 - min);
        switch (max2) {
          case r:
            hue = (g - b) / delta + (g < b ? 6 : 0);
            break;
          case g:
            hue = (b - r) / delta + 2;
            break;
          case b:
            hue = (r - g) / delta + 4;
            break;
        }
        hue /= 6;
      }
      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
    getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      target.r = _color.r;
      target.g = _color.g;
      target.b = _color.b;
      return target;
    }
    getStyle(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      if (colorSpace !== SRGBColorSpace) {
        return \`color(\${colorSpace} \${r.toFixed(3)} \${g.toFixed(3)} \${b.toFixed(3)})\`;
      }
      return \`rgb(\${Math.round(r * 255)},\${Math.round(g * 255)},\${Math.round(b * 255)})\`;
    }
    offsetHSL(h, s, l) {
      this.getHSL(_hslA);
      return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);
    }
    add(color) {
      this.r += color.r;
      this.g += color.g;
      this.b += color.b;
      return this;
    }
    addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
    addScalar(s) {
      this.r += s;
      this.g += s;
      this.b += s;
      return this;
    }
    sub(color) {
      this.r = Math.max(0, this.r - color.r);
      this.g = Math.max(0, this.g - color.g);
      this.b = Math.max(0, this.b - color.b);
      return this;
    }
    multiply(color) {
      this.r *= color.r;
      this.g *= color.g;
      this.b *= color.b;
      return this;
    }
    multiplyScalar(s) {
      this.r *= s;
      this.g *= s;
      this.b *= s;
      return this;
    }
    lerp(color, alpha) {
      this.r += (color.r - this.r) * alpha;
      this.g += (color.g - this.g) * alpha;
      this.b += (color.b - this.b) * alpha;
      return this;
    }
    lerpColors(color1, color2, alpha) {
      this.r = color1.r + (color2.r - color1.r) * alpha;
      this.g = color1.g + (color2.g - color1.g) * alpha;
      this.b = color1.b + (color2.b - color1.b) * alpha;
      return this;
    }
    lerpHSL(color, alpha) {
      this.getHSL(_hslA);
      color.getHSL(_hslB);
      const h = lerp(_hslA.h, _hslB.h, alpha);
      const s = lerp(_hslA.s, _hslB.s, alpha);
      const l = lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h, s, l);
      return this;
    }
    setFromVector3(v) {
      this.r = v.x;
      this.g = v.y;
      this.b = v.z;
      return this;
    }
    applyMatrix3(m) {
      const r = this.r, g = this.g, b = this.b;
      const e = m.elements;
      this.r = e[0] * r + e[3] * g + e[6] * b;
      this.g = e[1] * r + e[4] * g + e[7] * b;
      this.b = e[2] * r + e[5] * g + e[8] * b;
      return this;
    }
    equals(c) {
      return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
      this.r = array[offset];
      this.g = array[offset + 1];
      this.b = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.r;
      array[offset + 1] = this.g;
      array[offset + 2] = this.b;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.r = attribute.getX(index);
      this.g = attribute.getY(index);
      this.b = attribute.getZ(index);
      return this;
    }
    toJSON() {
      return this.getHex();
    }
    *[Symbol.iterator]() {
      yield this.r;
      yield this.g;
      yield this.b;
    }
  }
  const _color = /* @__PURE__ */ new Color();
  Color.NAMES = _colorKeywords;
  let _materialId = 0;
  class Material extends EventDispatcher {
    constructor() {
      super();
      this.isMaterial = true;
      Object.defineProperty(this, "id", { value: _materialId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Material";
      this.blending = NormalBlending;
      this.side = FrontSide;
      this.vertexColors = false;
      this.opacity = 1;
      this.transparent = false;
      this.alphaHash = false;
      this.blendSrc = SrcAlphaFactor;
      this.blendDst = OneMinusSrcAlphaFactor;
      this.blendEquation = AddEquation;
      this.blendSrcAlpha = null;
      this.blendDstAlpha = null;
      this.blendEquationAlpha = null;
      this.blendColor = new Color(0, 0, 0);
      this.blendAlpha = 0;
      this.depthFunc = LessEqualDepth;
      this.depthTest = true;
      this.depthWrite = true;
      this.stencilWriteMask = 255;
      this.stencilFunc = AlwaysStencilFunc;
      this.stencilRef = 0;
      this.stencilFuncMask = 255;
      this.stencilFail = KeepStencilOp;
      this.stencilZFail = KeepStencilOp;
      this.stencilZPass = KeepStencilOp;
      this.stencilWrite = false;
      this.clippingPlanes = null;
      this.clipIntersection = false;
      this.clipShadows = false;
      this.shadowSide = null;
      this.colorWrite = true;
      this.precision = null;
      this.polygonOffset = false;
      this.polygonOffsetFactor = 0;
      this.polygonOffsetUnits = 0;
      this.dithering = false;
      this.alphaToCoverage = false;
      this.premultipliedAlpha = false;
      this.forceSinglePass = false;
      this.visible = true;
      this.toneMapped = true;
      this.userData = {};
      this.version = 0;
      this._alphaTest = 0;
    }
    get alphaTest() {
      return this._alphaTest;
    }
    set alphaTest(value) {
      if (this._alphaTest > 0 !== value > 0) {
        this.version++;
      }
      this._alphaTest = value;
    }
    // onBeforeRender and onBeforeCompile only supported in WebGLRenderer
    onBeforeRender() {
    }
    onBeforeCompile() {
    }
    customProgramCacheKey() {
      return this.onBeforeCompile.toString();
    }
    setValues(values) {
      if (values === void 0) return;
      for (const key in values) {
        const newValue = values[key];
        if (newValue === void 0) {
          console.warn(\`THREE.Material: parameter '\${key}' has value of undefined.\`);
          continue;
        }
        const currentValue = this[key];
        if (currentValue === void 0) {
          console.warn(\`THREE.Material: '\${key}' is not a property of THREE.\${this.type}.\`);
          continue;
        }
        if (currentValue && currentValue.isColor) {
          currentValue.set(newValue);
        } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (isRootObject) {
        meta = {
          textures: {},
          images: {}
        };
      }
      const data = {
        metadata: {
          version: 4.6,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "") data.name = this.name;
      if (this.color && this.color.isColor) data.color = this.color.getHex();
      if (this.roughness !== void 0) data.roughness = this.roughness;
      if (this.metalness !== void 0) data.metalness = this.metalness;
      if (this.sheen !== void 0) data.sheen = this.sheen;
      if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
      if (this.sheenRoughness !== void 0) data.sheenRoughness = this.sheenRoughness;
      if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
      if (this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
      if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
      if (this.specularIntensity !== void 0) data.specularIntensity = this.specularIntensity;
      if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
      if (this.shininess !== void 0) data.shininess = this.shininess;
      if (this.clearcoat !== void 0) data.clearcoat = this.clearcoat;
      if (this.clearcoatRoughness !== void 0) data.clearcoatRoughness = this.clearcoatRoughness;
      if (this.clearcoatMap && this.clearcoatMap.isTexture) {
        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
      }
      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
      }
      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
      }
      if (this.dispersion !== void 0) data.dispersion = this.dispersion;
      if (this.iridescence !== void 0) data.iridescence = this.iridescence;
      if (this.iridescenceIOR !== void 0) data.iridescenceIOR = this.iridescenceIOR;
      if (this.iridescenceThicknessRange !== void 0) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
      if (this.iridescenceMap && this.iridescenceMap.isTexture) {
        data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
      }
      if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
        data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
      }
      if (this.anisotropy !== void 0) data.anisotropy = this.anisotropy;
      if (this.anisotropyRotation !== void 0) data.anisotropyRotation = this.anisotropyRotation;
      if (this.anisotropyMap && this.anisotropyMap.isTexture) {
        data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
      }
      if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
      if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
      if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
      if (this.lightMap && this.lightMap.isTexture) {
        data.lightMap = this.lightMap.toJSON(meta).uuid;
        data.lightMapIntensity = this.lightMapIntensity;
      }
      if (this.aoMap && this.aoMap.isTexture) {
        data.aoMap = this.aoMap.toJSON(meta).uuid;
        data.aoMapIntensity = this.aoMapIntensity;
      }
      if (this.bumpMap && this.bumpMap.isTexture) {
        data.bumpMap = this.bumpMap.toJSON(meta).uuid;
        data.bumpScale = this.bumpScale;
      }
      if (this.normalMap && this.normalMap.isTexture) {
        data.normalMap = this.normalMap.toJSON(meta).uuid;
        data.normalMapType = this.normalMapType;
        data.normalScale = this.normalScale.toArray();
      }
      if (this.displacementMap && this.displacementMap.isTexture) {
        data.displacementMap = this.displacementMap.toJSON(meta).uuid;
        data.displacementScale = this.displacementScale;
        data.displacementBias = this.displacementBias;
      }
      if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
      if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
      if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
      if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
      if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
      if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
      if (this.envMap && this.envMap.isTexture) {
        data.envMap = this.envMap.toJSON(meta).uuid;
        if (this.combine !== void 0) data.combine = this.combine;
      }
      if (this.envMapRotation !== void 0) data.envMapRotation = this.envMapRotation.toArray();
      if (this.envMapIntensity !== void 0) data.envMapIntensity = this.envMapIntensity;
      if (this.reflectivity !== void 0) data.reflectivity = this.reflectivity;
      if (this.refractionRatio !== void 0) data.refractionRatio = this.refractionRatio;
      if (this.gradientMap && this.gradientMap.isTexture) {
        data.gradientMap = this.gradientMap.toJSON(meta).uuid;
      }
      if (this.transmission !== void 0) data.transmission = this.transmission;
      if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
      if (this.thickness !== void 0) data.thickness = this.thickness;
      if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
      if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
      if (this.attenuationColor !== void 0) data.attenuationColor = this.attenuationColor.getHex();
      if (this.size !== void 0) data.size = this.size;
      if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
      if (this.sizeAttenuation !== void 0) data.sizeAttenuation = this.sizeAttenuation;
      if (this.blending !== NormalBlending) data.blending = this.blending;
      if (this.side !== FrontSide) data.side = this.side;
      if (this.vertexColors === true) data.vertexColors = true;
      if (this.opacity < 1) data.opacity = this.opacity;
      if (this.transparent === true) data.transparent = true;
      if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;
      if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;
      if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;
      if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;
      if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;
      if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;
      if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();
      if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;
      if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;
      if (this.depthTest === false) data.depthTest = this.depthTest;
      if (this.depthWrite === false) data.depthWrite = this.depthWrite;
      if (this.colorWrite === false) data.colorWrite = this.colorWrite;
      if (this.stencilWriteMask !== 255) data.stencilWriteMask = this.stencilWriteMask;
      if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;
      if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;
      if (this.stencilFuncMask !== 255) data.stencilFuncMask = this.stencilFuncMask;
      if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;
      if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;
      if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;
      if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;
      if (this.rotation !== void 0 && this.rotation !== 0) data.rotation = this.rotation;
      if (this.polygonOffset === true) data.polygonOffset = true;
      if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
      if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
      if (this.linewidth !== void 0 && this.linewidth !== 1) data.linewidth = this.linewidth;
      if (this.dashSize !== void 0) data.dashSize = this.dashSize;
      if (this.gapSize !== void 0) data.gapSize = this.gapSize;
      if (this.scale !== void 0) data.scale = this.scale;
      if (this.dithering === true) data.dithering = true;
      if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
      if (this.alphaHash === true) data.alphaHash = true;
      if (this.alphaToCoverage === true) data.alphaToCoverage = true;
      if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;
      if (this.forceSinglePass === true) data.forceSinglePass = true;
      if (this.wireframe === true) data.wireframe = true;
      if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
      if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
      if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
      if (this.flatShading === true) data.flatShading = true;
      if (this.visible === false) data.visible = false;
      if (this.toneMapped === false) data.toneMapped = false;
      if (this.fog === false) data.fog = false;
      if (Object.keys(this.userData).length > 0) data.userData = this.userData;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data2 = cache[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRootObject) {
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        if (textures.length > 0) data.textures = textures;
        if (images.length > 0) data.images = images;
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.blending = source.blending;
      this.side = source.side;
      this.vertexColors = source.vertexColors;
      this.opacity = source.opacity;
      this.transparent = source.transparent;
      this.blendSrc = source.blendSrc;
      this.blendDst = source.blendDst;
      this.blendEquation = source.blendEquation;
      this.blendSrcAlpha = source.blendSrcAlpha;
      this.blendDstAlpha = source.blendDstAlpha;
      this.blendEquationAlpha = source.blendEquationAlpha;
      this.blendColor.copy(source.blendColor);
      this.blendAlpha = source.blendAlpha;
      this.depthFunc = source.depthFunc;
      this.depthTest = source.depthTest;
      this.depthWrite = source.depthWrite;
      this.stencilWriteMask = source.stencilWriteMask;
      this.stencilFunc = source.stencilFunc;
      this.stencilRef = source.stencilRef;
      this.stencilFuncMask = source.stencilFuncMask;
      this.stencilFail = source.stencilFail;
      this.stencilZFail = source.stencilZFail;
      this.stencilZPass = source.stencilZPass;
      this.stencilWrite = source.stencilWrite;
      const srcPlanes = source.clippingPlanes;
      let dstPlanes = null;
      if (srcPlanes !== null) {
        const n = srcPlanes.length;
        dstPlanes = new Array(n);
        for (let i2 = 0; i2 !== n; ++i2) {
          dstPlanes[i2] = srcPlanes[i2].clone();
        }
      }
      this.clippingPlanes = dstPlanes;
      this.clipIntersection = source.clipIntersection;
      this.clipShadows = source.clipShadows;
      this.shadowSide = source.shadowSide;
      this.colorWrite = source.colorWrite;
      this.precision = source.precision;
      this.polygonOffset = source.polygonOffset;
      this.polygonOffsetFactor = source.polygonOffsetFactor;
      this.polygonOffsetUnits = source.polygonOffsetUnits;
      this.dithering = source.dithering;
      this.alphaTest = source.alphaTest;
      this.alphaHash = source.alphaHash;
      this.alphaToCoverage = source.alphaToCoverage;
      this.premultipliedAlpha = source.premultipliedAlpha;
      this.forceSinglePass = source.forceSinglePass;
      this.visible = source.visible;
      this.toneMapped = source.toneMapped;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    onBuild() {
      console.warn("Material: onBuild() has been removed.");
    }
  }
  class MeshBasicMaterial extends Material {
    constructor(parameters) {
      super();
      this.isMeshBasicMaterial = true;
      this.type = "MeshBasicMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.envMapRotation = new Euler();
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapRotation.copy(source.envMapRotation);
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.fog = source.fog;
      return this;
    }
  }
  const _vector$9 = /* @__PURE__ */ new Vector3();
  const _vector2$1 = /* @__PURE__ */ new Vector2();
  class BufferAttribute {
    constructor(array, itemSize, normalized = false) {
      if (Array.isArray(array)) {
        throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      }
      this.isBufferAttribute = true;
      this.name = "";
      this.array = array;
      this.itemSize = itemSize;
      this.count = array !== void 0 ? array.length / itemSize : 0;
      this.normalized = normalized;
      this.usage = StaticDrawUsage;
      this.updateRanges = [];
      this.gpuType = FloatType;
      this.version = 0;
    }
    onUploadCallback() {
    }
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    setUsage(value) {
      this.usage = value;
      return this;
    }
    addUpdateRange(start, count) {
      this.updateRanges.push({ start, count });
    }
    clearUpdateRanges() {
      this.updateRanges.length = 0;
    }
    copy(source) {
      this.name = source.name;
      this.array = new source.array.constructor(source.array);
      this.itemSize = source.itemSize;
      this.count = source.count;
      this.normalized = source.normalized;
      this.usage = source.usage;
      this.gpuType = source.gpuType;
      return this;
    }
    copyAt(index1, attribute, index2) {
      index1 *= this.itemSize;
      index2 *= attribute.itemSize;
      for (let i2 = 0, l = this.itemSize; i2 < l; i2++) {
        this.array[index1 + i2] = attribute.array[index2 + i2];
      }
      return this;
    }
    copyArray(array) {
      this.array.set(array);
      return this;
    }
    applyMatrix3(m) {
      if (this.itemSize === 2) {
        for (let i2 = 0, l = this.count; i2 < l; i2++) {
          _vector2$1.fromBufferAttribute(this, i2);
          _vector2$1.applyMatrix3(m);
          this.setXY(i2, _vector2$1.x, _vector2$1.y);
        }
      } else if (this.itemSize === 3) {
        for (let i2 = 0, l = this.count; i2 < l; i2++) {
          _vector$9.fromBufferAttribute(this, i2);
          _vector$9.applyMatrix3(m);
          this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
        }
      }
      return this;
    }
    applyMatrix4(m) {
      for (let i2 = 0, l = this.count; i2 < l; i2++) {
        _vector$9.fromBufferAttribute(this, i2);
        _vector$9.applyMatrix4(m);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    applyNormalMatrix(m) {
      for (let i2 = 0, l = this.count; i2 < l; i2++) {
        _vector$9.fromBufferAttribute(this, i2);
        _vector$9.applyNormalMatrix(m);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    transformDirection(m) {
      for (let i2 = 0, l = this.count; i2 < l; i2++) {
        _vector$9.fromBufferAttribute(this, i2);
        _vector$9.transformDirection(m);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    set(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    }
    getComponent(index, component) {
      let value = this.array[index * this.itemSize + component];
      if (this.normalized) value = denormalize(value, this.array);
      return value;
    }
    setComponent(index, component, value) {
      if (this.normalized) value = normalize$1(value, this.array);
      this.array[index * this.itemSize + component] = value;
      return this;
    }
    getX(index) {
      let x2 = this.array[index * this.itemSize];
      if (this.normalized) x2 = denormalize(x2, this.array);
      return x2;
    }
    setX(index, x2) {
      if (this.normalized) x2 = normalize$1(x2, this.array);
      this.array[index * this.itemSize] = x2;
      return this;
    }
    getY(index) {
      let y = this.array[index * this.itemSize + 1];
      if (this.normalized) y = denormalize(y, this.array);
      return y;
    }
    setY(index, y) {
      if (this.normalized) y = normalize$1(y, this.array);
      this.array[index * this.itemSize + 1] = y;
      return this;
    }
    getZ(index) {
      let z = this.array[index * this.itemSize + 2];
      if (this.normalized) z = denormalize(z, this.array);
      return z;
    }
    setZ(index, z) {
      if (this.normalized) z = normalize$1(z, this.array);
      this.array[index * this.itemSize + 2] = z;
      return this;
    }
    getW(index) {
      let w = this.array[index * this.itemSize + 3];
      if (this.normalized) w = denormalize(w, this.array);
      return w;
    }
    setW(index, w) {
      if (this.normalized) w = normalize$1(w, this.array);
      this.array[index * this.itemSize + 3] = w;
      return this;
    }
    setXY(index, x2, y) {
      index *= this.itemSize;
      if (this.normalized) {
        x2 = normalize$1(x2, this.array);
        y = normalize$1(y, this.array);
      }
      this.array[index + 0] = x2;
      this.array[index + 1] = y;
      return this;
    }
    setXYZ(index, x2, y, z) {
      index *= this.itemSize;
      if (this.normalized) {
        x2 = normalize$1(x2, this.array);
        y = normalize$1(y, this.array);
        z = normalize$1(z, this.array);
      }
      this.array[index + 0] = x2;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      return this;
    }
    setXYZW(index, x2, y, z, w) {
      index *= this.itemSize;
      if (this.normalized) {
        x2 = normalize$1(x2, this.array);
        y = normalize$1(y, this.array);
        z = normalize$1(z, this.array);
        w = normalize$1(w, this.array);
      }
      this.array[index + 0] = x2;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      this.array[index + 3] = w;
      return this;
    }
    onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
    clone() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
      const data = {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.from(this.array),
        normalized: this.normalized
      };
      if (this.name !== "") data.name = this.name;
      if (this.usage !== StaticDrawUsage) data.usage = this.usage;
      return data;
    }
  }
  class Uint16BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint16Array(array), itemSize, normalized);
    }
  }
  class Uint32BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint32Array(array), itemSize, normalized);
    }
  }
  class Float32BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Float32Array(array), itemSize, normalized);
    }
  }
  let _id$1 = 0;
  const _m1 = /* @__PURE__ */ new Matrix4();
  const _obj = /* @__PURE__ */ new Object3D();
  const _offset = /* @__PURE__ */ new Vector3();
  const _box$2 = /* @__PURE__ */ new Box3();
  const _boxMorphTargets = /* @__PURE__ */ new Box3();
  const _vector$8 = /* @__PURE__ */ new Vector3();
  class BufferGeometry extends EventDispatcher {
    constructor() {
      super();
      this.isBufferGeometry = true;
      Object.defineProperty(this, "id", { value: _id$1++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "BufferGeometry";
      this.index = null;
      this.indirect = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.morphTargetsRelative = false;
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.drawRange = { start: 0, count: Infinity };
      this.userData = {};
    }
    getIndex() {
      return this.index;
    }
    setIndex(index) {
      if (Array.isArray(index)) {
        this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
      } else {
        this.index = index;
      }
      return this;
    }
    setIndirect(indirect) {
      this.indirect = indirect;
      return this;
    }
    getIndirect() {
      return this.indirect;
    }
    getAttribute(name) {
      return this.attributes[name];
    }
    setAttribute(name, attribute) {
      this.attributes[name] = attribute;
      return this;
    }
    deleteAttribute(name) {
      delete this.attributes[name];
      return this;
    }
    hasAttribute(name) {
      return this.attributes[name] !== void 0;
    }
    addGroup(start, count, materialIndex = 0) {
      this.groups.push({
        start,
        count,
        materialIndex
      });
    }
    clearGroups() {
      this.groups = [];
    }
    setDrawRange(start, count) {
      this.drawRange.start = start;
      this.drawRange.count = count;
    }
    applyMatrix4(matrix) {
      const position = this.attributes.position;
      if (position !== void 0) {
        position.applyMatrix4(matrix);
        position.needsUpdate = true;
      }
      const normal = this.attributes.normal;
      if (normal !== void 0) {
        const normalMatrix = new Matrix3().getNormalMatrix(matrix);
        normal.applyNormalMatrix(normalMatrix);
        normal.needsUpdate = true;
      }
      const tangent = this.attributes.tangent;
      if (tangent !== void 0) {
        tangent.transformDirection(matrix);
        tangent.needsUpdate = true;
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      return this;
    }
    applyQuaternion(q) {
      _m1.makeRotationFromQuaternion(q);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateX(angle) {
      _m1.makeRotationX(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateY(angle) {
      _m1.makeRotationY(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateZ(angle) {
      _m1.makeRotationZ(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    translate(x2, y, z) {
      _m1.makeTranslation(x2, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    scale(x2, y, z) {
      _m1.makeScale(x2, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    lookAt(vector) {
      _obj.lookAt(vector);
      _obj.updateMatrix();
      this.applyMatrix4(_obj.matrix);
      return this;
    }
    center() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset).negate();
      this.translate(_offset.x, _offset.y, _offset.z);
      return this;
    }
    setFromPoints(points) {
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute === void 0) {
        const position = [];
        for (let i2 = 0, l = points.length; i2 < l; i2++) {
          const point = points[i2];
          position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute("position", new Float32BufferAttribute(position, 3));
      } else {
        const l = Math.min(points.length, positionAttribute.count);
        for (let i2 = 0; i2 < l; i2++) {
          const point = points[i2];
          positionAttribute.setXYZ(i2, point.x, point.y, point.z || 0);
        }
        if (points.length > positionAttribute.count) {
          console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.");
        }
        positionAttribute.needsUpdate = true;
      }
      return this;
    }
    computeBoundingBox() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this);
        this.boundingBox.set(
          new Vector3(-Infinity, -Infinity, -Infinity),
          new Vector3(Infinity, Infinity, Infinity)
        );
        return;
      }
      if (position !== void 0) {
        this.boundingBox.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            _box$2.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(this.boundingBox.min, _box$2.min);
              this.boundingBox.expandByPoint(_vector$8);
              _vector$8.addVectors(this.boundingBox.max, _box$2.max);
              this.boundingBox.expandByPoint(_vector$8);
            } else {
              this.boundingBox.expandByPoint(_box$2.min);
              this.boundingBox.expandByPoint(_box$2.max);
            }
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }
      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    }
    computeBoundingSphere() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this);
        this.boundingSphere.set(new Vector3(), Infinity);
        return;
      }
      if (position) {
        const center = this.boundingSphere.center;
        _box$2.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            _boxMorphTargets.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);
              _box$2.expandByPoint(_vector$8);
              _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);
              _box$2.expandByPoint(_vector$8);
            } else {
              _box$2.expandByPoint(_boxMorphTargets.min);
              _box$2.expandByPoint(_boxMorphTargets.max);
            }
          }
        }
        _box$2.getCenter(center);
        let maxRadiusSq = 0;
        for (let i2 = 0, il = position.count; i2 < il; i2++) {
          _vector$8.fromBufferAttribute(position, i2);
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
        }
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            const morphTargetsRelative = this.morphTargetsRelative;
            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
              _vector$8.fromBufferAttribute(morphAttribute, j);
              if (morphTargetsRelative) {
                _offset.fromBufferAttribute(position, j);
                _vector$8.add(_offset);
              }
              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
            }
          }
        }
        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    }
    computeTangents() {
      const index = this.index;
      const attributes = this.attributes;
      if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
        console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
        return;
      }
      const positionAttribute = attributes.position;
      const normalAttribute = attributes.normal;
      const uvAttribute = attributes.uv;
      if (this.hasAttribute("tangent") === false) {
        this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));
      }
      const tangentAttribute = this.getAttribute("tangent");
      const tan1 = [], tan2 = [];
      for (let i2 = 0; i2 < positionAttribute.count; i2++) {
        tan1[i2] = new Vector3();
        tan2[i2] = new Vector3();
      }
      const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
      function handleTriangle(a, b, c) {
        vA.fromBufferAttribute(positionAttribute, a);
        vB.fromBufferAttribute(positionAttribute, b);
        vC.fromBufferAttribute(positionAttribute, c);
        uvA.fromBufferAttribute(uvAttribute, a);
        uvB.fromBufferAttribute(uvAttribute, b);
        uvC.fromBufferAttribute(uvAttribute, c);
        vB.sub(vA);
        vC.sub(vA);
        uvB.sub(uvA);
        uvC.sub(uvA);
        const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
        if (!isFinite(r)) return;
        sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
        tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
        tan1[a].add(sdir);
        tan1[b].add(sdir);
        tan1[c].add(sdir);
        tan2[a].add(tdir);
        tan2[b].add(tdir);
        tan2[c].add(tdir);
      }
      let groups = this.groups;
      if (groups.length === 0) {
        groups = [{
          start: 0,
          count: index.count
        }];
      }
      for (let i2 = 0, il = groups.length; i2 < il; ++i2) {
        const group = groups[i2];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleTriangle(
            index.getX(j + 0),
            index.getX(j + 1),
            index.getX(j + 2)
          );
        }
      }
      const tmp = new Vector3(), tmp2 = new Vector3();
      const n = new Vector3(), n2 = new Vector3();
      function handleVertex(v) {
        n.fromBufferAttribute(normalAttribute, v);
        n2.copy(n);
        const t = tan1[v];
        tmp.copy(t);
        tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
        tmp2.crossVectors(n2, t);
        const test = tmp2.dot(tan2[v]);
        const w = test < 0 ? -1 : 1;
        tangentAttribute.setXYZW(v, tmp.x, tmp.y, tmp.z, w);
      }
      for (let i2 = 0, il = groups.length; i2 < il; ++i2) {
        const group = groups[i2];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleVertex(index.getX(j + 0));
          handleVertex(index.getX(j + 1));
          handleVertex(index.getX(j + 2));
        }
      }
    }
    computeVertexNormals() {
      const index = this.index;
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute !== void 0) {
        let normalAttribute = this.getAttribute("normal");
        if (normalAttribute === void 0) {
          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
          this.setAttribute("normal", normalAttribute);
        } else {
          for (let i2 = 0, il = normalAttribute.count; i2 < il; i2++) {
            normalAttribute.setXYZ(i2, 0, 0, 0);
          }
        }
        const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
        const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
        const cb = new Vector3(), ab = new Vector3();
        if (index) {
          for (let i2 = 0, il = index.count; i2 < il; i2 += 3) {
            const vA = index.getX(i2 + 0);
            const vB = index.getX(i2 + 1);
            const vC = index.getX(i2 + 2);
            pA.fromBufferAttribute(positionAttribute, vA);
            pB.fromBufferAttribute(positionAttribute, vB);
            pC.fromBufferAttribute(positionAttribute, vC);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            nA.fromBufferAttribute(normalAttribute, vA);
            nB.fromBufferAttribute(normalAttribute, vB);
            nC.fromBufferAttribute(normalAttribute, vC);
            nA.add(cb);
            nB.add(cb);
            nC.add(cb);
            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
          }
        } else {
          for (let i2 = 0, il = positionAttribute.count; i2 < il; i2 += 3) {
            pA.fromBufferAttribute(positionAttribute, i2 + 0);
            pB.fromBufferAttribute(positionAttribute, i2 + 1);
            pC.fromBufferAttribute(positionAttribute, i2 + 2);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            normalAttribute.setXYZ(i2 + 0, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i2 + 1, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i2 + 2, cb.x, cb.y, cb.z);
          }
        }
        this.normalizeNormals();
        normalAttribute.needsUpdate = true;
      }
    }
    normalizeNormals() {
      const normals = this.attributes.normal;
      for (let i2 = 0, il = normals.count; i2 < il; i2++) {
        _vector$8.fromBufferAttribute(normals, i2);
        _vector$8.normalize();
        normals.setXYZ(i2, _vector$8.x, _vector$8.y, _vector$8.z);
      }
    }
    toNonIndexed() {
      function convertBufferAttribute(attribute, indices2) {
        const array = attribute.array;
        const itemSize = attribute.itemSize;
        const normalized = attribute.normalized;
        const array2 = new array.constructor(indices2.length * itemSize);
        let index = 0, index2 = 0;
        for (let i2 = 0, l = indices2.length; i2 < l; i2++) {
          if (attribute.isInterleavedBufferAttribute) {
            index = indices2[i2] * attribute.data.stride + attribute.offset;
          } else {
            index = indices2[i2] * itemSize;
          }
          for (let j = 0; j < itemSize; j++) {
            array2[index2++] = array[index++];
          }
        }
        return new BufferAttribute(array2, itemSize, normalized);
      }
      if (this.index === null) {
        console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
        return this;
      }
      const geometry2 = new BufferGeometry();
      const indices = this.index.array;
      const attributes = this.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        const newAttribute = convertBufferAttribute(attribute, indices);
        geometry2.setAttribute(name, newAttribute);
      }
      const morphAttributes = this.morphAttributes;
      for (const name in morphAttributes) {
        const morphArray = [];
        const morphAttribute = morphAttributes[name];
        for (let i2 = 0, il = morphAttribute.length; i2 < il; i2++) {
          const attribute = morphAttribute[i2];
          const newAttribute = convertBufferAttribute(attribute, indices);
          morphArray.push(newAttribute);
        }
        geometry2.morphAttributes[name] = morphArray;
      }
      geometry2.morphTargetsRelative = this.morphTargetsRelative;
      const groups = this.groups;
      for (let i2 = 0, l = groups.length; i2 < l; i2++) {
        const group = groups[i2];
        geometry2.addGroup(group.start, group.count, group.materialIndex);
      }
      return geometry2;
    }
    toJSON() {
      const data = {
        metadata: {
          version: 4.6,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "") data.name = this.name;
      if (Object.keys(this.userData).length > 0) data.userData = this.userData;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0) data[key] = parameters[key];
        }
        return data;
      }
      data.data = { attributes: {} };
      const index = this.index;
      if (index !== null) {
        data.data.index = {
          type: index.array.constructor.name,
          array: Array.prototype.slice.call(index.array)
        };
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        const attribute = attributes[key];
        data.data.attributes[key] = attribute.toJSON(data.data);
      }
      const morphAttributes = {};
      let hasMorphAttributes = false;
      for (const key in this.morphAttributes) {
        const attributeArray = this.morphAttributes[key];
        const array = [];
        for (let i2 = 0, il = attributeArray.length; i2 < il; i2++) {
          const attribute = attributeArray[i2];
          array.push(attribute.toJSON(data.data));
        }
        if (array.length > 0) {
          morphAttributes[key] = array;
          hasMorphAttributes = true;
        }
      }
      if (hasMorphAttributes) {
        data.data.morphAttributes = morphAttributes;
        data.data.morphTargetsRelative = this.morphTargetsRelative;
      }
      const groups = this.groups;
      if (groups.length > 0) {
        data.data.groups = JSON.parse(JSON.stringify(groups));
      }
      const boundingSphere = this.boundingSphere;
      if (boundingSphere !== null) {
        data.data.boundingSphere = {
          center: boundingSphere.center.toArray(),
          radius: boundingSphere.radius
        };
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      const data = {};
      this.name = source.name;
      const index = source.index;
      if (index !== null) {
        this.setIndex(index.clone(data));
      }
      const attributes = source.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        this.setAttribute(name, attribute.clone(data));
      }
      const morphAttributes = source.morphAttributes;
      for (const name in morphAttributes) {
        const array = [];
        const morphAttribute = morphAttributes[name];
        for (let i2 = 0, l = morphAttribute.length; i2 < l; i2++) {
          array.push(morphAttribute[i2].clone(data));
        }
        this.morphAttributes[name] = array;
      }
      this.morphTargetsRelative = source.morphTargetsRelative;
      const groups = source.groups;
      for (let i2 = 0, l = groups.length; i2 < l; i2++) {
        const group = groups[i2];
        this.addGroup(group.start, group.count, group.materialIndex);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.drawRange.start = source.drawRange.start;
      this.drawRange.count = source.drawRange.count;
      this.userData = source.userData;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  }
  const _inverseMatrix$3 = /* @__PURE__ */ new Matrix4();
  const _ray$3 = /* @__PURE__ */ new Ray();
  const _sphere$6 = /* @__PURE__ */ new Sphere();
  const _sphereHitAt = /* @__PURE__ */ new Vector3();
  const _vA$1 = /* @__PURE__ */ new Vector3();
  const _vB$1 = /* @__PURE__ */ new Vector3();
  const _vC$1 = /* @__PURE__ */ new Vector3();
  const _tempA = /* @__PURE__ */ new Vector3();
  const _morphA = /* @__PURE__ */ new Vector3();
  const _intersectionPoint = /* @__PURE__ */ new Vector3();
  const _intersectionPointWorld = /* @__PURE__ */ new Vector3();
  class Mesh extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
      super();
      this.isMesh = true;
      this.type = "Mesh";
      this.geometry = geometry;
      this.material = material;
      this.updateMorphTargets();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.morphTargetInfluences !== void 0) {
        this.morphTargetInfluences = source.morphTargetInfluences.slice();
      }
      if (source.morphTargetDictionary !== void 0) {
        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
      }
      this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
      this.geometry = source.geometry;
      return this;
    }
    updateMorphTargets() {
      const geometry = this.geometry;
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m;
          }
        }
      }
    }
    getVertexPosition(index, target) {
      const geometry = this.geometry;
      const position = geometry.attributes.position;
      const morphPosition = geometry.morphAttributes.position;
      const morphTargetsRelative = geometry.morphTargetsRelative;
      target.fromBufferAttribute(position, index);
      const morphInfluences = this.morphTargetInfluences;
      if (morphPosition && morphInfluences) {
        _morphA.set(0, 0, 0);
        for (let i2 = 0, il = morphPosition.length; i2 < il; i2++) {
          const influence = morphInfluences[i2];
          const morphAttribute = morphPosition[i2];
          if (influence === 0) continue;
          _tempA.fromBufferAttribute(morphAttribute, index);
          if (morphTargetsRelative) {
            _morphA.addScaledVector(_tempA, influence);
          } else {
            _morphA.addScaledVector(_tempA.sub(target), influence);
          }
        }
        target.add(_morphA);
      }
      return target;
    }
    raycast(raycaster, intersects) {
      const geometry = this.geometry;
      const material = this.material;
      const matrixWorld = this.matrixWorld;
      if (material === void 0) return;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      _sphere$6.copy(geometry.boundingSphere);
      _sphere$6.applyMatrix4(matrixWorld);
      _ray$3.copy(raycaster.ray).recast(raycaster.near);
      if (_sphere$6.containsPoint(_ray$3.origin) === false) {
        if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;
        if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;
      }
      _inverseMatrix$3.copy(matrixWorld).invert();
      _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
      if (geometry.boundingBox !== null) {
        if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;
      }
      this._computeIntersections(raycaster, intersects, _ray$3);
    }
    _computeIntersections(raycaster, intersects, rayLocalSpace) {
      let intersection;
      const geometry = this.geometry;
      const material = this.material;
      const index = geometry.index;
      const position = geometry.attributes.position;
      const uv = geometry.attributes.uv;
      const uv1 = geometry.attributes.uv1;
      const normal = geometry.attributes.normal;
      const groups = geometry.groups;
      const drawRange = geometry.drawRange;
      if (index !== null) {
        if (Array.isArray(material)) {
          for (let i2 = 0, il = groups.length; i2 < il; i2++) {
            const group = groups[i2];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = index.getX(j);
              const b = index.getX(j + 1);
              const c = index.getX(j + 2);
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i2 = start, il = end; i2 < il; i2 += 3) {
            const a = index.getX(i2);
            const b = index.getX(i2 + 1);
            const c = index.getX(i2 + 2);
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i2 / 3);
              intersects.push(intersection);
            }
          }
        }
      } else if (position !== void 0) {
        if (Array.isArray(material)) {
          for (let i2 = 0, il = groups.length; i2 < il; i2++) {
            const group = groups[i2];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = j;
              const b = j + 1;
              const c = j + 2;
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(position.count, drawRange.start + drawRange.count);
          for (let i2 = start, il = end; i2 < il; i2 += 3) {
            const a = i2;
            const b = i2 + 1;
            const c = i2 + 2;
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i2 / 3);
              intersects.push(intersection);
            }
          }
        }
      }
    }
  }
  function checkIntersection$1(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) {
      intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    } else {
      intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);
    }
    if (intersect === null) return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far) return null;
    return {
      distance,
      point: _intersectionPointWorld.clone(),
      object
    };
  }
  function checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {
    object.getVertexPosition(a, _vA$1);
    object.getVertexPosition(b, _vB$1);
    object.getVertexPosition(c, _vC$1);
    const intersection = checkIntersection$1(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
    if (intersection) {
      const barycoord = new Vector3();
      Triangle.getBarycoord(_intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord);
      if (uv) {
        intersection.uv = Triangle.getInterpolatedAttribute(uv, a, b, c, barycoord, new Vector2());
      }
      if (uv1) {
        intersection.uv1 = Triangle.getInterpolatedAttribute(uv1, a, b, c, barycoord, new Vector2());
      }
      if (normal) {
        intersection.normal = Triangle.getInterpolatedAttribute(normal, a, b, c, barycoord, new Vector3());
        if (intersection.normal.dot(ray.direction) > 0) {
          intersection.normal.multiplyScalar(-1);
        }
      }
      const face = {
        a,
        b,
        c,
        normal: new Vector3(),
        materialIndex: 0
      };
      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
      intersection.face = face;
      intersection.barycoord = barycoord;
    }
    return intersection;
  }
  function cloneUniforms(src) {
    const dst = {};
    for (const u in src) {
      dst[u] = {};
      for (const p in src[u]) {
        const property = src[u][p];
        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
          if (property.isRenderTargetTexture) {
            console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
            dst[u][p] = null;
          } else {
            dst[u][p] = property.clone();
          }
        } else if (Array.isArray(property)) {
          dst[u][p] = property.slice();
        } else {
          dst[u][p] = property;
        }
      }
    }
    return dst;
  }
  function cloneUniformsGroups(src) {
    const dst = [];
    for (let u = 0; u < src.length; u++) {
      dst.push(src[u].clone());
    }
    return dst;
  }
  var default_vertex = "void main() {\\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}";
  var default_fragment = "void main() {\\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}";
  class ShaderMaterial extends Material {
    constructor(parameters) {
      super();
      this.isShaderMaterial = true;
      this.type = "ShaderMaterial";
      this.defines = {};
      this.uniforms = {};
      this.uniformsGroups = [];
      this.vertexShader = default_vertex;
      this.fragmentShader = default_fragment;
      this.linewidth = 1;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.fog = false;
      this.lights = false;
      this.clipping = false;
      this.forceSinglePass = true;
      this.extensions = {
        clipCullDistance: false,
        // set to use vertex shader clipping
        multiDraw: false
        // set to use vertex shader multi_draw / enable gl_DrawID
      };
      this.defaultAttributeValues = {
        "color": [1, 1, 1],
        "uv": [0, 0],
        "uv1": [0, 0]
      };
      this.index0AttributeName = void 0;
      this.uniformsNeedUpdate = false;
      this.glslVersion = null;
      if (parameters !== void 0) {
        this.setValues(parameters);
      }
    }
    copy(source) {
      super.copy(source);
      this.fragmentShader = source.fragmentShader;
      this.vertexShader = source.vertexShader;
      this.uniforms = cloneUniforms(source.uniforms);
      this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
      this.defines = Object.assign({}, source.defines);
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.fog = source.fog;
      this.lights = source.lights;
      this.clipping = source.clipping;
      this.extensions = Object.assign({}, source.extensions);
      this.glslVersion = source.glslVersion;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.glslVersion = this.glslVersion;
      data.uniforms = {};
      for (const name in this.uniforms) {
        const uniform = this.uniforms[name];
        const value = uniform.value;
        if (value && value.isTexture) {
          data.uniforms[name] = {
            type: "t",
            value: value.toJSON(meta).uuid
          };
        } else if (value && value.isColor) {
          data.uniforms[name] = {
            type: "c",
            value: value.getHex()
          };
        } else if (value && value.isVector2) {
          data.uniforms[name] = {
            type: "v2",
            value: value.toArray()
          };
        } else if (value && value.isVector3) {
          data.uniforms[name] = {
            type: "v3",
            value: value.toArray()
          };
        } else if (value && value.isVector4) {
          data.uniforms[name] = {
            type: "v4",
            value: value.toArray()
          };
        } else if (value && value.isMatrix3) {
          data.uniforms[name] = {
            type: "m3",
            value: value.toArray()
          };
        } else if (value && value.isMatrix4) {
          data.uniforms[name] = {
            type: "m4",
            value: value.toArray()
          };
        } else {
          data.uniforms[name] = {
            value
          };
        }
      }
      if (Object.keys(this.defines).length > 0) data.defines = this.defines;
      data.vertexShader = this.vertexShader;
      data.fragmentShader = this.fragmentShader;
      data.lights = this.lights;
      data.clipping = this.clipping;
      const extensions = {};
      for (const key in this.extensions) {
        if (this.extensions[key] === true) extensions[key] = true;
      }
      if (Object.keys(extensions).length > 0) data.extensions = extensions;
      return data;
    }
  }
  class Camera extends Object3D {
    constructor() {
      super();
      this.isCamera = true;
      this.type = "Camera";
      this.matrixWorldInverse = new Matrix4();
      this.projectionMatrix = new Matrix4();
      this.projectionMatrixInverse = new Matrix4();
      this.coordinateSystem = WebGLCoordinateSystem;
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.matrixWorldInverse.copy(source.matrixWorldInverse);
      this.projectionMatrix.copy(source.projectionMatrix);
      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
      this.coordinateSystem = source.coordinateSystem;
      return this;
    }
    getWorldDirection(target) {
      return super.getWorldDirection(target).negate();
    }
    updateMatrixWorld(force) {
      super.updateMatrixWorld(force);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents, updateChildren) {
      super.updateWorldMatrix(updateParents, updateChildren);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  class Scene extends Object3D {
    constructor() {
      super();
      this.isScene = true;
      this.type = "Scene";
      this.background = null;
      this.environment = null;
      this.fog = null;
      this.backgroundBlurriness = 0;
      this.backgroundIntensity = 1;
      this.backgroundRotation = new Euler();
      this.environmentIntensity = 1;
      this.environmentRotation = new Euler();
      this.overrideMaterial = null;
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
      }
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.background !== null) this.background = source.background.clone();
      if (source.environment !== null) this.environment = source.environment.clone();
      if (source.fog !== null) this.fog = source.fog.clone();
      this.backgroundBlurriness = source.backgroundBlurriness;
      this.backgroundIntensity = source.backgroundIntensity;
      this.backgroundRotation.copy(source.backgroundRotation);
      this.environmentIntensity = source.environmentIntensity;
      this.environmentRotation.copy(source.environmentRotation);
      if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      if (this.fog !== null) data.object.fog = this.fog.toJSON();
      if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;
      if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;
      data.object.backgroundRotation = this.backgroundRotation.toArray();
      if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;
      data.object.environmentRotation = this.environmentRotation.toArray();
      return data;
    }
  }
  class DataTexture extends Texture {
    constructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace) {
      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);
      this.isDataTexture = true;
      this.image = { data, width, height };
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
    }
  }
  class PlaneGeometry extends BufferGeometry {
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
      super();
      this.type = "PlaneGeometry";
      this.parameters = {
        width,
        height,
        widthSegments,
        heightSegments
      };
      const width_half = width / 2;
      const height_half = height / 2;
      const gridX = Math.floor(widthSegments);
      const gridY = Math.floor(heightSegments);
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      const segment_width = width / gridX;
      const segment_height = height / gridY;
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segment_height - height_half;
        for (let ix = 0; ix < gridX1; ix++) {
          const x2 = ix * segment_width - width_half;
          vertices.push(x2, -y, 0);
          normals.push(0, 0, 1);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = ix + gridX1 * iy;
          const b = ix + gridX1 * (iy + 1);
          const c = ix + 1 + gridX1 * (iy + 1);
          const d = ix + 1 + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
    }
  }
  class RawShaderMaterial extends ShaderMaterial {
    constructor(parameters) {
      super(parameters);
      this.isRawShaderMaterial = true;
      this.type = "RawShaderMaterial";
    }
  }
  class Matrix2 {
    constructor(n11, n12, n21, n22) {
      Matrix2.prototype.isMatrix2 = true;
      this.elements = [
        1,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n21, n22);
      }
    }
    identity() {
      this.set(
        1,
        0,
        0,
        1
      );
      return this;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 4; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    set(n11, n12, n21, n22) {
      const te = this.elements;
      te[0] = n11;
      te[2] = n12;
      te[1] = n21;
      te[3] = n22;
      return this;
    }
  }
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
      revision: REVISION
    } }));
  }
  if (typeof window !== "undefined") {
    if (window.__THREE__) {
      console.warn("WARNING: Multiple instances of Three.js being imported.");
    } else {
      window.__THREE__ = REVISION;
    }
  }
  const LN_SCALE_MIN = -9;
  const LN_SCALE_MAX = 9;
  const LN_RESCALE = (LN_SCALE_MAX - LN_SCALE_MIN) / 254;
  const SCALE_MIN = Math.exp(LN_SCALE_MIN);
  const SPLAT_TEX_WIDTH_BITS = 11;
  const SPLAT_TEX_HEIGHT_BITS = 11;
  const SPLAT_TEX_WIDTH = 1 << SPLAT_TEX_WIDTH_BITS;
  const SPLAT_TEX_HEIGHT = 1 << SPLAT_TEX_HEIGHT_BITS;
  const SPLAT_TEX_MIN_HEIGHT = 1;
  const WASM_SPLAT_SORT = true;
  function isIntType(type) {
    return type === "int" || type === "ivec2" || type === "ivec3" || type === "ivec4";
  }
  function isUintType(type) {
    return type === "uint" || type === "uvec2" || type === "uvec3" || type === "uvec4";
  }
  function isFloatType(type) {
    return type === "float" || type === "vec2" || type === "vec3" || type === "vec4";
  }
  function isMatFloatType(type) {
    return type === "mat2" || type === "mat2x2" || type === "mat2x3" || type === "mat2x4" || type === "mat3" || type === "mat3x2" || type === "mat3x3" || type === "mat3x4" || type === "mat4" || type === "mat4x2" || type === "mat4x3" || type === "mat4x4";
  }
  function isAllFloatType(type) {
    return isFloatType(type) || isMatFloatType(type);
  }
  function isMat2(type) {
    return type === "mat2" || type === "mat2x2";
  }
  function isMat3(type) {
    return type === "mat3" || type === "mat3x3";
  }
  function isMat4(type) {
    return type === "mat4" || type === "mat4x4";
  }
  function numberAsInt(value) {
    return Math.trunc(value).toString();
  }
  function numberAsUint(value) {
    const v = Math.max(0, Math.trunc(value));
    return \`\${v.toString()}u\`;
  }
  function numberAsFloat(value) {
    return value === Number.POSITIVE_INFINITY ? "INFINITY" : value === Number.NEGATIVE_INFINITY ? "-INFINITY" : Number.isInteger(value) ? value.toFixed(1) : value.toString();
  }
  function valType(val) {
    if (val instanceof DynoValue) {
      return val.type;
    }
    const value = val.dynoOut();
    return value.type;
  }
  class DynoValue {
    constructor(type) {
      this.__isDynoValue = true;
      this.type = type;
    }
  }
  class DynoOutput extends DynoValue {
    constructor(dyno2, key) {
      super(dyno2.outTypes[key]);
      this.dyno = dyno2;
      this.key = key;
    }
  }
  class DynoLiteral extends DynoValue {
    constructor(type, literal) {
      super(type);
      this.literal = literal;
    }
    getLiteral() {
      return this.literal;
    }
  }
  class DynoConst extends DynoLiteral {
    constructor(type, value) {
      super(type, "");
      this.value = value;
    }
    getLiteral() {
      const { type, value } = this;
      switch (type) {
        case "bool":
          return value ? "true" : "false";
        case "uint":
          return numberAsUint(value);
        case "int":
          return numberAsInt(value);
        case "float":
          return numberAsFloat(value);
        case "bvec2": {
          const v = value;
          return \`bvec2(\${v[0]}, \${v[1]})\`;
        }
        case "uvec2": {
          if (value instanceof Vector2) {
            return \`uvec2(\${numberAsUint(value.x)}, \${numberAsUint(value.y)})\`;
          }
          const v = value;
          return \`uvec2(\${numberAsUint(v[0])}, \${numberAsUint(v[1])})\`;
        }
        case "ivec2": {
          if (value instanceof Vector2) {
            return \`ivec2(\${numberAsInt(value.x)}, \${numberAsInt(value.y)})\`;
          }
          const v = value;
          return \`ivec2(\${numberAsInt(v[0])}, \${numberAsInt(v[1])})\`;
        }
        case "vec2": {
          if (value instanceof Vector2) {
            return \`vec2(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)})\`;
          }
          const v = value;
          return \`vec2(\${numberAsFloat(v[0])}, \${numberAsFloat(v[1])})\`;
        }
        case "bvec3": {
          const v = value;
          return \`bvec3(\${v[0]}, \${v[1]}, \${v[2]})\`;
        }
        case "uvec3": {
          if (value instanceof Vector3) {
            return \`uvec3(\${numberAsUint(value.x)}, \${numberAsUint(value.y)}, \${numberAsUint(value.z)})\`;
          }
          const v = value;
          return \`uvec3(\${numberAsUint(v[0])}, \${numberAsUint(v[1])}, \${numberAsUint(v[2])})\`;
        }
        case "ivec3": {
          if (value instanceof Vector3) {
            return \`ivec3(\${numberAsInt(value.x)}, \${numberAsInt(value.y)}, \${numberAsInt(value.z)})\`;
          }
          const v = value;
          return \`ivec3(\${numberAsInt(v[0])}, \${numberAsInt(v[1])}, \${numberAsInt(v[2])})\`;
        }
        case "vec3": {
          if (value instanceof Vector3) {
            return \`vec3(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)}, \${numberAsFloat(value.z)})\`;
          }
          const v = value;
          return \`vec3(\${numberAsFloat(v[0])}, \${numberAsFloat(v[1])}, \${numberAsFloat(v[2])})\`;
        }
        case "bvec4": {
          const v = value;
          return \`bvec4(\${v[0]}, \${v[1]}, \${v[2]}, \${v[3]})\`;
        }
        case "uvec4": {
          if (value instanceof Vector4) {
            return \`uvec4(\${numberAsUint(value.x)}, \${numberAsUint(value.y)}, \${numberAsUint(value.z)}, \${numberAsUint(value.w)})\`;
          }
          const v = value;
          return \`uvec4(\${numberAsUint(v[0])}, \${numberAsUint(v[1])}, \${numberAsUint(v[2])}, \${numberAsUint(v[3])})\`;
        }
        case "ivec4": {
          if (value instanceof Vector4) {
            return \`ivec4(\${numberAsInt(value.x)}, \${numberAsInt(value.y)}, \${numberAsInt(value.z)}, \${numberAsInt(value.w)})\`;
          }
          const v = value;
          return \`ivec4(\${numberAsInt(v[0])}, \${numberAsInt(v[1])}, \${numberAsInt(v[2])}, \${numberAsInt(v[3])})\`;
        }
        case "vec4": {
          if (value instanceof Vector4) {
            return \`vec4(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)}, \${numberAsFloat(value.z)}, \${numberAsFloat(value.w)})\`;
          }
          if (value instanceof Quaternion) {
            return \`vec4(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)}, \${numberAsFloat(value.z)}, \${numberAsFloat(value.w)})\`;
          }
          const v = value;
          return \`vec4(\${numberAsFloat(v[0])}, \${numberAsFloat(v[1])}, \${numberAsFloat(v[2])}, \${numberAsFloat(v[3])})\`;
        }
        case "mat2":
        case "mat2x2": {
          const m = value;
          const e = m instanceof Matrix2 ? m.elements : value;
          const arg = new Array(4).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat2x3": {
          const e = value;
          const arg = new Array(6).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat2x4": {
          const e = value;
          const arg = new Array(8).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat3":
        case "mat3x3": {
          const m = value;
          const e = m instanceof Matrix3 ? m.elements : value;
          const arg = new Array(9).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat3x2": {
          const e = value;
          const arg = new Array(6).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat3x4": {
          const e = value;
          const arg = new Array(12).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat4":
        case "mat4x4": {
          const m = value;
          const e = m instanceof Matrix4 ? m.elements : value;
          const arg = new Array(16).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat4x2": {
          const e = value;
          const arg = new Array(8).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat4x3": {
          const e = value;
          const arg = new Array(12).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        default:
          throw new Error(\`Type not implemented: \${String(type)}\`);
      }
    }
  }
  function dynoConst(type, value) {
    return new DynoConst(type, value);
  }
  const DEFAULT_INDENT = "    ";
  class Compilation {
    constructor({ indent } = {}) {
      this.globals = /* @__PURE__ */ new Set();
      this.statements = [];
      this.uniforms = {};
      this.declares = /* @__PURE__ */ new Set();
      this.updaters = [];
      this.sequence = 0;
      this.indent = DEFAULT_INDENT;
      this.indent = indent ?? DEFAULT_INDENT;
    }
    nextSequence() {
      return this.sequence++;
    }
  }
  class Dyno {
    constructor({
      inTypes,
      outTypes,
      inputs,
      update,
      globals,
      statements,
      generate
    }) {
      this.inTypes = inTypes ?? {};
      this.outTypes = outTypes ?? {};
      this.inputs = inputs ?? {};
      this.update = update;
      this.globals = globals;
      this.statements = statements;
      this.generate = generate ?? (({ inputs: inputs2, outputs, compile }) => {
        var _a2, _b2;
        return {
          globals: (_a2 = this.globals) == null ? void 0 : _a2.call(this, { inputs: inputs2, outputs, compile }),
          statements: (_b2 = this.statements) == null ? void 0 : _b2.call(this, { inputs: inputs2, outputs, compile })
        };
      });
    }
    get outputs() {
      const outputs = {};
      for (const key in this.outTypes) {
        outputs[key] = new DynoOutput(this, key);
      }
      return outputs;
    }
    apply(inputs) {
      Object.assign(this.inputs, inputs);
      return this.outputs;
    }
    compile({
      inputs,
      outputs,
      compile
    }) {
      const result = [
        \`// \${this.constructor.name}(\${Object.values(inputs).join(", ")}) => (\${Object.values(outputs).join(", ")})\`
      ];
      const declares = [];
      for (const key in outputs) {
        const name = outputs[key];
        if (name && !compile.declares.has(name)) {
          compile.declares.add(name);
          declares.push(key);
        }
      }
      const { globals, statements, uniforms } = this.generate({
        inputs,
        outputs,
        compile
      });
      for (const global of globals ?? []) {
        compile.globals.add(global);
      }
      for (const key in uniforms) {
        compile.uniforms[key] = uniforms[key];
      }
      if (this.update) {
        compile.updaters.push(this.update);
      }
      for (const key of declares) {
        const name = outputs[key];
        if (name) {
          if (!compile.uniforms[name]) {
            result.push(\`\${dynoDeclare(name, this.outTypes[key])};\`);
          }
        }
      }
      if (statements == null ? void 0 : statements.length) {
        result.push("{");
        result.push(...statements.map((line) => compile.indent + line));
        result.push("}");
      }
      return result;
    }
  }
  class DynoBlock extends Dyno {
    constructor({
      inTypes,
      outTypes,
      inputs,
      update,
      globals,
      construct
    }) {
      super({
        inTypes,
        outTypes,
        inputs,
        update,
        globals,
        generate: (args) => this.generateBlock(args)
      });
      this.construct = construct;
    }
    generateBlock({
      inputs,
      outputs,
      compile
    }) {
      var _a2, _b2;
      const blockInputs = {};
      const blockOutputs = {};
      for (const key in inputs) {
        if (inputs[key] != null) {
          blockInputs[key] = new DynoLiteral(this.inTypes[key], inputs[key]);
        }
      }
      for (const key in outputs) {
        if (outputs[key] != null) {
          blockOutputs[key] = new DynoValue(this.outTypes[key]);
        }
      }
      const options = { roots: [] };
      const returned = this.construct(blockInputs, blockOutputs, options);
      for (const global of ((_a2 = this.globals) == null ? void 0 : _a2.call(this, { inputs, outputs, compile })) ?? []) {
        compile.globals.add(global);
      }
      const ordering = [];
      const nodeOuts = /* @__PURE__ */ new Map();
      function visit(node, outKey, outName) {
        let outs = nodeOuts.get(node);
        if (!outs) {
          outs = {
            sequence: compile.nextSequence(),
            outNames: /* @__PURE__ */ new Map(),
            newOuts: /* @__PURE__ */ new Set()
          };
          nodeOuts.set(node, outs);
          for (const key in node.inputs) {
            let input = node.inputs[key];
            while (input) {
              if (input instanceof DynoValue) {
                if (input instanceof DynoOutput) {
                  visit(input.dyno, input.key);
                }
                break;
              }
              input = input.dynoOut();
            }
          }
          ordering.push(node);
        }
        if (outKey) {
          if (!outName) {
            outs.newOuts.add(outKey);
          }
          outs.outNames.set(outKey, outName ?? \`\${outKey}_\${outs.sequence}\`);
        }
      }
      for (const root of options.roots) {
        visit(root);
      }
      for (const key in blockOutputs) {
        let value = (returned == null ? void 0 : returned[key]) ?? blockOutputs[key];
        while (value) {
          if (value instanceof DynoValue) {
            if (value instanceof DynoOutput) {
              visit(value.dyno, value.key, outputs[key]);
            }
            break;
          }
          value = value.dynoOut();
        }
        blockOutputs[key] = value;
      }
      const steps = [];
      for (const dyno2 of ordering) {
        const inputs2 = {};
        const outputs2 = {};
        for (const key in dyno2.inputs) {
          let value = dyno2.inputs[key];
          while (value) {
            if (value instanceof DynoValue) {
              if (value instanceof DynoLiteral) {
                inputs2[key] = value.getLiteral();
              } else if (value instanceof DynoOutput) {
                const source = (_b2 = nodeOuts.get(value.dyno)) == null ? void 0 : _b2.outNames.get(value.key);
                if (!source) {
                  throw new Error(
                    \`Source not found for \${value.dyno.constructor.name}.\${value.key}\`
                  );
                }
                inputs2[key] = source;
              }
              break;
            }
            value = value.dynoOut();
          }
        }
        const outs = nodeOuts.get(dyno2) ?? { outNames: /* @__PURE__ */ new Map() };
        for (const [key, name] of outs.outNames.entries()) {
          outputs2[key] = name;
        }
        const newSteps = dyno2.compile({ inputs: inputs2, outputs: outputs2, compile });
        steps.push(newSteps);
      }
      const literalOutputs = [];
      for (const key in outputs) {
        if (blockOutputs[key] instanceof DynoLiteral) {
          literalOutputs.push(
            \`\${outputs[key]} = \${blockOutputs[key].getLiteral()};\`
          );
        }
      }
      if (literalOutputs.length > 0) {
        steps.push(literalOutputs);
      }
      const statements = steps.flatMap((step, index) => {
        return index === 0 ? step : ["", ...step];
      });
      return { statements };
    }
  }
  function dynoBlock(inTypes, outTypes, construct, { update, globals } = {}) {
    return new DynoBlock({ inTypes, outTypes, construct, update, globals });
  }
  function dyno({
    inTypes,
    outTypes,
    inputs,
    update,
    globals,
    statements,
    generate
  }) {
    return new Dyno({
      inTypes,
      outTypes,
      inputs,
      update,
      globals,
      statements,
      generate
    });
  }
  function dynoDeclare(name, type, count) {
    const typeStr = typeof type === "string" ? type : type.type;
    if (!typeStr) {
      throw new Error(\`Invalid DynoType: \${String(type)}\`);
    }
    return \`\${typeStr} \${name}\${count != null ? \`[\${count}]\` : ""}\`;
  }
  function unindentLines(s) {
    var _a2;
    let seenNonEmpty = false;
    const lines = s.split("\\n").map((line) => {
      const trimmedLine = line.trimEnd();
      if (seenNonEmpty) {
        return trimmedLine;
      }
      if (trimmedLine.length > 0) {
        seenNonEmpty = true;
        return trimmedLine;
      }
      return null;
    }).filter((line) => line != null);
    while (lines.length > 0 && lines[lines.length - 1].length === 0) {
      lines.pop();
    }
    if (lines.length === 0) {
      return [];
    }
    const indent = (_a2 = lines[0].match(/^\\s*/)) == null ? void 0 : _a2[0];
    if (!indent) {
      return lines;
    }
    const regex = new RegExp(\`^\${indent}\`);
    return lines.map((line) => line.replace(regex, ""));
  }
  function unindent(s) {
    return unindentLines(s).join("\\n");
  }
  class UnaryOp extends Dyno {
    constructor({
      a,
      outKey,
      outTypeFunc
    }) {
      const inTypes = { a: valType(a) };
      const outType = outTypeFunc(valType(a));
      const outTypes = { [outKey]: outType };
      super({ inTypes, outTypes, inputs: { a } });
      this.outKey = outKey;
    }
    dynoOut() {
      return new DynoOutput(this, this.outKey);
    }
  }
  class BinaryOp extends Dyno {
    constructor({
      a,
      b,
      outKey,
      outTypeFunc
    }) {
      const inTypes = { a: valType(a), b: valType(b) };
      const outType = outTypeFunc(valType(a), valType(b));
      const outTypes = { [outKey]: outType };
      super({ inTypes, outTypes, inputs: { a, b } });
      this.outKey = outKey;
    }
    dynoOut() {
      return new DynoOutput(this, this.outKey);
    }
  }
  const f32buffer = new Float32Array(1);
  const u32buffer = new Uint32Array(f32buffer.buffer);
  function toHalf(f) {
    f32buffer[0] = f;
    const bits2 = u32buffer[0];
    const sign = bits2 >> 31 & 1;
    const exp = bits2 >> 23 & 255;
    const frac = bits2 & 8388607;
    const halfSign = sign << 15;
    if (exp === 255) {
      if (frac !== 0) {
        return halfSign | 32767;
      }
      return halfSign | 31744;
    }
    const newExp = exp - 127 + 15;
    if (newExp >= 31) {
      return halfSign | 31744;
    }
    if (newExp <= 0) {
      if (newExp < -10) {
        return halfSign;
      }
      const subFrac = (frac | 8388608) >> 1 - newExp + 13;
      return halfSign | subFrac;
    }
    const halfFrac = frac >> 13;
    return halfSign | newExp << 10 | halfFrac;
  }
  function fromHalf(h) {
    const sign = h >> 15 & 1;
    const exp = h >> 10 & 31;
    const frac = h & 1023;
    let f32bits;
    if (exp === 0) {
      if (frac === 0) {
        f32bits = sign << 31;
      } else {
        let mant = frac;
        let e = -14;
        while ((mant & 1024) === 0) {
          mant <<= 1;
          e--;
        }
        mant &= 1023;
        const newExp = e + 127;
        const newFrac = mant << 13;
        f32bits = sign << 31 | newExp << 23 | newFrac;
      }
    } else if (exp === 31) {
      if (frac === 0) {
        f32bits = sign << 31 | 2139095040;
      } else {
        f32bits = sign << 31 | 2143289344;
      }
    } else {
      const newExp = exp - 15 + 127;
      const newFrac = frac << 13;
      f32bits = sign << 31 | newExp << 23 | newFrac;
    }
    u32buffer[0] = f32bits;
    return f32buffer[0];
  }
  function floatToUint8(v) {
    return Math.max(0, Math.min(255, Math.round(v * 255)));
  }
  function getArrayBuffers(ctx) {
    const buffers = [];
    const seen = /* @__PURE__ */ new Set();
    function traverse(obj) {
      if (obj && typeof obj === "object" && !seen.has(obj)) {
        seen.add(obj);
        if (obj instanceof ArrayBuffer) {
          buffers.push(obj);
        } else if (ArrayBuffer.isView(obj)) {
          buffers.push(obj.buffer);
        } else if (Array.isArray(obj)) {
          obj.forEach(traverse);
        } else {
          Object.values(obj).forEach(traverse);
        }
      }
    }
    traverse(ctx);
    return buffers;
  }
  function setPackedSplat(packedSplats, index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) {
    const uR = floatToUint8(r);
    const uG = floatToUint8(g);
    const uB = floatToUint8(b);
    const uA = floatToUint8(opacity);
    const uQuat = encodeQuatOctXy88R8(
      new Quaternion(quatX, quatY, quatZ, quatW)
    );
    const uQuatX = uQuat & 255;
    const uQuatY = uQuat >>> 8 & 255;
    const uQuatZ = uQuat >>> 16 & 255;
    const uScaleX = scaleX === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleX) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleY = scaleY === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleY) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleZ = scaleZ === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleZ) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uCenterX = toHalf(x2);
    const uCenterY = toHalf(y);
    const uCenterZ = toHalf(z);
    const i4 = index * 4;
    packedSplats[i4] = uR | uG << 8 | uB << 16 | uA << 24;
    packedSplats[i4 + 1] = uCenterX | uCenterY << 16;
    packedSplats[i4 + 2] = uCenterZ | uQuatX << 16 | uQuatY << 24;
    packedSplats[i4 + 3] = uScaleX | uScaleY << 8 | uScaleZ << 16 | uQuatZ << 24;
  }
  function setPackedSplatCenter(packedSplats, index, x2, y, z) {
    const uCenterX = toHalf(x2);
    const uCenterY = toHalf(y);
    const uCenterZ = toHalf(z);
    const i4 = index * 4;
    packedSplats[i4 + 1] = uCenterX | uCenterY << 16;
    packedSplats[i4 + 2] = uCenterZ | packedSplats[i4 + 2] & 4294901760;
  }
  function setPackedSplatScales(packedSplats, index, scaleX, scaleY, scaleZ) {
    const uScaleX = scaleX === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleX) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleY = scaleY === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleY) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleZ = scaleZ === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleZ) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const i4 = index * 4;
    packedSplats[i4 + 3] = uScaleX | uScaleY << 8 | uScaleZ << 16 | packedSplats[i4 + 3] & 4278190080;
  }
  function setPackedSplatQuat(packedSplats, index, quatX, quatY, quatZ, quatW) {
    const uQuat = encodeQuatOctXy88R8(
      new Quaternion(quatX, quatY, quatZ, quatW)
    );
    const uQuatX = uQuat & 255;
    const uQuatY = uQuat >>> 8 & 255;
    const uQuatZ = uQuat >>> 16 & 255;
    const i4 = index * 4;
    packedSplats[i4 + 2] = packedSplats[i4 + 2] & 65535 | uQuatX << 16 | uQuatY << 24;
    packedSplats[i4 + 3] = packedSplats[i4 + 3] & 16777215 | uQuatZ << 24;
  }
  function setPackedSplatRgb(packedSplats, index, r, g, b) {
    const uR = floatToUint8(r);
    const uG = floatToUint8(g);
    const uB = floatToUint8(b);
    const i4 = index * 4;
    packedSplats[i4] = uR | uG << 8 | uB << 16 | packedSplats[i4] & 4278190080;
  }
  function setPackedSplatOpacity(packedSplats, index, opacity) {
    const uA = floatToUint8(opacity);
    const i4 = index * 4;
    packedSplats[i4] = packedSplats[i4] & 16777215 | uA << 24;
  }
  const packedCenter = new Vector3();
  const packedScales = new Vector3();
  const packedQuaternion = new Quaternion();
  const packedColor = new Color();
  const packedFields = {
    center: packedCenter,
    scales: packedScales,
    quaternion: packedQuaternion,
    color: packedColor,
    opacity: 0
  };
  function unpackSplat(packedSplats, index) {
    const result = packedFields;
    const i4 = index * 4;
    const word0 = packedSplats[i4];
    const word1 = packedSplats[i4 + 1];
    const word2 = packedSplats[i4 + 2];
    const word3 = packedSplats[i4 + 3];
    result.color.set(
      (word0 & 255) / 255,
      (word0 >>> 8 & 255) / 255,
      (word0 >>> 16 & 255) / 255
    );
    result.opacity = (word0 >>> 24 & 255) / 255;
    result.center.set(
      fromHalf(word1 & 65535),
      fromHalf(word1 >>> 16 & 65535),
      fromHalf(word2 & 65535)
    );
    const uScalesX = word3 & 255;
    result.scales.x = uScalesX === 0 ? 0 : Math.exp(LN_SCALE_MIN + (uScalesX - 1) * LN_RESCALE);
    const uScalesY = word3 >>> 8 & 255;
    result.scales.y = uScalesY === 0 ? 0 : Math.exp(LN_SCALE_MIN + (uScalesY - 1) * LN_RESCALE);
    const uScalesZ = word3 >>> 16 & 255;
    result.scales.z = uScalesZ === 0 ? 0 : Math.exp(LN_SCALE_MIN + (uScalesZ - 1) * LN_RESCALE);
    const uQuat = word2 >>> 16 & 65535 | word3 >>> 8 & 16711680;
    decodeQuatOctXy88R8(uQuat, result.quaternion);
    return result;
  }
  function getTextureSize(numSplats) {
    const width = SPLAT_TEX_WIDTH;
    const height = Math.max(
      SPLAT_TEX_MIN_HEIGHT,
      Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats / width))
    );
    const depth = Math.ceil(numSplats / (width * height));
    const maxSplats = width * height * depth;
    return { width, height, depth, maxSplats };
  }
  function computeMaxSplats(numSplats) {
    const width = SPLAT_TEX_WIDTH;
    const height = Math.max(
      SPLAT_TEX_MIN_HEIGHT,
      Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats / width))
    );
    const depth = Math.ceil(numSplats / (width * height));
    return width * height * depth;
  }
  const IDENT_VERTEX_SHADER = unindent(\`
  precision highp float;

  in vec3 position;

  void main() {
    gl_Position = vec4(position.xy, 0.0, 1.0);
  }
\`);
  function encodeQuatOctXy88R8(q) {
    const qnorm = q.clone().normalize();
    if (qnorm.w < 0) {
      qnorm.set(-qnorm.x, -qnorm.y, -qnorm.z, -qnorm.w);
    }
    const theta = 2 * Math.acos(qnorm.w);
    const xyz_norm = Math.sqrt(
      qnorm.x * qnorm.x + qnorm.y * qnorm.y + qnorm.z * qnorm.z
    );
    const axis = xyz_norm < 1e-6 ? new Vector3(1, 0, 0) : new Vector3(qnorm.x, qnorm.y, qnorm.z).divideScalar(xyz_norm);
    const sum = Math.abs(axis.x) + Math.abs(axis.y) + Math.abs(axis.z);
    let p_x = axis.x / sum;
    let p_y = axis.y / sum;
    if (axis.z < 0) {
      const tmp = p_x;
      p_x = (1 - Math.abs(p_y)) * (p_x >= 0 ? 1 : -1);
      p_y = (1 - Math.abs(tmp)) * (p_y >= 0 ? 1 : -1);
    }
    const u_f = p_x * 0.5 + 0.5;
    const v_f = p_y * 0.5 + 0.5;
    const quantU = Math.round(u_f * 255);
    const quantV = Math.round(v_f * 255);
    const angleInt = Math.round(theta * (255 / Math.PI));
    return angleInt << 16 | quantV << 8 | quantU;
  }
  function decodeQuatOctXy88R8(encoded, out) {
    const quantU = encoded & 255;
    const quantV = encoded >>> 8 & 255;
    const angleInt = encoded >>> 16 & 255;
    const u_f = quantU / 255;
    const v_f = quantV / 255;
    let f_x = (u_f - 0.5) * 2;
    let f_y = (v_f - 0.5) * 2;
    const f_z = 1 - (Math.abs(f_x) + Math.abs(f_y));
    const t = Math.max(-f_z, 0);
    f_x += f_x >= 0 ? -t : t;
    f_y += f_y >= 0 ? -t : t;
    const axis = new Vector3(f_x, f_y, f_z).normalize();
    const theta = angleInt / 255 * Math.PI;
    const halfTheta = theta * 0.5;
    const s = Math.sin(halfTheta);
    const w = Math.cos(halfTheta);
    out.set(axis.x * s, axis.y * s, axis.z * s, w);
    return out;
  }
  function packSint8Bytes(b0, b1, b2, b3) {
    const clampedB0 = Math.max(-127, Math.min(127, b0 * 127));
    const clampedB1 = Math.max(-127, Math.min(127, b1 * 127));
    const clampedB2 = Math.max(-127, Math.min(127, b2 * 127));
    const clampedB3 = Math.max(-127, Math.min(127, b3 * 127));
    return clampedB0 & 255 | (clampedB1 & 255) << 8 | (clampedB2 & 255) << 16 | (clampedB3 & 255) << 24;
  }
  function encodeSh1Rgb(sh1Array, index, sh1Rgb) {
    const base = index * 2;
    for (let i2 = 0; i2 < 9; ++i2) {
      const value = Math.max(-63, Math.min(63, sh1Rgb[i2] * 63)) & 127;
      const bitStart = i2 * 7;
      const bitEnd = bitStart + 7;
      const wordStart = Math.floor(bitStart / 32);
      const bitOffset = bitStart - wordStart * 32;
      const firstWord = value << bitOffset & 4294967295;
      sh1Array[base + wordStart] |= firstWord;
      if (bitEnd > wordStart * 32 + 32) {
        const secondWord = value >>> 32 - bitOffset & 4294967295;
        sh1Array[base + wordStart + 1] |= secondWord;
      }
    }
  }
  function encodeSh2Rgb(sh2Array, index, sh2Rgb) {
    sh2Array[index * 4 + 0] = packSint8Bytes(
      sh2Rgb[0],
      sh2Rgb[1],
      sh2Rgb[2],
      sh2Rgb[3]
    );
    sh2Array[index * 4 + 1] = packSint8Bytes(
      sh2Rgb[4],
      sh2Rgb[5],
      sh2Rgb[6],
      sh2Rgb[7]
    );
    sh2Array[index * 4 + 2] = packSint8Bytes(
      sh2Rgb[8],
      sh2Rgb[9],
      sh2Rgb[10],
      sh2Rgb[11]
    );
    sh2Array[index * 4 + 3] = packSint8Bytes(
      sh2Rgb[12],
      sh2Rgb[13],
      sh2Rgb[14],
      0
    );
  }
  function encodeSh3Rgb(sh3Array, index, sh3Rgb) {
    const base = index * 4;
    for (let i2 = 0; i2 < 21; ++i2) {
      const value = Math.max(-31, Math.min(31, sh3Rgb[i2] * 31)) & 63;
      const bitStart = i2 * 6;
      const bitEnd = bitStart + 6;
      const wordStart = Math.floor(bitStart / 32);
      const bitOffset = bitStart - wordStart * 32;
      const firstWord = value << bitOffset & 4294967295;
      sh3Array[base + wordStart] |= firstWord;
      if (bitEnd > wordStart * 32 + 32) {
        const secondWord = value >>> 32 - bitOffset & 4294967295;
        sh3Array[base + wordStart + 1] |= secondWord;
      }
    }
  }
  function decompressPartialGzip(fileBytes, numBytes) {
    const chunks = [];
    let totalBytes = 0;
    let result = null;
    const gunzip = new Gunzip((data, final) => {
      chunks.push(data);
      totalBytes += data.length;
      if (final || totalBytes >= numBytes) {
        const allBytes = new Uint8Array(totalBytes);
        let offset2 = 0;
        for (const chunk of chunks) {
          allBytes.set(chunk, offset2);
          offset2 += chunk.length;
        }
        result = allBytes.slice(0, numBytes);
      }
    });
    const CHUNK_SIZE = 1024;
    let offset = 0;
    while (result == null && offset < fileBytes.length) {
      const chunk = fileBytes.slice(offset, offset + CHUNK_SIZE);
      gunzip.push(chunk, false);
      offset += CHUNK_SIZE;
    }
    if (result == null) {
      gunzip.push(new Uint8Array(), true);
      if (result == null) {
        throw new Error("Failed to decompress partial gzip");
      }
    }
    return result;
  }
  class GunzipReader {
    constructor({
      fileBytes,
      chunkBytes = 64 * 1024
    }) {
      this.fileBytes = fileBytes;
      this.chunkBytes = chunkBytes;
      this.offset = 0;
      this.chunks = [];
      this.totalBytes = 0;
      this.gunzip = new Gunzip((chunk, _final) => {
        this.chunks.push(chunk);
        this.totalBytes += chunk.length;
      });
    }
    read(numBytes) {
      while (this.totalBytes < numBytes && this.offset < this.fileBytes.length) {
        const end = Math.min(
          this.offset + this.chunkBytes,
          this.fileBytes.length
        );
        this.gunzip.push(this.fileBytes.subarray(this.offset, end), false);
        this.offset = end;
      }
      if (this.totalBytes < numBytes && this.offset >= this.fileBytes.length) {
        this.gunzip.push(new Uint8Array(0), true);
      }
      if (this.totalBytes < numBytes) {
        throw new Error(
          \`Unexpected EOF: needed \${numBytes}, got \${this.totalBytes}\`
        );
      }
      const allBytes = new Uint8Array(this.totalBytes);
      let outOffset = 0;
      for (const chunk of this.chunks) {
        allBytes.set(chunk, outOffset);
        outOffset += chunk.length;
      }
      const result = allBytes.subarray(0, numBytes);
      this.chunks = [allBytes.subarray(numBytes)];
      this.totalBytes -= numBytes;
      return result;
    }
  }
  function decodeAntiSplat(fileBytes, initNumSplats, splatCallback) {
    const numSplats = Math.floor(fileBytes.length / 32);
    if (numSplats * 32 !== fileBytes.length) {
      throw new Error("Invalid .splat file size");
    }
    initNumSplats(numSplats);
    const f32 = new Float32Array(fileBytes.buffer);
    for (let i2 = 0; i2 < numSplats; ++i2) {
      const i322 = i2 * 32;
      const i8 = i2 * 8;
      const x2 = f32[i8 + 0];
      const y = f32[i8 + 1];
      const z = f32[i8 + 2];
      const scaleX = f32[i8 + 3];
      const scaleY = f32[i8 + 4];
      const scaleZ = f32[i8 + 5];
      const r = fileBytes[i322 + 24] / 255;
      const g = fileBytes[i322 + 25] / 255;
      const b = fileBytes[i322 + 26] / 255;
      const opacity = fileBytes[i322 + 27] / 255;
      const quatW = (fileBytes[i322 + 28] - 128) / 128;
      const quatX = (fileBytes[i322 + 29] - 128) / 128;
      const quatY = (fileBytes[i322 + 30] - 128) / 128;
      const quatZ = (fileBytes[i322 + 31] - 128) / 128;
      splatCallback(
        i2,
        x2,
        y,
        z,
        scaleX,
        scaleY,
        scaleZ,
        quatX,
        quatY,
        quatZ,
        quatW,
        opacity,
        r,
        g,
        b
      );
    }
  }
  function unpackAntiSplat(fileBytes) {
    let numSplats = 0;
    let maxSplats = 0;
    let packedArray = new Uint32Array(0);
    decodeAntiSplat(
      fileBytes,
      (cbNumSplats) => {
        numSplats = cbNumSplats;
        maxSplats = computeMaxSplats(numSplats);
        packedArray = new Uint32Array(maxSplats * 4);
      },
      (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
        setPackedSplat(
          packedArray,
          index,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
      }
    );
    return { packedArray, numSplats };
  }
  const KSPLAT_COMPRESSION = {
    0: {
      bytesPerCenter: 12,
      bytesPerScale: 12,
      bytesPerRotation: 16,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 4,
      scaleOffsetBytes: 12,
      rotationOffsetBytes: 24,
      colorOffsetBytes: 40,
      sphericalHarmonicsOffsetBytes: 44,
      scaleRange: 1
    },
    1: {
      bytesPerCenter: 6,
      bytesPerScale: 6,
      bytesPerRotation: 8,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 2,
      scaleOffsetBytes: 6,
      rotationOffsetBytes: 12,
      colorOffsetBytes: 20,
      sphericalHarmonicsOffsetBytes: 24,
      scaleRange: 32767
    },
    2: {
      bytesPerCenter: 6,
      bytesPerScale: 6,
      bytesPerRotation: 8,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 1,
      scaleOffsetBytes: 6,
      rotationOffsetBytes: 12,
      colorOffsetBytes: 20,
      sphericalHarmonicsOffsetBytes: 24,
      scaleRange: 32767
    }
  };
  const KSPLAT_SH_DEGREE_TO_COMPONENTS = {
    0: 0,
    1: 9,
    2: 24,
    3: 45
  };
  function decodeKsplat(fileBytes, initNumSplats, splatCallback, shCallback) {
    var _a2;
    const HEADER_BYTES = 4096;
    const SECTION_BYTES = 1024;
    let headerOffset = 0;
    const header = new DataView(fileBytes.buffer, headerOffset, HEADER_BYTES);
    headerOffset += HEADER_BYTES;
    const versionMajor = header.getUint8(0);
    const versionMinor = header.getUint8(1);
    if (versionMajor !== 0 || versionMinor < 1) {
      throw new Error(
        \`Unsupported .ksplat version: \${versionMajor}.\${versionMinor}\`
      );
    }
    const maxSectionCount = header.getUint32(4, true);
    header.getUint32(16, true);
    const compressionLevel = header.getUint16(20, true);
    if (compressionLevel < 0 || compressionLevel > 2) {
      throw new Error(\`Invalid .ksplat compression level: \${compressionLevel}\`);
    }
    header.getFloat32(36, true) || -1.5;
    header.getFloat32(40, true) || 1.5;
    let sectionBase = HEADER_BYTES + maxSectionCount * SECTION_BYTES;
    for (let section = 0; section < maxSectionCount; ++section) {
      const section2 = new DataView(fileBytes.buffer, headerOffset, SECTION_BYTES);
      headerOffset += SECTION_BYTES;
      const sectionSplatCount = section2.getUint32(0, true);
      const sectionMaxSplatCount = section2.getUint32(4, true);
      const bucketSize = section2.getUint32(8, true);
      const bucketCount = section2.getUint32(12, true);
      const bucketBlockSize = section2.getFloat32(16, true);
      const bucketStorageSizeBytes = section2.getUint16(20, true);
      const compressionScaleRange = (section2.getUint32(24, true) || ((_a2 = KSPLAT_COMPRESSION[compressionLevel]) == null ? void 0 : _a2.scaleRange)) ?? 1;
      const partiallyFilledBucketCount = section2.getUint32(36, true);
      const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;
      const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;
      const sphericalHarmonicsDegree = section2.getUint16(40, true);
      const shComponents = KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];
      const {
        bytesPerCenter,
        bytesPerScale,
        bytesPerRotation,
        bytesPerColor,
        bytesPerSphericalHarmonicsComponent,
        scaleOffsetBytes,
        rotationOffsetBytes,
        colorOffsetBytes,
        sphericalHarmonicsOffsetBytes
      } = KSPLAT_COMPRESSION[compressionLevel];
      const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor + shComponents * bytesPerSphericalHarmonicsComponent;
      const splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;
      const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;
      const sh1 = sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : void 0;
      const sh2 = sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : void 0;
      const sh3 = sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * 3) : void 0;
      const compressionScaleFactor = bucketBlockSize / 2 / compressionScaleRange;
      const bucketsBase = sectionBase + bucketsMetaDataSizeBytes;
      const dataBase = sectionBase + bucketsStorageSizeBytes;
      const data = new DataView(
        fileBytes.buffer,
        dataBase,
        splatDataStorageSizeBytes
      );
      const bucketArray = new Float32Array(
        fileBytes.buffer,
        bucketsBase,
        bucketCount * 3
      );
      for (let i2 = 0; i2 < sectionSplatCount; ++i2) {
        const splatOffset = i2 * bytesPerSplat;
        const bucketIndex = Math.floor(i2 / bucketSize);
        const x2 = compressionLevel === 0 ? data.getFloat32(splatOffset + 0, true) : (data.getUint16(splatOffset + 0, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 0];
        const y = compressionLevel === 0 ? data.getFloat32(splatOffset + 4, true) : (data.getUint16(splatOffset + 2, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 1];
        const z = compressionLevel === 0 ? data.getFloat32(splatOffset + 8, true) : (data.getUint16(splatOffset + 4, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 2];
        const scaleX = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 0, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 0, true));
        const scaleY = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));
        const scaleZ = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 8, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 4, true));
        const quatW = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 0, true)
        );
        const quatX = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 4, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 2, true)
        );
        const quatY = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 8, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 4, true)
        );
        const quatZ = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 12, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 6, true)
        );
        const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / 255;
        const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / 255;
        const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / 255;
        const opacity = data.getUint8(splatOffset + colorOffsetBytes + 3) / 255;
        splatCallback(
          i2,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
        if (sphericalHarmonicsDegree >= 1 && sh1) {
          shCallback == null ? void 0 : shCallback(i2, sh1, sh2, sh3);
        }
      }
      sectionBase += storageSizeBytes;
    }
  }
  function unpackKsplat(fileBytes) {
    var _a2;
    const HEADER_BYTES = 4096;
    const SECTION_BYTES = 1024;
    let headerOffset = 0;
    const header = new DataView(fileBytes.buffer, headerOffset, HEADER_BYTES);
    headerOffset += HEADER_BYTES;
    const versionMajor = header.getUint8(0);
    const versionMinor = header.getUint8(1);
    if (versionMajor !== 0 || versionMinor < 1) {
      throw new Error(
        \`Unsupported .ksplat version: \${versionMajor}.\${versionMinor}\`
      );
    }
    const maxSectionCount = header.getUint32(4, true);
    const splatCount = header.getUint32(16, true);
    const compressionLevel = header.getUint16(20, true);
    if (compressionLevel < 0 || compressionLevel > 2) {
      throw new Error(\`Invalid .ksplat compression level: \${compressionLevel}\`);
    }
    const minSphericalHarmonicsCoeff = header.getFloat32(36, true) || -1.5;
    const maxSphericalHarmonicsCoeff = header.getFloat32(40, true) || 1.5;
    const numSplats = splatCount;
    const maxSplats = computeMaxSplats(numSplats);
    const packedArray = new Uint32Array(maxSplats * 4);
    const extra = {};
    let sectionBase = HEADER_BYTES + maxSectionCount * SECTION_BYTES;
    for (let section = 0; section < maxSectionCount; ++section) {
      let getSh = function(splatOffset, component) {
        if (compressionLevel === 0) {
          return data.getFloat32(
            splatOffset + sphericalHarmonicsOffsetBytes + component * 4,
            true
          );
        }
        if (compressionLevel === 1) {
          return fromHalf(
            data.getUint16(
              splatOffset + sphericalHarmonicsOffsetBytes + component * 2,
              true
            )
          );
        }
        const t = data.getUint8(splatOffset + sphericalHarmonicsOffsetBytes + component) / 255;
        return minSphericalHarmonicsCoeff + t * (maxSphericalHarmonicsCoeff - minSphericalHarmonicsCoeff);
      };
      const section2 = new DataView(fileBytes.buffer, headerOffset, SECTION_BYTES);
      headerOffset += SECTION_BYTES;
      const sectionSplatCount = section2.getUint32(0, true);
      const sectionMaxSplatCount = section2.getUint32(4, true);
      const bucketSize = section2.getUint32(8, true);
      const bucketCount = section2.getUint32(12, true);
      const bucketBlockSize = section2.getFloat32(16, true);
      const bucketStorageSizeBytes = section2.getUint16(20, true);
      const compressionScaleRange = (section2.getUint32(24, true) || ((_a2 = KSPLAT_COMPRESSION[compressionLevel]) == null ? void 0 : _a2.scaleRange)) ?? 1;
      const partiallyFilledBucketCount = section2.getUint32(36, true);
      const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;
      const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;
      const sphericalHarmonicsDegree = section2.getUint16(40, true);
      const shComponents = KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];
      const {
        bytesPerCenter,
        bytesPerScale,
        bytesPerRotation,
        bytesPerColor,
        bytesPerSphericalHarmonicsComponent,
        scaleOffsetBytes,
        rotationOffsetBytes,
        colorOffsetBytes,
        sphericalHarmonicsOffsetBytes
      } = KSPLAT_COMPRESSION[compressionLevel];
      const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor + shComponents * bytesPerSphericalHarmonicsComponent;
      const splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;
      const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;
      const sh1Index = [0, 3, 6, 1, 4, 7, 2, 5, 8];
      const sh2Index = [
        9,
        14,
        19,
        10,
        15,
        20,
        11,
        16,
        21,
        12,
        17,
        22,
        13,
        18,
        23
      ];
      const sh3Index = [
        24,
        31,
        38,
        25,
        32,
        39,
        26,
        33,
        40,
        27,
        34,
        41,
        28,
        35,
        42,
        29,
        36,
        43,
        30,
        37,
        44
      ];
      const sh1 = sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : void 0;
      const sh2 = sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : void 0;
      const sh3 = sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * 3) : void 0;
      const compressionScaleFactor = bucketBlockSize / 2 / compressionScaleRange;
      const bucketsBase = sectionBase + bucketsMetaDataSizeBytes;
      const dataBase = sectionBase + bucketsStorageSizeBytes;
      const data = new DataView(
        fileBytes.buffer,
        dataBase,
        splatDataStorageSizeBytes
      );
      const bucketArray = new Float32Array(
        fileBytes.buffer,
        bucketsBase,
        bucketCount * 3
      );
      for (let i2 = 0; i2 < sectionSplatCount; ++i2) {
        const splatOffset = i2 * bytesPerSplat;
        const bucketIndex = Math.floor(i2 / bucketSize);
        const x2 = compressionLevel === 0 ? data.getFloat32(splatOffset + 0, true) : (data.getUint16(splatOffset + 0, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 0];
        const y = compressionLevel === 0 ? data.getFloat32(splatOffset + 4, true) : (data.getUint16(splatOffset + 2, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 1];
        const z = compressionLevel === 0 ? data.getFloat32(splatOffset + 8, true) : (data.getUint16(splatOffset + 4, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 2];
        const scaleX = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 0, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 0, true));
        const scaleY = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));
        const scaleZ = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 8, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 4, true));
        const quatW = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 0, true)
        );
        const quatX = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 4, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 2, true)
        );
        const quatY = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 8, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 4, true)
        );
        const quatZ = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 12, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 6, true)
        );
        const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / 255;
        const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / 255;
        const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / 255;
        const opacity = data.getUint8(splatOffset + colorOffsetBytes + 3) / 255;
        setPackedSplat(
          packedArray,
          i2,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
        if (sphericalHarmonicsDegree >= 1) {
          if (sh1) {
            if (!extra.sh1) {
              extra.sh1 = new Uint32Array(numSplats * 2);
            }
            for (const [i22, key] of sh1Index.entries()) {
              sh1[i22] = getSh(splatOffset, key);
            }
            encodeSh1Rgb(extra.sh1, i2, sh1);
          }
          if (sh2) {
            if (!extra.sh2) {
              extra.sh2 = new Uint32Array(numSplats * 4);
            }
            for (const [i22, key] of sh2Index.entries()) {
              sh2[i22] = getSh(splatOffset, key);
            }
            encodeSh2Rgb(extra.sh2, i2, sh2);
          }
          if (sh3) {
            if (!extra.sh3) {
              extra.sh3 = new Uint32Array(numSplats * 4);
            }
            for (const [i22, key] of sh3Index.entries()) {
              sh3[i22] = getSh(splatOffset, key);
            }
            encodeSh3Rgb(extra.sh3, i2, sh3);
          }
        }
      }
      sectionBase += storageSizeBytes;
    }
    return { packedArray, numSplats, extra };
  }
  const _PlyReader = class _PlyReader {
    // Create a PlyReader from a Uint8Array/ArrayBuffer, no parsing done yet
    constructor({ fileBytes }) {
      this.header = "";
      this.littleEndian = true;
      this.elements = {};
      this.comments = [];
      this.data = null;
      this.numSplats = 0;
      this.fileBytes = fileBytes instanceof ArrayBuffer ? new Uint8Array(fileBytes) : fileBytes;
    }
    // Identify and parse the PLY text header (assumed to be <64KB in size).
    // this.elements will contain all the elements in the file, typically
    // "vertex" contains the Gsplat data.
    async parseHeader() {
      const bufferStream = new ReadableStream({
        start: (controller) => {
          controller.enqueue(this.fileBytes.slice(0, 65536));
          controller.close();
        }
      });
      const decoder = bufferStream.pipeThrough(new TextDecoderStream()).getReader();
      this.header = "";
      const headerTerminator = "end_header\\n";
      while (true) {
        const { value, done } = await decoder.read();
        if (done) {
          throw new Error("Failed to read header");
        }
        this.header += value;
        const endHeader = this.header.indexOf(headerTerminator);
        if (endHeader >= 0) {
          this.header = this.header.slice(0, endHeader + headerTerminator.length);
          break;
        }
      }
      const headerLen = new TextEncoder().encode(this.header).length;
      this.data = new DataView(this.fileBytes.buffer, headerLen);
      this.elements = {};
      let curElement = null;
      this.comments = [];
      this.header.trim().split("\\n").forEach((line, lineIndex) => {
        const trimmedLine = line.trim();
        if (lineIndex === 0) {
          if (trimmedLine !== "ply") {
            throw new Error("Invalid PLY header");
          }
          return;
        }
        if (trimmedLine.length === 0) {
          return;
        }
        const fields = trimmedLine.split(" ");
        switch (fields[0]) {
          case "format":
            if (fields[1] === "binary_little_endian") {
              this.littleEndian = true;
            } else if (fields[1] === "binary_big_endian") {
              this.littleEndian = false;
            } else {
              throw new Error(\`Unsupported PLY format: \${fields[1]}\`);
            }
            if (fields[2] !== "1.0") {
              throw new Error(\`Unsupported PLY version: \${fields[2]}\`);
            }
            break;
          case "end_header":
            break;
          case "comment":
            this.comments.push(trimmedLine.slice("comment ".length));
            break;
          case "element": {
            const name = fields[1];
            curElement = {
              name,
              count: Number.parseInt(fields[2]),
              properties: {}
            };
            this.elements[name] = curElement;
            break;
          }
          case "property":
            if (curElement == null) {
              throw new Error("Property must be inside an element");
            }
            if (fields[1] === "list") {
              curElement.properties[fields[4]] = {
                isList: true,
                type: fields[3],
                countType: fields[2]
              };
            } else {
              curElement.properties[fields[2]] = {
                isList: false,
                type: fields[1]
              };
            }
            break;
        }
      });
      if (this.elements.vertex) {
        this.numSplats = this.elements.vertex.count;
      }
    }
    parseData(elementCallback) {
      let offset = 0;
      const data = this.data;
      if (data == null) {
        throw new Error("No data to parse");
      }
      for (const elementName in this.elements) {
        const element = this.elements[elementName];
        const { count, properties } = element;
        const item = {};
        const parsers = [];
        for (const [propertyName, property] of Object.entries(properties)) {
          if (!property.isList) {
            item[propertyName] = 0;
            parsers.push(() => {
              item[propertyName] = PARSE_FIELD[property.type](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.type];
            });
          } else {
            item[propertyName] = [];
            parsers.push(() => {
              const list = item[propertyName];
              list.length = PARSE_FIELD[property.countType](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.countType];
              for (let i2 = 0; i2 < list.length; i2++) {
                list[i2] = PARSE_FIELD[property.type](
                  data,
                  offset,
                  this.littleEndian
                );
                offset += FIELD_BYTES[property.type];
              }
            });
          }
        }
        const callback = elementCallback(element) ?? (() => {
        });
        for (let index = 0; index < count; index++) {
          for (const parser of parsers) {
            parser();
          }
          callback(index, item);
        }
      }
    }
    // Parse all the Gsplat data in the PLY file in go, invoking the given
    // callbacks for each Gsplat.
    parseSplats(splatCallback, shCallback) {
      if (this.elements.vertex == null) {
        throw new Error("No vertex element found");
      }
      let isSuperSplat = false;
      const ssChunks = [];
      let numSh = 0;
      let sh1Props = [];
      let sh2Props = [];
      let sh3Props = [];
      let sh1 = void 0;
      let sh2 = void 0;
      let sh3 = void 0;
      function prepareSh() {
        const num_f_rest = NUM_SH_TO_NUM_F_REST[numSh];
        sh1Props = new Array(3).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${k + d * num_f_rest / 3}\`)
        );
        sh2Props = new Array(5).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${3 + k + d * num_f_rest / 3}\`)
        );
        sh3Props = new Array(7).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${8 + k + d * num_f_rest / 3}\`)
        );
        sh1 = numSh >= 1 ? new Float32Array(3 * 3) : void 0;
        sh2 = numSh >= 2 ? new Float32Array(5 * 3) : void 0;
        sh3 = numSh >= 3 ? new Float32Array(7 * 3) : void 0;
      }
      function ssShCallback(index, item) {
        if (!sh1) {
          throw new Error("Missing sh1");
        }
        for (const [i2, key] of sh1Props.entries()) {
          sh1[i2] = item[key] * 8 / 255 - 4;
        }
        if (sh2) {
          for (const [i2, key] of sh2Props.entries()) {
            sh2[i2] = item[key] * 8 / 255 - 4;
          }
        }
        if (sh3) {
          for (const [i2, key] of sh3Props.entries()) {
            sh3[i2] = item[key] * 8 / 255 - 4;
          }
        }
        shCallback == null ? void 0 : shCallback(index, sh1, sh2, sh3);
      }
      function initSuperSplat(element) {
        const {
          min_x,
          min_y,
          min_z,
          max_x,
          max_y,
          max_z,
          min_scale_x,
          min_scale_y,
          min_scale_z,
          max_scale_x,
          max_scale_y,
          max_scale_z,
          min_r,
          min_g,
          min_b,
          max_r,
          max_g,
          max_b
        } = element.properties;
        if (!min_x || !min_y || !min_z || !max_x || !max_y || !max_z || !min_scale_x || !min_scale_y || !min_scale_z || !max_scale_x || !max_scale_y || !max_scale_z || !min_r || !min_g || !min_b || !max_r || !max_g || !max_b) {
          throw new Error("Missing PLY chunk properties");
        }
        isSuperSplat = true;
        return (index, item) => {
          const {
            min_x: min_x2,
            min_y: min_y2,
            min_z: min_z2,
            max_x: max_x2,
            max_y: max_y2,
            max_z: max_z2,
            min_scale_x: min_scale_x2,
            min_scale_y: min_scale_y2,
            min_scale_z: min_scale_z2,
            max_scale_x: max_scale_x2,
            max_scale_y: max_scale_y2,
            max_scale_z: max_scale_z2,
            min_r: min_r2,
            min_g: min_g2,
            min_b: min_b2,
            max_r: max_r2,
            max_g: max_g2,
            max_b: max_b2
          } = item;
          ssChunks.push({
            min_x: min_x2,
            min_y: min_y2,
            min_z: min_z2,
            max_x: max_x2,
            max_y: max_y2,
            max_z: max_z2,
            min_scale_x: min_scale_x2,
            min_scale_y: min_scale_y2,
            min_scale_z: min_scale_z2,
            max_scale_x: max_scale_x2,
            max_scale_y: max_scale_y2,
            max_scale_z: max_scale_z2,
            min_r: min_r2,
            min_g: min_g2,
            min_b: min_b2,
            max_r: max_r2,
            max_g: max_g2,
            max_b: max_b2
          });
        };
      }
      function decodeSuperSplat(element) {
        if (shCallback && element.name === "sh") {
          numSh = getNumSh(element.properties);
          prepareSh();
          return ssShCallback;
        }
        if (element.name !== "vertex") {
          return null;
        }
        const { packed_position, packed_rotation, packed_scale, packed_color } = element.properties;
        if (!packed_position || !packed_rotation || !packed_scale || !packed_color) {
          throw new Error(
            "Missing PLY properties: packed_position, packed_rotation, packed_scale, packed_color"
          );
        }
        const SQRT2 = Math.sqrt(2);
        return (index, item) => {
          const chunk = ssChunks[index >>> 8];
          if (chunk == null) {
            throw new Error("Missing PLY chunk");
          }
          const {
            min_x,
            min_y,
            min_z,
            max_x,
            max_y,
            max_z,
            min_scale_x,
            min_scale_y,
            min_scale_z,
            max_scale_x,
            max_scale_y,
            max_scale_z,
            min_r,
            min_g,
            min_b,
            max_r,
            max_g,
            max_b
          } = chunk;
          const { packed_position: packed_position2, packed_rotation: packed_rotation2, packed_scale: packed_scale2, packed_color: packed_color2 } = item;
          const x2 = (packed_position2 >>> 21 & 2047) / 2047 * (max_x - min_x) + min_x;
          const y = (packed_position2 >>> 11 & 1023) / 1023 * (max_y - min_y) + min_y;
          const z = (packed_position2 & 2047) / 2047 * (max_z - min_z) + min_z;
          const r0 = ((packed_rotation2 >>> 20 & 1023) / 1023 - 0.5) * SQRT2;
          const r1 = ((packed_rotation2 >>> 10 & 1023) / 1023 - 0.5) * SQRT2;
          const r2 = ((packed_rotation2 & 1023) / 1023 - 0.5) * SQRT2;
          const rr = Math.sqrt(Math.max(0, 1 - r0 * r0 - r1 * r1 - r2 * r2));
          const rOrder = packed_rotation2 >>> 30;
          const quatX = rOrder === 0 ? r0 : rOrder === 1 ? rr : r1;
          const quatY = rOrder <= 1 ? r1 : rOrder === 2 ? rr : r2;
          const quatZ = rOrder <= 2 ? r2 : rr;
          const quatW = rOrder === 0 ? rr : r0;
          const scaleX = Math.exp(
            (packed_scale2 >>> 21 & 2047) / 2047 * (max_scale_x - min_scale_x) + min_scale_x
          );
          const scaleY = Math.exp(
            (packed_scale2 >>> 11 & 1023) / 1023 * (max_scale_y - min_scale_y) + min_scale_y
          );
          const scaleZ = Math.exp(
            (packed_scale2 & 2047) / 2047 * (max_scale_z - min_scale_z) + min_scale_z
          );
          const r = (packed_color2 >>> 24 & 255) / 255 * (max_r - min_r) + min_r;
          const g = (packed_color2 >>> 16 & 255) / 255 * (max_g - min_g) + min_g;
          const b = (packed_color2 >>> 8 & 255) / 255 * (max_b - min_b) + min_b;
          const opacity = (packed_color2 & 255) / 255;
          splatCallback(
            index,
            x2,
            y,
            z,
            scaleX,
            scaleY,
            scaleZ,
            quatX,
            quatY,
            quatZ,
            quatW,
            opacity,
            r,
            g,
            b
          );
        };
      }
      const elementCallback = (element) => {
        if (element.name === "chunk") {
          return initSuperSplat(element);
        }
        if (isSuperSplat) {
          return decodeSuperSplat(element);
        }
        if (element.name !== "vertex") {
          return null;
        }
        const {
          x: x2,
          y,
          z,
          scale_0,
          scale_1,
          scale_2,
          rot_0,
          rot_1,
          rot_2,
          rot_3,
          opacity,
          f_dc_0,
          f_dc_1,
          f_dc_2,
          red,
          green,
          blue,
          alpha
        } = element.properties;
        if (!x2 || !y || !z) {
          throw new Error("Missing PLY properties: x, y, z");
        }
        const hasScales = scale_0 && scale_1 && scale_2;
        const hasRots = rot_0 && rot_1 && rot_2 && rot_3;
        const alphaDiv = alpha != null ? FIELD_SCALE[alpha.type] : 1;
        const redDiv = red != null ? FIELD_SCALE[red.type] : 1;
        const greenDiv = green != null ? FIELD_SCALE[green.type] : 1;
        const blueDiv = blue != null ? FIELD_SCALE[blue.type] : 1;
        numSh = getNumSh(element.properties);
        prepareSh();
        return (index, item) => {
          const scaleX = hasScales ? Math.exp(item.scale_0) : _PlyReader.defaultPointScale;
          const scaleY = hasScales ? Math.exp(item.scale_1) : _PlyReader.defaultPointScale;
          const scaleZ = hasScales ? Math.exp(item.scale_2) : _PlyReader.defaultPointScale;
          const quatX = hasRots ? item.rot_1 : 0;
          const quatY = hasRots ? item.rot_2 : 0;
          const quatZ = hasRots ? item.rot_3 : 0;
          const quatW = hasRots ? item.rot_0 : 1;
          const op = opacity != null ? 1 / (1 + Math.exp(-item.opacity)) : alpha != null ? item.alpha / alphaDiv : 1;
          const r = f_dc_0 != null ? item.f_dc_0 * SH_C0$1 + 0.5 : red != null ? item.red / redDiv : 1;
          const g = f_dc_1 != null ? item.f_dc_1 * SH_C0$1 + 0.5 : green != null ? item.green / greenDiv : 1;
          const b = f_dc_2 != null ? item.f_dc_2 * SH_C0$1 + 0.5 : blue != null ? item.blue / blueDiv : 1;
          splatCallback(
            index,
            item.x,
            item.y,
            item.z,
            scaleX,
            scaleY,
            scaleZ,
            quatX,
            quatY,
            quatZ,
            quatW,
            op,
            r,
            g,
            b
          );
          if (shCallback && sh1) {
            if (sh1) {
              for (const [i2, key] of sh1Props.entries()) {
                sh1[i2] = item[key];
              }
            }
            if (sh2) {
              for (const [i2, key] of sh2Props.entries()) {
                sh2[i2] = item[key];
              }
            }
            if (sh3) {
              for (const [i2, key] of sh3Props.entries()) {
                sh3[i2] = item[key];
              }
            }
            shCallback(index, sh1, sh2, sh3);
          }
        };
      };
      this.parseData(elementCallback);
    }
    // Inject RGBA values into original PLY file, which can be used to modify
    // the color/opacity of the Gsplats and write out the modified PLY file.
    injectRgba(rgba) {
      let offset = 0;
      const data = this.data;
      if (data == null) {
        throw new Error("No parsed data");
      }
      if (rgba.length !== this.numSplats * 4) {
        throw new Error("Invalid RGBA array length");
      }
      for (const elementName in this.elements) {
        const element = this.elements[elementName];
        const { count, properties } = element;
        const parsers = [];
        let rgbaOffset = 0;
        const isVertex = elementName === "vertex";
        if (isVertex) {
          for (const name of ["opacity", "f_dc_0", "f_dc_1", "f_dc_2"]) {
            if (!properties[name] || properties[name].type !== "float") {
              throw new Error(\`Can't injectRgba due to property: \${name}\`);
            }
          }
        }
        for (const [propertyName, property] of Object.entries(properties)) {
          if (!property.isList) {
            if (isVertex) {
              if (propertyName === "f_dc_0" || propertyName === "f_dc_1" || propertyName === "f_dc_2") {
                const component = Number.parseInt(
                  propertyName.slice("f_dc_".length)
                );
                parsers.push(() => {
                  const value = (rgba[rgbaOffset + component] / 255 - 0.5) / SH_C0$1;
                  SET_FIELD[property.type](
                    data,
                    offset,
                    this.littleEndian,
                    value
                  );
                });
              } else if (propertyName === "opacity") {
                parsers.push(() => {
                  const value = Math.max(
                    -100,
                    Math.min(
                      100,
                      -Math.log(1 / (rgba[rgbaOffset + 3] / 255) - 1)
                    )
                  );
                  SET_FIELD[property.type](
                    data,
                    offset,
                    this.littleEndian,
                    value
                  );
                });
              }
            }
            parsers.push(() => {
              offset += FIELD_BYTES[property.type];
            });
          } else {
            parsers.push(() => {
              const length = PARSE_FIELD[property.countType](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.countType];
              offset += length * FIELD_BYTES[property.type];
            });
          }
        }
        for (let index = 0; index < count; index++) {
          for (const parser of parsers) {
            parser();
          }
          if (isVertex) {
            rgbaOffset += 4;
          }
        }
      }
    }
  };
  _PlyReader.defaultPointScale = 1e-3;
  let PlyReader = _PlyReader;
  const SH_C0$1 = 0.28209479177387814;
  const PARSE_FIELD = {
    char: (data, offset, littleEndian) => {
      return data.getInt8(offset);
    },
    uchar: (data, offset, littleEndian) => {
      return data.getUint8(offset);
    },
    short: (data, offset, littleEndian) => {
      return data.getInt16(offset, littleEndian);
    },
    ushort: (data, offset, littleEndian) => {
      return data.getUint16(offset, littleEndian);
    },
    int: (data, offset, littleEndian) => {
      return data.getInt32(offset, littleEndian);
    },
    uint: (data, offset, littleEndian) => {
      return data.getUint32(offset, littleEndian);
    },
    float: (data, offset, littleEndian) => {
      return data.getFloat32(offset, littleEndian);
    },
    double: (data, offset, littleEndian) => {
      return data.getFloat64(offset, littleEndian);
    }
  };
  const SET_FIELD = {
    char: (data, offset, littleEndian, value) => {
      data.setInt8(offset, value);
    },
    uchar: (data, offset, littleEndian, value) => {
      data.setUint8(offset, value);
    },
    short: (data, offset, littleEndian, value) => {
      data.setInt16(offset, value, littleEndian);
    },
    ushort: (data, offset, littleEndian, value) => {
      data.setUint16(offset, value, littleEndian);
    },
    int: (data, offset, littleEndian, value) => {
      data.setInt32(offset, value, littleEndian);
    },
    uint: (data, offset, littleEndian, value) => {
      data.setUint32(offset, value, littleEndian);
    },
    float: (data, offset, littleEndian, value) => {
      data.setFloat32(offset, value, littleEndian);
    },
    double: (data, offset, littleEndian, value) => {
      data.setFloat64(offset, value, littleEndian);
    }
  };
  const FIELD_BYTES = {
    char: 1,
    uchar: 1,
    short: 2,
    ushort: 2,
    int: 4,
    uint: 4,
    float: 4,
    double: 8
  };
  const FIELD_SCALE = {
    char: 127,
    uchar: 255,
    short: 32767,
    ushort: 65535,
    int: 2147483647,
    uint: 4294967295,
    float: 1,
    double: 1
  };
  const NUM_F_REST_TO_NUM_SH = {
    0: 0,
    9: 1,
    24: 2,
    45: 3
  };
  const NUM_SH_TO_NUM_F_REST = {
    0: 0,
    1: 9,
    2: 24,
    3: 45
  };
  function getNumSh(properties) {
    let num_f_rest = 0;
    while (properties[\`f_rest_\${num_f_rest}\`]) {
      num_f_rest += 1;
    }
    const numSh = NUM_F_REST_TO_NUM_SH[num_f_rest];
    if (numSh == null) {
      throw new Error(\`Unsupported number of SH coefficients: \${num_f_rest}\`);
    }
    return numSh;
  }
  const Gsplat = { type: "Gsplat" };
  const TPackedSplats = { type: "PackedSplats" };
  const readPackedSplat = (packedSplats, index) => new ReadPackedSplat({ packedSplats, index });
  const readPackedSplatRange = (packedSplats, index, base, count) => new ReadPackedSplatRange({ packedSplats, index, base, count });
  const splitGsplat = (gsplat) => new SplitGsplat({ gsplat });
  const combineGsplat = ({
    gsplat,
    flags,
    index,
    center,
    scales,
    quaternion,
    rgba,
    rgb,
    opacity,
    x: x2,
    y,
    z,
    r,
    g,
    b
  }) => {
    return new CombineGsplat({
      gsplat,
      flags,
      index,
      center,
      scales,
      quaternion,
      rgba,
      rgb,
      opacity,
      x: x2,
      y,
      z,
      r,
      g,
      b
    });
  };
  const transformGsplat = (gsplat, {
    scale,
    rotate,
    translate,
    recolor
  }) => {
    return new TransformGsplat({ gsplat, scale, rotate, translate, recolor });
  };
  const defineGsplat = unindent(\`
  struct Gsplat {
    vec3 center;
    uint flags;
    vec3 scales;
    int index;
    vec4 quaternion;
    vec4 rgba;
  };
  const uint GSPLAT_FLAG_ACTIVE = 1u << 0u;

  bool isGsplatActive(uint flags) {
    return (flags & GSPLAT_FLAG_ACTIVE) != 0u;
  }
\`);
  const definePackedSplats = unindent(\`
  struct PackedSplats {
    usampler2DArray texture;
    int numSplats;
  };
\`);
  const defineReadPackedSplat = unindent(\`
  bool readPackedSplat(usampler2DArray texture, int numSplats, int index, out Gsplat gsplat) {
    if ((index >= 0) && (index < numSplats)) {
      uvec4 packed = texelFetch(texture, splatTexCoord(index), 0);
      unpackSplat(packed, gsplat.center, gsplat.scales, gsplat.quaternion, gsplat.rgba);
      return true;
    } else {
      return false;
    }
  }
\`);
  class ReadPackedSplat extends Dyno {
    constructor({
      packedSplats,
      index
    }) {
      super({
        inTypes: { packedSplats: TPackedSplats, index: "int" },
        outTypes: { gsplat: Gsplat },
        inputs: { packedSplats, index },
        globals: () => [defineGsplat, definePackedSplats, defineReadPackedSplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat } = outputs;
          if (!gsplat) {
            return [];
          }
          const { packedSplats: packedSplats2, index: index2 } = inputs;
          let statements;
          if (packedSplats2 && index2) {
            statements = unindentLines(\`
            if (readPackedSplat(\${packedSplats2}.texture, \${packedSplats2}.numSplats, \${index2}, \${gsplat})) {
              bool zeroSize = all(equal(\${gsplat}.scales, vec3(0.0, 0.0, 0.0)));
              \${gsplat}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
            } else {
              \${gsplat}.flags = 0u;
            }
          \`);
          } else {
            statements = [\`\${gsplat}.flags = 0u;\`];
          }
          statements.push(\`\${gsplat}.index = \${index2 ?? "0"};\`);
          return statements;
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  class ReadPackedSplatRange extends Dyno {
    constructor({
      packedSplats,
      index,
      base,
      count
    }) {
      super({
        inTypes: {
          packedSplats: TPackedSplats,
          index: "int",
          base: "int",
          count: "int"
        },
        outTypes: { gsplat: Gsplat },
        inputs: { packedSplats, index, base, count },
        globals: () => [defineGsplat, definePackedSplats, defineReadPackedSplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat } = outputs;
          if (!gsplat) {
            return [];
          }
          const { packedSplats: packedSplats2, index: index2, base: base2, count: count2 } = inputs;
          let statements;
          if (packedSplats2 && index2 && base2 && count2) {
            statements = unindentLines(\`
            \${gsplat}.flags = 0u;
            if ((\${index2} >= \${base2}) && (\${index2} < (\${base2} + \${count2}))) {
              if (readPackedSplat(\${packedSplats2}.texture, \${packedSplats2}.numSplats, \${index2}, \${gsplat})) {
                bool zeroSize = all(equal(\${gsplat}.scales, vec3(0.0, 0.0, 0.0)));
                \${gsplat}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
              }
            }
          \`);
          } else {
            statements = [\`\${gsplat}.flags = 0u;\`];
          }
          statements.push(\`\${gsplat}.index = \${index2 ?? "0"};\`);
          return statements;
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  class SplitGsplat extends Dyno {
    constructor({ gsplat }) {
      super({
        inTypes: { gsplat: Gsplat },
        outTypes: {
          flags: "uint",
          active: "bool",
          index: "int",
          center: "vec3",
          scales: "vec3",
          quaternion: "vec4",
          rgba: "vec4",
          rgb: "vec3",
          opacity: "float",
          x: "float",
          y: "float",
          z: "float",
          r: "float",
          g: "float",
          b: "float"
        },
        inputs: { gsplat },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat: gsplat2 } = inputs;
          const {
            flags,
            active,
            index,
            center,
            scales,
            quaternion,
            rgba,
            rgb,
            opacity,
            x: x2,
            y,
            z,
            r,
            g,
            b
          } = outputs;
          return [
            !flags ? null : \`\${flags} = \${gsplat2 ? \`\${gsplat2}.flags\` : "0u"};\`,
            !active ? null : \`\${active} = isGsplatActive(\${gsplat2 ? \`\${gsplat2}.flags\` : "0u"});\`,
            !index ? null : \`\${index} = \${gsplat2 ? \`\${gsplat2}.index\` : "0"};\`,
            !center ? null : \`\${center} = \${gsplat2 ? \`\${gsplat2}.center\` : "vec3(0.0, 0.0, 0.0)"};\`,
            !scales ? null : \`\${scales} = \${gsplat2 ? \`\${gsplat2}.scales\` : "vec3(0.0, 0.0, 0.0)"};\`,
            !quaternion ? null : \`\${quaternion} = \${gsplat2 ? \`\${gsplat2}.quaternion\` : "vec4(0.0, 0.0, 0.0, 1.0)"};\`,
            !rgba ? null : \`\${rgba} = \${gsplat2 ? \`\${gsplat2}.rgba\` : "vec4(0.0, 0.0, 0.0, 0.0)"};\`,
            !rgb ? null : \`\${rgb} = \${gsplat2 ? \`\${gsplat2}.rgba.rgb\` : "vec3(0.0, 0.0, 0.0)"};\`,
            !opacity ? null : \`\${opacity} = \${gsplat2 ? \`\${gsplat2}.rgba.a\` : "0.0"};\`,
            !x2 ? null : \`\${x2} = \${gsplat2 ? \`\${gsplat2}.center.x\` : "0.0"};\`,
            !y ? null : \`\${y} = \${gsplat2 ? \`\${gsplat2}.center.y\` : "0.0"};\`,
            !z ? null : \`\${z} = \${gsplat2 ? \`\${gsplat2}.center.z\` : "0.0"};\`,
            !r ? null : \`\${r} = \${gsplat2 ? \`\${gsplat2}.rgba.r\` : "0.0"};\`,
            !g ? null : \`\${g} = \${gsplat2 ? \`\${gsplat2}.rgba.g\` : "0.0"};\`,
            !b ? null : \`\${b} = \${gsplat2 ? \`\${gsplat2}.rgba.b\` : "0.0"};\`
          ].filter(Boolean);
        }
      });
    }
  }
  class CombineGsplat extends Dyno {
    constructor({
      gsplat,
      flags,
      index,
      center,
      scales,
      quaternion,
      rgba,
      rgb,
      opacity,
      x: x2,
      y,
      z,
      r,
      g,
      b
    }) {
      super({
        inTypes: {
          gsplat: Gsplat,
          flags: "uint",
          index: "int",
          center: "vec3",
          scales: "vec3",
          quaternion: "vec4",
          rgba: "vec4",
          rgb: "vec3",
          opacity: "float",
          x: "float",
          y: "float",
          z: "float",
          r: "float",
          g: "float",
          b: "float"
        },
        outTypes: { gsplat: Gsplat },
        inputs: {
          gsplat,
          flags,
          index,
          center,
          scales,
          quaternion,
          rgba,
          rgb,
          opacity,
          x: x2,
          y,
          z,
          r,
          g,
          b
        },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat: outGsplat } = outputs;
          if (!outGsplat) {
            return [];
          }
          const {
            gsplat: gsplat2,
            flags: flags2,
            index: index2,
            center: center2,
            scales: scales2,
            quaternion: quaternion2,
            rgba: rgba2,
            rgb: rgb2,
            opacity: opacity2,
            x: x22,
            y: y2,
            z: z2,
            r: r2,
            g: g2,
            b: b2
          } = inputs;
          return [
            \`\${outGsplat}.flags = \${flags2 ?? (gsplat2 ? \`\${gsplat2}.flags\` : "0u")};\`,
            \`\${outGsplat}.index = \${index2 ?? (gsplat2 ? \`\${gsplat2}.index\` : "0")};\`,
            \`\${outGsplat}.center = \${center2 ?? (gsplat2 ? \`\${gsplat2}.center\` : "vec3(0.0, 0.0, 0.0)")};\`,
            \`\${outGsplat}.scales = \${scales2 ?? (gsplat2 ? \`\${gsplat2}.scales\` : "vec3(0.0, 0.0, 0.0)")};\`,
            \`\${outGsplat}.quaternion = \${quaternion2 ?? (gsplat2 ? \`\${gsplat2}.quaternion\` : "vec4(0.0, 0.0, 0.0, 1.0)")};\`,
            \`\${outGsplat}.rgba = \${rgba2 ?? (gsplat2 ? \`\${gsplat2}.rgba\` : "vec4(0.0, 0.0, 0.0, 0.0)")};\`,
            !rgb2 ? null : \`\${outGsplat}.rgba.rgb = \${rgb2};\`,
            !opacity2 ? null : \`\${outGsplat}.rgba.a = \${opacity2};\`,
            !x22 ? null : \`\${outGsplat}.center.x = \${x22};\`,
            !y2 ? null : \`\${outGsplat}.center.y = \${y2};\`,
            !z2 ? null : \`\${outGsplat}.center.z = \${z2};\`,
            !r2 ? null : \`\${outGsplat}.rgba.r = \${r2};\`,
            !g2 ? null : \`\${outGsplat}.rgba.g = \${g2};\`,
            !b2 ? null : \`\${outGsplat}.rgba.b = \${b2};\`
          ].filter(Boolean);
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  unindent(\`
  vec3 gsplatNormal(vec3 scales, vec4 quaternion) {
    float minScale = min(scales.x, min(scales.y, scales.z));
    vec3 normal;
    if (scales.z == minScale) {
      normal = vec3(0.0, 0.0, 1.0);
    } else if (scales.y == minScale) {
      normal = vec3(0.0, 1.0, 0.0);
    } else {
      normal = vec3(1.0, 0.0, 0.0);
    }
    return quatVec(quaternion, normal);
  }
\`);
  class TransformGsplat extends Dyno {
    constructor({
      gsplat,
      scale,
      rotate,
      translate,
      recolor
    }) {
      super({
        inTypes: {
          gsplat: Gsplat,
          scale: "float",
          rotate: "vec4",
          translate: "vec3",
          recolor: "vec4"
        },
        outTypes: { gsplat: Gsplat },
        inputs: { gsplat, scale, rotate, translate, recolor },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs, compile }) => {
          const { gsplat: gsplat2 } = outputs;
          if (!gsplat2 || !inputs.gsplat) {
            return [];
          }
          const { scale: scale2, rotate: rotate2, translate: translate2, recolor: recolor2 } = inputs;
          const indent = compile.indent;
          const statements = [
            \`\${gsplat2} = \${inputs.gsplat};\`,
            \`if (isGsplatActive(\${gsplat2}.flags)) {\`,
            scale2 ? \`\${indent}\${gsplat2}.center *= \${scale2};\` : null,
            rotate2 ? \`\${indent}\${gsplat2}.center = quatVec(\${rotate2}, \${gsplat2}.center);\` : null,
            translate2 ? \`\${indent}\${gsplat2}.center += \${translate2};\` : null,
            scale2 ? \`\${indent}\${gsplat2}.scales *= \${scale2};\` : null,
            rotate2 ? \`\${indent}\${gsplat2}.quaternion = quatQuat(\${rotate2}, \${gsplat2}.quaternion);\` : null,
            recolor2 ? \`\${indent}\${gsplat2}.rgba *= \${recolor2};\` : null,
            "}"
          ].filter(Boolean);
          return statements;
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  const outputPackedSplat = (gsplat) => new OutputPackedSplat({ gsplat });
  class OutputPackedSplat extends Dyno {
    constructor({ gsplat }) {
      super({
        inTypes: { gsplat: Gsplat },
        inputs: { gsplat },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs }) => {
          const { output } = outputs;
          if (!output) {
            return [];
          }
          const { gsplat: gsplat2 } = inputs;
          if (gsplat2) {
            return unindentLines(\`
            if (isGsplatActive(\${gsplat2}.flags)) {
              \${output} = packSplat(\${gsplat2}.center, \${gsplat2}.scales, \${gsplat2}.quaternion, \${gsplat2}.rgba);
            } else {
              \${output} = uvec4(0u, 0u, 0u, 0u);
            }
          \`);
          }
          return [\`\${output} = uvec4(0u, 0u, 0u, 0u);\`];
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "output");
    }
  }
  class OutputRgba8 extends Dyno {
    constructor({ rgba8 }) {
      super({
        inTypes: { rgba8: "vec4" },
        inputs: { rgba8 },
        statements: ({ inputs, outputs }) => [
          \`target = \${inputs.rgba8 ?? "vec4(0.0, 0.0, 0.0, 0.0)"};\`
        ]
      });
    }
    dynoOut() {
      return new DynoOutput(this, "rgba8");
    }
  }
  class DynoUniform extends Dyno {
    constructor({
      key,
      type,
      count,
      value,
      update,
      globals
    }) {
      key = key ?? "value";
      super({
        outTypes: { [key]: type },
        update: () => {
          if (update) {
            const value2 = update(this.value);
            if (value2 !== void 0) {
              this.value = value2;
            }
          }
          this.uniform.value = this.value;
        },
        generate: ({ inputs, outputs }) => {
          const allGlobals = (globals == null ? void 0 : globals({ inputs, outputs })) ?? [];
          const uniforms = {};
          const name = outputs[key];
          if (name) {
            allGlobals.push(\`uniform \${dynoDeclare(name, type, count)};\`);
            uniforms[name] = this.uniform;
          }
          return { globals: allGlobals, uniforms };
        }
      });
      this.type = type;
      this.count = count;
      this.value = value;
      this.uniform = { value };
      this.outKey = key;
    }
    dynoOut() {
      return new DynoOutput(this, this.outKey);
    }
  }
  class DynoInt extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "int", value, update });
    }
  }
  class DynoFloat extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "float", value, update });
    }
  }
  class DynoVec3 extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "vec3", value, update });
    }
  }
  class DynoVec4 extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "vec4", value, update });
    }
  }
  class DynoUsampler2DArray extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "usampler2DArray", value, update });
    }
  }
  class DynoProgram {
    constructor({
      graph,
      inputs,
      outputs,
      template
    }) {
      this.graph = graph;
      this.template = template;
      this.inputs = inputs ?? {};
      this.outputs = outputs ?? {};
      const compile = new Compilation({ indent: this.template.indent });
      for (const key in this.outputs) {
        if (this.outputs[key]) {
          compile.declares.add(this.outputs[key]);
        }
      }
      const statements = graph.compile({
        inputs: this.inputs,
        outputs: this.outputs,
        compile
      });
      this.shader = template.generate({ globals: compile.globals, statements });
      this.uniforms = compile.uniforms;
      this.updaters = compile.updaters;
    }
    prepareMaterial() {
      return getMaterial(this);
    }
    update() {
      for (const updater of this.updaters) {
        updater();
      }
    }
  }
  class DynoProgramTemplate {
    constructor(template) {
      const globals = template.match(/^([ \\t]*)\\{\\{\\s*GLOBALS\\s*\\}\\}/m);
      const statements = template.match(/^([ \\t]*)\\{\\{\\s*STATEMENTS\\s*\\}\\}/m);
      if (!globals || !statements) {
        throw new Error(
          "Template must contain {{ GLOBALS }} and {{ STATEMENTS }}"
        );
      }
      this.before = template.substring(0, globals.index);
      this.between = template.substring(
        globals.index + globals[0].length,
        statements.index
      );
      this.after = template.substring(
        statements.index + statements[0].length
      );
      this.indent = statements[1];
    }
    generate({
      globals,
      statements
    }) {
      return this.before + Array.from(globals).join("\\n\\n") + this.between + statements.map((s) => this.indent + s).join("\\n") + this.after;
    }
  }
  const programMaterial = /* @__PURE__ */ new Map();
  function getMaterial(program) {
    let material = programMaterial.get(program);
    if (material) {
      return material;
    }
    material = new RawShaderMaterial({
      glslVersion: GLSL3,
      vertexShader: IDENT_VERTEX_SHADER,
      fragmentShader: program.shader,
      uniforms: program.uniforms
    });
    programMaterial.set(program, material);
    return material;
  }
  function addOutputType(a, b, operation = "add") {
    const error = () => {
      throw new Error(\`Invalid \${operation} types: \${a}, \${b}\`);
    };
    if (a === b) return a;
    if (a === "int") {
      if (isIntType(b)) return b;
      error();
    }
    if (b === "int") {
      if (isIntType(a)) return a;
      error();
    }
    if (a === "uint") {
      if (isUintType(b)) return b;
      error();
    }
    if (b === "uint") {
      if (isUintType(a)) return a;
      error();
    }
    if (a === "float") {
      if (isAllFloatType(b)) return b;
      error();
    }
    if (b === "float") {
      if (isAllFloatType(a)) return a;
      error();
    }
    throw new Error(\`Invalid \${operation} types: \${a}, \${b}\`);
  }
  function subOutputType(a, b) {
    return addOutputType(a, b, "sub");
  }
  function mulOutputType(a, b) {
    const error = () => {
      throw new Error(\`Invalid mul types: \${a}, \${b}\`);
    };
    const result = (value) => value;
    if (a === "int") {
      if (isIntType(b)) return result(b);
      error();
    }
    if (b === "int") {
      if (isIntType(a)) return result(a);
      error();
    }
    if (a === "uint") {
      if (isUintType(b)) return result(b);
      error();
    }
    if (b === "uint") {
      if (isUintType(a)) return result(a);
      error();
    }
    if (a === "float") {
      if (isAllFloatType(b)) return result(b);
      error();
    }
    if (b === "float") {
      if (isAllFloatType(a)) return result(a);
      error();
    }
    if (isIntType(a) || isUintType(a) || isIntType(b) || isUintType(b)) {
      if (a === b) return result(a);
      error();
    }
    if (a === "vec2") {
      if (b === "vec2" || isMat2(b)) return result("vec2");
      if (b === "mat3x2") return result("vec3");
      if (b === "mat4x2") return result("vec4");
      error();
    }
    if (a === "vec3") {
      if (b === "mat2x3") return result("vec2");
      if (b === "vec3" || isMat3(b)) return result("vec3");
      if (b === "mat4x3") return result("vec4");
      error();
    }
    if (a === "vec4") {
      if (b === "mat2x4") return result("vec2");
      if (b === "mat3x4") return result("vec3");
      if (b === "vec4" || isMat4(b)) return result("vec4");
      error();
    }
    if (b === "vec2") {
      if (isMat2(a)) return result("vec2");
      if (a === "mat2x3") return result("vec3");
      if (a === "mat2x4") return result("vec4");
      error();
    }
    if (b === "vec3") {
      if (a === "mat3x2") return result("vec2");
      if (isMat3(a)) return result("vec3");
      if (a === "mat3x4") return result("vec4");
      error();
    }
    if (b === "vec4") {
      if (a === "mat4x2") return result("vec2");
      if (a === "mat4x3") return result("vec3");
      if (isMat4(a)) return result("vec4");
      error();
    }
    if (isMat2(a)) {
      if (isMat2(b)) return result("mat2");
      if (b === "mat3x2") return result("mat3x2");
      if (b === "mat4x2") return result("mat4x2");
      error();
    }
    if (a === "mat2x3") {
      if (isMat2(b)) return result("mat2x3");
      if (b === "mat3x2") return result("mat3");
      if (b === "mat4x2") return result("mat4x3");
      error();
    }
    if (a === "mat2x4") {
      if (isMat2(b)) return result("mat2x4");
      if (b === "mat3x2") return result("mat3x4");
      if (b === "mat4x2") return result("mat4");
      error();
    }
    if (a === "mat3x2") {
      if (b === "mat2x3") return result("mat2");
      if (isMat3(b)) return result("mat3x2");
      if (b === "mat4x3") return result("mat4x2");
      error();
    }
    if (isMat3(a)) {
      if (b === "mat2x3") return result("mat2x3");
      if (isMat3(b)) return result("mat3");
      if (b === "mat4x3") return result("mat4x3");
      error();
    }
    if (a === "mat3x4") {
      if (b === "mat2x3") return result("mat2x4");
      if (isMat3(b)) return result("mat3x4");
      if (b === "mat4x3") return result("mat4");
      error();
    }
    if (a === "mat4x2") {
      if (b === "mat2x4") return result("mat2");
      if (b === "mat3x4") return result("mat3x2");
      if (isMat4(b)) return result("mat4x2");
      error();
    }
    if (a === "mat4x3") {
      if (b === "mat2x4") return result("mat2x3");
      if (b === "mat3x4") return result("mat3");
      if (isMat4(b)) return result("mat4x3");
      error();
    }
    if (isMat4(a)) {
      if (b === "mat2x4") return result("mat2x4");
      if (b === "mat3x4") return result("mat3x4");
      if (isMat4(b)) return result("mat4");
      error();
    }
    throw new Error(\`Invalid mul types: \${a}, \${b}\`);
  }
  const add = (a, b) => new Add({ a, b });
  const sub = (a, b) => new Sub({ a, b });
  const mul = (a, b) => new Mul({ a, b });
  class Add extends BinaryOp {
    constructor({ a, b }) {
      super({ a, b, outKey: "sum", outTypeFunc: addOutputType });
      this.statements = ({ inputs, outputs }) => {
        return [\`\${outputs.sum} = \${inputs.a} + \${inputs.b};\`];
      };
    }
  }
  class Sub extends BinaryOp {
    constructor({ a, b }) {
      super({ a, b, outKey: "difference", outTypeFunc: subOutputType });
      this.statements = ({ inputs, outputs }) => {
        return [\`\${outputs.difference} = \${inputs.a} - \${inputs.b};\`];
      };
    }
  }
  class Mul extends BinaryOp {
    constructor({ a, b }) {
      super({ a, b, outKey: "product", outTypeFunc: mulOutputType });
      this.statements = ({ inputs, outputs }) => {
        return [\`\${outputs.product} = \${inputs.a} * \${inputs.b};\`];
      };
    }
  }
  const normalize = (a) => new Normalize({ a });
  const extendVec = (a, b) => new ExtendVec({ a, b });
  class Normalize extends UnaryOp {
    constructor({ a }) {
      super({ a, outTypeFunc: (aType) => aType, outKey: "normalize" });
      this.statements = ({ inputs, outputs }) => [
        \`\${outputs.normalize} = normalize(\${inputs.a});\`
      ];
    }
  }
  function extendVecOutputType(type) {
    if (type === "float") return "vec2";
    if (type === "vec2") return "vec3";
    if (type === "vec3") return "vec4";
    throw new Error("Invalid type");
  }
  class ExtendVec extends BinaryOp {
    constructor({ a, b }) {
      const type = valType(a);
      const outType = extendVecOutputType(type);
      super({ a, b, outKey: "extend", outTypeFunc: () => outType });
      this.statements = ({ inputs, outputs }) => [
        \`\${outputs.extend} = \${outType}(\${inputs.a}, \${inputs.b});\`
      ];
    }
  }
  const transformPos = (position, {
    scale,
    scales,
    rotate,
    translate
  }) => {
    return new TransformPosition({ position, scale, scales, rotate, translate }).outputs.position;
  };
  const transformDir = (dir, {
    scale,
    scales,
    rotate
  }) => {
    return new TransformDir({ dir, scale, scales, rotate }).outputs.dir;
  };
  class TransformPosition extends Dyno {
    constructor({
      position,
      scale,
      scales,
      rotate,
      translate
    }) {
      super({
        inTypes: {
          position: "vec3",
          scale: "float",
          scales: "vec3",
          rotate: "vec4",
          translate: "vec3"
        },
        outTypes: { position: "vec3" },
        inputs: { position, scale, scales, rotate, translate },
        statements: ({ inputs, outputs }) => {
          const { position: position2 } = outputs;
          if (!position2) {
            return [];
          }
          const { scale: scale2, scales: scales2, rotate: rotate2, translate: translate2 } = inputs;
          return [
            \`\${position2} = \${inputs.position ?? "vec3(0.0, 0.0, 0.0)"};\`,
            !scale2 ? null : \`\${position2} *= \${scale2};\`,
            !scales2 ? null : \`\${position2} *= \${scales2};\`,
            !rotate2 ? null : \`\${position2} = quatVec(\${rotate2}, \${position2});\`,
            !translate2 ? null : \`\${position2} += \${translate2};\`
          ].filter(Boolean);
        }
      });
    }
  }
  class TransformDir extends Dyno {
    constructor({
      dir,
      scale,
      scales,
      rotate
    }) {
      super({
        inTypes: { dir: "vec3", scale: "float", scales: "vec3", rotate: "vec4" },
        outTypes: { dir: "vec3" },
        inputs: { dir, scale, scales, rotate },
        statements: ({ inputs, outputs }) => {
          const { dir: dir2 } = outputs;
          if (!dir2) {
            return [];
          }
          const { scale: scale2, scales: scales2, rotate: rotate2 } = inputs;
          return [
            \`\${dir2} = \${inputs.dir ?? "vec3(0.0, 0.0, 0.0)"};\`,
            !scale2 ? null : \`\${dir2} *= \${scale2};\`,
            !scales2 ? null : \`\${dir2} *= \${scales2};\`,
            !rotate2 ? null : \`\${dir2} = quatVec(\${rotate2}, \${dir2});\`
          ].filter(Boolean);
        }
      });
    }
  }
  var computeUvec4_default = "precision highp float;\\nprecision highp int;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp sampler2DArray;\\nprecision highp usampler2DArray;\\nprecision highp isampler2DArray;\\nprecision highp sampler3D;\\nprecision highp usampler3D;\\nprecision highp isampler3D;\\n\\n#include <splatDefines>\\n\\nuniform uint targetLayer;\\nuniform int targetBase;\\nuniform int targetCount;\\n\\nout uvec4 target;\\n\\n{{ GLOBALS }}\\n\\nvoid produceSplat(int index) {\\n    {{ STATEMENTS }}\\n}\\n\\nvoid main() {\\n    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);\\n    int index = targetIndex - targetBase;\\n\\n    if ((index >= 0) && (index < targetCount)) {\\n        produceSplat(index);\\n    } else {\\n        target = uvec4(0u, 0u, 0u, 0u);\\n    }\\n}";
  const _PackedSplats = class _PackedSplats {
    constructor(options = {}) {
      this.maxSplats = 0;
      this.numSplats = 0;
      this.packedArray = null;
      this.isInitialized = false;
      this.target = null;
      this.source = null;
      this.needsUpdate = true;
      this.extra = {};
      this.dyno = new DynoPackedSplats({ packedSplats: this });
      this.initialized = Promise.resolve(this);
      this.reinitialize(options);
    }
    reinitialize(options) {
      this.isInitialized = false;
      if (options.url || options.fileBytes || options.construct) {
        this.initialized = this.asyncInitialize(options).then(() => {
          this.isInitialized = true;
          return this;
        });
      } else {
        this.initialize(options);
        this.isInitialized = true;
        this.initialized = Promise.resolve(this);
      }
    }
    initialize(options) {
      if (options.packedArray) {
        this.packedArray = options.packedArray;
        this.maxSplats = Math.floor(this.packedArray.length / 4);
        this.maxSplats = Math.floor(this.maxSplats / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
        this.numSplats = Math.min(
          this.maxSplats,
          options.numSplats ?? Number.POSITIVE_INFINITY
        );
      } else {
        this.maxSplats = options.maxSplats ?? 0;
        this.numSplats = 0;
      }
      this.extra = options.extra ?? {};
    }
    async asyncInitialize(options) {
      let { url, fileBytes, construct } = options;
      if (url) {
        fileBytes = await fetch(url).then(async (response) => {
          if (!response.ok) {
            throw new Error(
              \`\${response.status} "\${response.statusText}" fetching URL: \${url}\`
            );
          }
          const arrayBuffer = await response.arrayBuffer();
          return arrayBuffer;
        });
      }
      if (fileBytes) {
        const unpacked = await unpackSplats({
          input: fileBytes,
          fileType: options.fileType,
          pathOrUrl: options.fileName ?? url
        });
        this.initialize(unpacked);
      }
      if (construct) {
        const maybePromise = construct(this);
        if (maybePromise instanceof Promise) {
          await maybePromise;
        }
      }
    }
    // Call this when you are finished with the PackedSplats and want to free
    // any buffers it holds.
    dispose() {
      if (this.target) {
        this.target.dispose();
        this.target = null;
      }
      if (this.source) {
        this.source.dispose();
        this.source = null;
      }
    }
    // Ensures that this.packedArray can fit numSplats Gsplats. If it's too small,
    // resize exponentially and copy over the original data.
    //
    // Typically you don't need to call this, because calling this.setSplat(index, ...)
    // and this.pushSplat(...) will automatically call ensureSplats() so we have
    // enough splats.
    ensureSplats(numSplats) {
      const targetSize = numSplats <= this.maxSplats ? this.maxSplats : (
        // Grow exponentially to avoid frequent reallocations
        Math.max(numSplats, 2 * this.maxSplats)
      );
      const currentSize = !this.packedArray ? 0 : this.packedArray.length / 4;
      if (!this.packedArray || targetSize > currentSize) {
        this.maxSplats = getTextureSize(targetSize).maxSplats;
        const newArray = new Uint32Array(this.maxSplats * 4);
        if (this.packedArray) {
          newArray.set(this.packedArray);
        }
        this.packedArray = newArray;
      }
      return this.packedArray;
    }
    // Ensure the extra array for the given level is large enough to hold numSplats
    ensureSplatsSh(level, numSplats) {
      let wordsPerSplat;
      let key;
      if (level === 0) {
        return this.ensureSplats(numSplats);
      }
      if (level === 1) {
        wordsPerSplat = 2;
        key = "sh1";
      } else if (level === 2) {
        wordsPerSplat = 4;
        key = "sh2";
      } else if (level === 3) {
        wordsPerSplat = 4;
        key = "sh3";
      } else {
        throw new Error(\`Invalid level: \${level}\`);
      }
      let maxSplats = !this.extra[key] ? 0 : this.extra[key].length / wordsPerSplat;
      const targetSize = numSplats <= maxSplats ? maxSplats : Math.max(numSplats, 2 * maxSplats);
      if (!this.extra[key] || targetSize > maxSplats) {
        maxSplats = getTextureSize(targetSize).maxSplats;
        const newArray = new Uint32Array(maxSplats * wordsPerSplat);
        if (this.extra[key]) {
          newArray.set(this.extra[key]);
        }
        this.extra[key] = newArray;
      }
      return this.extra[key];
    }
    // Unpack the 16-byte Gsplat data at index into the Three.js components
    // center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion,
    // opacity: number 0..1, color: THREE.Color 0..1.
    getSplat(index) {
      if (!this.packedArray || index >= this.numSplats) {
        throw new Error("Invalid index");
      }
      return unpackSplat(this.packedArray, index);
    }
    // Set all PackedSplat components at index with the provided Gsplat attributes
    // (can be the same objects returned by getSplat). Ensures there is capacity
    // for at least index+1 Gsplats.
    setSplat(index, center, scales, quaternion, opacity, color) {
      const packedSplats = this.ensureSplats(index + 1);
      setPackedSplat(
        packedSplats,
        index,
        center.x,
        center.y,
        center.z,
        scales.x,
        scales.y,
        scales.z,
        quaternion.x,
        quaternion.y,
        quaternion.z,
        quaternion.w,
        opacity,
        color.r,
        color.g,
        color.b
      );
      this.numSplats = Math.max(this.numSplats, index + 1);
    }
    // Effectively calls this.setSplat(this.numSplats++, center, ...), useful on
    // construction where you just want to iterate and create a collection of Gsplats.
    pushSplat(center, scales, quaternion, opacity, color) {
      const packedSplats = this.ensureSplats(this.numSplats + 1);
      setPackedSplat(
        packedSplats,
        this.numSplats,
        center.x,
        center.y,
        center.z,
        scales.x,
        scales.y,
        scales.z,
        quaternion.x,
        quaternion.y,
        quaternion.z,
        quaternion.w,
        opacity,
        color.r,
        color.g,
        color.b
      );
      ++this.numSplats;
    }
    // Iterate over Gsplats index 0..=(this.numSplats-1), unpack each Gsplat
    // and invoke the callback function with the Gsplat attributes.
    forEachSplat(callback) {
      if (!this.packedArray || !this.numSplats) {
        return;
      }
      for (let i2 = 0; i2 < this.numSplats; ++i2) {
        const unpacked = unpackSplat(this.packedArray, i2);
        callback(
          i2,
          unpacked.center,
          unpacked.scales,
          unpacked.quaternion,
          unpacked.opacity,
          unpacked.color
        );
      }
    }
    // Ensures our PackedSplats.target render target has enough space to generate
    // maxSplats total Gsplats, and reallocate if not large enough.
    ensureGenerate(maxSplats) {
      if (this.target && (maxSplats ?? 1) <= this.maxSplats) {
        return false;
      }
      this.dispose();
      const textureSize = getTextureSize(maxSplats ?? 1);
      const { width, height, depth } = textureSize;
      this.maxSplats = textureSize.maxSplats;
      this.target = new WebGLArrayRenderTarget(width, height, depth, {
        depthBuffer: false,
        stencilBuffer: false,
        generateMipmaps: false,
        magFilter: NearestFilter,
        minFilter: NearestFilter
      });
      this.target.texture.format = RGBAIntegerFormat;
      this.target.texture.type = UnsignedIntType;
      this.target.texture.internalFormat = "RGBA32UI";
      return true;
    }
    // Given an array of splatCounts (.numSplats for each
    // SplatGenerator/SplatMesh in the scene), compute a
    // "mapping layout" in the composite array of generated outputs.
    generateMapping(splatCounts) {
      let maxSplats = 0;
      const mapping = splatCounts.map((numSplats) => {
        const base = maxSplats;
        const rounded = Math.ceil(numSplats / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
        maxSplats += rounded;
        return { base, count: numSplats };
      });
      return { maxSplats, mapping };
    }
    // Returns a THREE.DataArrayTexture representing the PackedSplats content as
    // a Uint32x4 data array texture (2048 x 2048 x depth in size)
    getTexture() {
      if (this.target) {
        return this.target.texture;
      }
      if (this.source || this.packedArray) {
        const source = this.maybeUpdateSource();
        return source;
      }
      return _PackedSplats.getEmpty();
    }
    // Check if source texture needs to be created/updated
    maybeUpdateSource() {
      if (!this.packedArray) {
        throw new Error("No packed splats");
      }
      if (this.needsUpdate || !this.source) {
        this.needsUpdate = false;
        if (this.source) {
          const { width, height, depth } = this.source.image;
          if (this.maxSplats !== width * height * depth) {
            this.source.dispose();
            this.source = null;
          }
        }
        if (!this.source) {
          const { width, height, depth } = getTextureSize(this.maxSplats);
          this.source = new DataArrayTexture(
            this.packedArray,
            width,
            height,
            depth
          );
          this.source.format = RGBAIntegerFormat;
          this.source.type = UnsignedIntType;
          this.source.internalFormat = "RGBA32UI";
          this.source.needsUpdate = true;
        } else if (this.packedArray.buffer !== this.source.image.data.buffer) {
          this.source.image.data = new Uint8Array(this.packedArray.buffer);
        }
        this.source.needsUpdate = true;
      }
      return this.source;
    }
    // Can be used where you need an uninitialized THREE.DataArrayTexture like
    // a uniform you will update with the result of this.getTexture() later.
    static getEmpty() {
      if (!_PackedSplats.emptySource) {
        const { width, height, depth, maxSplats } = getTextureSize(1);
        const emptyArray = new Uint32Array(maxSplats * 4);
        _PackedSplats.emptySource = new DataArrayTexture(
          emptyArray,
          width,
          height,
          depth
        );
        _PackedSplats.emptySource.format = RGBAIntegerFormat;
        _PackedSplats.emptySource.type = UnsignedIntType;
        _PackedSplats.emptySource.internalFormat = "RGBA32UI";
        _PackedSplats.emptySource.needsUpdate = true;
      }
      return _PackedSplats.emptySource;
    }
    // Get a program and THREE.RawShaderMaterial for a given GsplatGenerator,
    // generating it if necessary and caching the result.
    prepareProgramMaterial(generator) {
      let program = _PackedSplats.generatorProgram.get(generator);
      if (!program) {
        const graph = dynoBlock(
          { index: "int" },
          { output: "uvec4" },
          ({ index }) => {
            generator.inputs.index = index;
            const gsplat = generator.outputs.gsplat;
            const output = outputPackedSplat(gsplat);
            return { output };
          }
        );
        if (!_PackedSplats.programTemplate) {
          _PackedSplats.programTemplate = new DynoProgramTemplate(
            computeUvec4_default
          );
        }
        program = new DynoProgram({
          graph,
          inputs: { index: "index" },
          outputs: { output: "target" },
          template: _PackedSplats.programTemplate
        });
        Object.assign(program.uniforms, {
          targetLayer: { value: 0 },
          targetBase: { value: 0 },
          targetCount: { value: 0 }
        });
        _PackedSplats.generatorProgram.set(generator, program);
      }
      const material = program.prepareMaterial();
      _PackedSplats.mesh.material = material;
      return { program, material };
    }
    saveRenderState(renderer) {
      return {
        xrPresenting: renderer.xr.isPresenting,
        autoClear: renderer.autoClear,
        scissorTest: renderer.getScissorTest(),
        pixelRatio: renderer.getPixelRatio()
      };
    }
    resetRenderState(renderer, state) {
      renderer.setRenderTarget(null);
      renderer.setPixelRatio(state.pixelRatio);
      renderer.xr.isPresenting = state.xrPresenting;
      renderer.autoClear = state.autoClear;
      renderer.setScissorTest(state.scissorTest);
    }
    // Executes a dyno program specified by generator which is any DynoBlock that
    // maps { index: "int" } to { gsplat: Gsplat }. This is called in
    // SparkRenderer.updateInternal() to re-generate Gsplats in the scene for
    // SplatGenerator instances whose version is newer than what was generated
    // for it last time.
    generate({
      generator,
      base,
      count,
      renderer
    }) {
      if (!this.target) {
        throw new Error("Target must be initialized with ensureSplats");
      }
      if (base + count > this.maxSplats) {
        throw new Error("Base + count exceeds maxSplats");
      }
      const { program, material } = this.prepareProgramMaterial(generator);
      program.update();
      const renderState = this.saveRenderState(renderer);
      const nextBase = Math.ceil((base + count) / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
      const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;
      material.uniforms.targetBase.value = base;
      material.uniforms.targetCount.value = count;
      while (base < nextBase) {
        const layer = Math.floor(base / layerSize);
        material.uniforms.targetLayer.value = layer;
        const layerBase = layer * layerSize;
        const layerYStart = Math.floor((base - layerBase) / SPLAT_TEX_WIDTH);
        const layerYEnd = Math.min(
          SPLAT_TEX_HEIGHT,
          Math.ceil((nextBase - layerBase) / SPLAT_TEX_WIDTH)
        );
        renderer.setPixelRatio(1);
        renderer.setRenderTarget(this.target, layer);
        renderer.xr.isPresenting = false;
        renderer.autoClear = false;
        renderer.setScissorTest(true);
        renderer.setScissor(
          0,
          layerYStart,
          SPLAT_TEX_WIDTH,
          layerYEnd - layerYStart
        );
        renderer.render(_PackedSplats.scene, _PackedSplats.camera);
        base += SPLAT_TEX_WIDTH * (layerYEnd - layerYStart);
      }
      this.resetRenderState(renderer, renderState);
      return { nextBase };
    }
  };
  _PackedSplats.emptySource = null;
  _PackedSplats.programTemplate = null;
  _PackedSplats.generatorProgram = /* @__PURE__ */ new Map();
  _PackedSplats.geometry = new PlaneGeometry(2, 2);
  _PackedSplats.mesh = new Mesh(
    _PackedSplats.geometry,
    new RawShaderMaterial({ visible: false })
  );
  _PackedSplats.scene = new Scene().add(_PackedSplats.mesh);
  _PackedSplats.camera = new Camera();
  let PackedSplats = _PackedSplats;
  class DynoPackedSplats extends DynoUniform {
    constructor({ packedSplats } = {}) {
      super({
        key: "packedSplats",
        type: TPackedSplats,
        globals: () => [definePackedSplats],
        value: {
          texture: PackedSplats.getEmpty(),
          numSplats: 0
        },
        update: (value) => {
          var _a2, _b2;
          value.texture = ((_a2 = this.packedSplats) == null ? void 0 : _a2.getTexture()) ?? PackedSplats.getEmpty();
          value.numSplats = ((_b2 = this.packedSplats) == null ? void 0 : _b2.numSplats) ?? 0;
          return value;
        }
      });
      this.packedSplats = packedSplats;
    }
  }
  var computeVec4_default = "precision highp float;\\nprecision highp int;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp sampler2DArray;\\nprecision highp usampler2DArray;\\nprecision highp isampler2DArray;\\nprecision highp sampler3D;\\nprecision highp usampler3D;\\nprecision highp isampler3D;\\n\\n#include <splatDefines>\\n\\nuniform uint targetLayer;\\nuniform int targetBase;\\nuniform int targetCount;\\n\\nout vec4 target;\\n\\n{{ GLOBALS }}\\n\\nvoid computeReadback(int index) {\\n    {{ STATEMENTS }}\\n}\\n\\nvoid main() {\\n    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);\\n    int index = targetIndex - targetBase;\\n\\n    if ((index >= 0) && (index < targetCount)) {\\n        computeReadback(index);\\n    } else {\\n        target = vec4(0.0, 0.0, 0.0, 0.0);\\n    }\\n}";
  const _Readback = class _Readback {
    constructor({ renderer } = {}) {
      this.renderer = renderer;
      this.capacity = 0;
      this.count = 0;
    }
    dispose() {
      if (this.target) {
        this.target.dispose();
        this.target = void 0;
      }
    }
    // Ensure we have a buffer large enough for the readback of count indices.
    // Pass in previous bufer of the desired type.
    ensureBuffer(count, buffer) {
      const roundedCount = Math.ceil(Math.max(1, count) / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
      const bytes = roundedCount * 4;
      if (buffer.byteLength >= bytes) {
        return buffer;
      }
      const newBuffer = new ArrayBuffer(bytes);
      if (buffer instanceof ArrayBuffer) {
        return newBuffer;
      }
      const ctor = buffer.constructor;
      return new ctor(newBuffer);
    }
    // Ensure our render target is large enough for the readback of capacity indices.
    ensureCapacity(capacity) {
      const { width, height, depth, maxSplats } = getTextureSize(capacity);
      if (!this.target || maxSplats > this.capacity) {
        this.dispose();
        this.capacity = maxSplats;
        this.target = new WebGLArrayRenderTarget(width, height, depth, {
          depthBuffer: false,
          stencilBuffer: false,
          generateMipmaps: false,
          magFilter: NearestFilter,
          minFilter: NearestFilter
        });
        this.target.texture.format = RGBAFormat;
        this.target.texture.type = UnsignedByteType;
        this.target.texture.internalFormat = "RGBA8";
      }
    }
    // Get a program and THREE.RawShaderMaterial for a given Rgba8Readback,
    // generating it if necessary and caching the result.
    prepareProgramMaterial(reader) {
      let program = _Readback.readbackProgram.get(reader);
      if (!program) {
        const graph = dynoBlock(
          { index: "int" },
          { rgba8: "vec4" },
          ({ index }) => {
            reader.inputs.index = index;
            const rgba8 = new OutputRgba8({ rgba8: reader.outputs.rgba8 });
            return { rgba8 };
          }
        );
        if (!_Readback.programTemplate) {
          _Readback.programTemplate = new DynoProgramTemplate(computeVec4_default);
        }
        program = new DynoProgram({
          graph,
          inputs: { index: "index" },
          outputs: { rgba8: "target" },
          template: _Readback.programTemplate
        });
        Object.assign(program.uniforms, {
          targetLayer: { value: 0 },
          targetBase: { value: 0 },
          targetCount: { value: 0 }
        });
        _Readback.readbackProgram.set(reader, program);
      }
      const material = program.prepareMaterial();
      _Readback.mesh.material = material;
      return { program, material };
    }
    saveRenderState(renderer) {
      return {
        xrPresenting: renderer.xr.isPresenting,
        autoClear: renderer.autoClear,
        scissorTest: renderer.getScissorTest(),
        pixelRatio: renderer.getPixelRatio()
      };
    }
    resetRenderState(renderer, state) {
      renderer.setRenderTarget(null);
      renderer.setPixelRatio(state.pixelRatio);
      renderer.xr.isPresenting = state.xrPresenting;
      renderer.autoClear = state.autoClear;
      renderer.setScissorTest(state.scissorTest);
    }
    process({
      count,
      material
    }) {
      const renderer = this.renderer;
      if (!renderer) {
        throw new Error("No renderer");
      }
      if (!this.target) {
        throw new Error("No target");
      }
      const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;
      material.uniforms.targetBase.value = 0;
      material.uniforms.targetCount.value = count;
      let baseIndex = 0;
      while (baseIndex < count) {
        const layer = Math.floor(baseIndex / layerSize);
        const layerBase = layer * layerSize;
        const layerYEnd = Math.min(
          SPLAT_TEX_HEIGHT,
          Math.ceil((count - layerBase) / SPLAT_TEX_WIDTH)
        );
        material.uniforms.targetLayer.value = layer;
        renderer.setPixelRatio(1);
        renderer.setRenderTarget(this.target, layer);
        renderer.xr.isPresenting = false;
        renderer.autoClear = false;
        renderer.setScissorTest(true);
        renderer.setScissor(0, 0, SPLAT_TEX_WIDTH, layerYEnd);
        renderer.render(_Readback.scene, _Readback.camera);
        baseIndex += SPLAT_TEX_WIDTH * layerYEnd;
      }
      this.count = count;
    }
    async read({
      readback
    }) {
      const renderer = this.renderer;
      if (!renderer) {
        throw new Error("No renderer");
      }
      if (!this.target) {
        throw new Error("No target");
      }
      const roundedCount = Math.ceil(this.count / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
      if (readback.byteLength < roundedCount * 4) {
        throw new Error(
          \`Readback buffer too small: \${readback.byteLength} < \${roundedCount * 4}\`
        );
      }
      const readbackUint8 = new Uint8Array(
        readback instanceof ArrayBuffer ? readback : readback.buffer
      );
      const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;
      let baseIndex = 0;
      const promises = [];
      while (baseIndex < this.count) {
        const layer = Math.floor(baseIndex / layerSize);
        const layerBase = layer * layerSize;
        const layerYEnd = Math.min(
          SPLAT_TEX_HEIGHT,
          Math.ceil((this.count - layerBase) / SPLAT_TEX_WIDTH)
        );
        renderer.setPixelRatio(1);
        renderer.setRenderTarget(this.target, layer);
        const readbackSize = SPLAT_TEX_WIDTH * layerYEnd * 4;
        const subReadback = readbackUint8.subarray(
          layerBase * 4,
          layerBase * 4 + readbackSize
        );
        const promise = renderer == null ? void 0 : renderer.readRenderTargetPixelsAsync(
          this.target,
          0,
          0,
          SPLAT_TEX_WIDTH,
          layerYEnd,
          subReadback
        );
        promises.push(promise);
        baseIndex += SPLAT_TEX_WIDTH * layerYEnd;
      }
      return Promise.all(promises).then(() => readback);
    }
    // Perform render operation to run the Rgba8Readback program
    // but don't perform the readback yet.
    render({
      reader,
      count,
      renderer
    }) {
      this.renderer = renderer || this.renderer;
      if (!this.renderer) {
        throw new Error("No renderer");
      }
      this.ensureCapacity(count);
      const { program, material } = this.prepareProgramMaterial(reader);
      program.update();
      const renderState = this.saveRenderState(this.renderer);
      this.process({ count, material });
      this.resetRenderState(this.renderer, renderState);
    }
    // Perform a readback of the render target, returning a buffer of the
    // given type.
    async readback({
      readback
    }) {
      if (!this.renderer) {
        throw new Error("No renderer");
      }
      const renderState = this.saveRenderState(this.renderer);
      const promise = this.read({ readback });
      this.resetRenderState(this.renderer, renderState);
      return promise;
    }
    // Perform a render and readback operation for the given Rgba8Readback,
    // and readback buffer (call ensureBuffer first).
    async renderReadback({
      reader,
      count,
      renderer,
      readback
    }) {
      this.renderer = renderer || this.renderer;
      if (!this.renderer) {
        throw new Error("No renderer");
      }
      this.ensureCapacity(count);
      const { program, material } = this.prepareProgramMaterial(reader);
      program.update();
      const renderState = this.saveRenderState(this.renderer);
      this.process({ count, material });
      const promise = this.read({ readback });
      this.resetRenderState(this.renderer, renderState);
      return promise;
    }
    getTexture() {
      var _a2;
      return (_a2 = this.target) == null ? void 0 : _a2.texture;
    }
  };
  _Readback.programTemplate = null;
  _Readback.readbackProgram = /* @__PURE__ */ new Map();
  _Readback.geometry = new PlaneGeometry(2, 2);
  _Readback.mesh = new Mesh(
    _Readback.geometry,
    new RawShaderMaterial({ visible: false })
  );
  _Readback.scene = new Scene().add(_Readback.mesh);
  _Readback.camera = new Camera();
  let Readback = _Readback;
  const _RgbaArray = class _RgbaArray {
    constructor(options = {}) {
      this.capacity = 0;
      this.count = 0;
      this.array = null;
      this.readback = null;
      this.source = null;
      this.needsUpdate = true;
      this.dyno = new DynoUniform({
        key: "rgbaArray",
        type: TRgbaArray,
        globals: () => [defineRgbaArray],
        value: {
          texture: _RgbaArray.getEmpty(),
          count: 0
        },
        update: (value) => {
          var _a2;
          value.texture = ((_a2 = this.readback) == null ? void 0 : _a2.getTexture()) ?? this.source ?? _RgbaArray.getEmpty();
          value.count = this.count;
          return value;
        }
      });
      if (options.array) {
        this.array = options.array;
        this.capacity = Math.floor(this.array.length / 4);
        this.capacity = Math.floor(this.capacity / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
        this.count = Math.min(
          this.capacity,
          options.count ?? Number.POSITIVE_INFINITY
        );
      } else {
        this.capacity = options.capacity ?? 0;
        this.count = 0;
      }
    }
    // Free up resources
    dispose() {
      if (this.readback) {
        this.readback.dispose();
        this.readback = null;
      }
      if (this.source) {
        this.source.dispose();
        this.source = null;
      }
    }
    // Ensure that our array is large enough to hold capacity RGBA8 values.
    ensureCapacity(capacity) {
      var _a2;
      if (!this.array || capacity > (((_a2 = this.array) == null ? void 0 : _a2.length) ?? 0) / 4) {
        this.capacity = getTextureSize(capacity).maxSplats;
        const newArray = new Uint8Array(this.capacity * 4);
        if (this.array) {
          newArray.set(this.array);
        }
        this.array = newArray;
      }
      return this.array;
    }
    // Get the THREE.DataArrayTexture from either the readback or the source.
    getTexture() {
      var _a2;
      let texture = (_a2 = this.readback) == null ? void 0 : _a2.getTexture();
      if (this.source || this.array) {
        texture = this.maybeUpdateSource();
      }
      return texture ?? _RgbaArray.getEmpty();
    }
    // Create or get a THREE.DataArrayTexture from the data array.
    maybeUpdateSource() {
      if (!this.array) {
        throw new Error("No array");
      }
      if (this.needsUpdate || !this.source) {
        this.needsUpdate = false;
        if (this.source) {
          const { width, height, depth } = this.source.image;
          if (this.capacity !== width * height * depth) {
            this.source.dispose();
            this.source = null;
          }
        }
        if (!this.source) {
          const { width, height, depth } = getTextureSize(this.capacity);
          this.source = new DataArrayTexture(
            this.array,
            width,
            height,
            depth
          );
          this.source.format = RGBAFormat;
          this.source.type = UnsignedByteType;
          this.source.internalFormat = "RGBA8";
          this.source.needsUpdate = true;
        } else if (this.array.buffer !== this.source.image.data.buffer) {
          this.source.image.data = new Uint8Array(this.array.buffer);
        }
        this.source.needsUpdate = true;
      }
      return this.source;
    }
    // Generate the RGBA8 values from a Rgba8Readback dyno program.
    render({
      reader,
      count,
      renderer
    }) {
      if (!this.readback) {
        this.readback = new Readback({ renderer });
      }
      this.readback.render({ reader, count, renderer });
      this.capacity = this.readback.capacity;
      this.count = this.readback.count;
    }
    // Extract the RGBA8 values from a PackedSplats collection.
    fromPackedSplats({
      packedSplats,
      base,
      count,
      renderer
    }) {
      const { dynoSplats, dynoBase, dynoCount, reader } = _RgbaArray.makeDynos();
      dynoSplats.packedSplats = packedSplats;
      dynoBase.value = base;
      dynoCount.value = count;
      this.render({ reader, count, renderer });
      return this;
    }
    // Read back the RGBA8 values from the readback buffer.
    async read() {
      if (!this.readback) {
        throw new Error("No readback");
      }
      if (!this.array || this.array.length < this.count * 4) {
        this.array = new Uint8Array(this.capacity * 4);
      }
      const result = await this.readback.readback({ readback: this.array });
      return result.subarray(0, this.count * 4);
    }
    // Can be used where you need an uninitialized THREE.DataArrayTexture like
    // a uniform you will update with the result of this.getTexture() later.
    static getEmpty() {
      if (!_RgbaArray.emptySource) {
        const emptyArray = new Uint8Array(1 * 4);
        _RgbaArray.emptySource = new DataArrayTexture(emptyArray, 1, 1, 1);
        _RgbaArray.emptySource.format = RGBAFormat;
        _RgbaArray.emptySource.type = UnsignedByteType;
        _RgbaArray.emptySource.internalFormat = "RGBA8";
        _RgbaArray.emptySource.needsUpdate = true;
      }
      return _RgbaArray.emptySource;
    }
    // Create a dyno program that can extract RGBA8 values from a PackedSplats
    static makeDynos() {
      if (!_RgbaArray.dynos) {
        const dynoSplats = new DynoPackedSplats();
        const dynoBase = new DynoInt({ value: 0 });
        const dynoCount = new DynoInt({ value: 0 });
        const reader = dynoBlock(
          { index: "int" },
          { rgba8: "vec4" },
          ({ index }) => {
            if (!index) {
              throw new Error("index is undefined");
            }
            index = add(index, dynoBase);
            const gsplat = readPackedSplatRange(
              dynoSplats,
              index,
              dynoBase,
              dynoCount
            );
            return { rgba8: splitGsplat(gsplat).outputs.rgba };
          }
        );
        _RgbaArray.dynos = { dynoSplats, dynoBase, dynoCount, reader };
      }
      return _RgbaArray.dynos;
    }
  };
  _RgbaArray.emptySource = null;
  _RgbaArray.dynos = null;
  let RgbaArray = _RgbaArray;
  const TRgbaArray = { type: "RgbaArray" };
  const defineRgbaArray = unindent(\`
  struct RgbaArray {
    sampler2DArray texture;
    int count;
  };
\`);
  function readRgbaArray(rgba, index) {
    const dyno2 = new Dyno({
      inTypes: { rgba: TRgbaArray, index: "int" },
      outTypes: { rgba: "vec4" },
      inputs: { rgba, index },
      globals: () => [defineRgbaArray],
      statements: ({ inputs, outputs }) => unindentLines(\`
        if ((index >= 0) && (index < \${inputs.rgba}.count)) {
          \${outputs.rgba} = texelFetch(\${inputs.rgba}.texture, splatTexCoord(index), 0);
        } else {
          \${outputs.rgba} = vec4(0.0, 0.0, 0.0, 0.0);
        }
      \`)
    });
    return dyno2.outputs.rgba;
  }
  function sdfTypeToNumber(type) {
    switch (type) {
      case "all":
        return 0;
      case "plane":
        return 1;
      case "sphere":
        return 2;
      case "box":
        return 3;
      case "ellipsoid":
        return 4;
      case "cylinder":
        return 5;
      case "capsule":
        return 6;
      case "infinite_cone":
        return 7;
      default:
        throw new Error(\`Unknown SDF type: \${type}\`);
    }
  }
  function rgbaBlendModeToNumber(mode) {
    switch (mode) {
      case "multiply":
        return 0;
      case "set_rgb":
        return 1;
      case "add_rgba":
        return 2;
      default:
        throw new Error(\`Unknown blend mode: \${mode}\`);
    }
  }
  class SplatEditSdf extends Object3D {
    constructor(options = {}) {
      super();
      const { type, invert, opacity, color, displace, radius } = options;
      this.type = type ?? "sphere";
      this.invert = invert ?? false;
      this.opacity = opacity ?? 1;
      this.color = color ?? new Color(1, 1, 1);
      this.displace = displace ?? new Vector3(0, 0, 0);
      this.radius = radius ?? 0;
    }
  }
  const _SplatEdit = class _SplatEdit extends Object3D {
    constructor(options = {}) {
      const {
        name,
        rgbaBlendMode = "multiply",
        sdfSmooth = 0,
        softEdge = 0,
        invert = false,
        sdfs = null
      } = options;
      super();
      this.rgbaBlendMode = rgbaBlendMode;
      this.sdfSmooth = sdfSmooth;
      this.softEdge = softEdge;
      this.invert = invert;
      this.sdfs = sdfs;
      this.ordering = _SplatEdit.nextOrdering++;
      this.name = name ?? \`Edit \${this.ordering}\`;
    }
    addSdf(sdf) {
      if (this.sdfs == null) {
        this.sdfs = [];
      }
      this.sdfs.push(sdf);
    }
    removeSdf(sdf) {
      if (this.sdfs == null) {
        return;
      }
      this.sdfs = this.sdfs.filter((s) => s !== sdf);
    }
  };
  _SplatEdit.nextOrdering = 1;
  let SplatEdit = _SplatEdit;
  class SplatEdits {
    constructor({ maxSdfs, maxEdits }) {
      this.maxSdfs = Math.max(16, maxSdfs ?? 0);
      this.numSdfs = 0;
      this.sdfData = new Uint32Array(this.maxSdfs * 8 * 4);
      this.sdfFloatData = new Float32Array(this.sdfData.buffer);
      this.sdfTexture = this.newSdfTexture(this.sdfData, this.maxSdfs);
      this.dynoSdfArray = new DynoUniform({
        key: "sdfArray",
        type: SdfArray,
        globals: () => [defineSdfArray],
        value: {
          numSdfs: 0,
          sdfTexture: this.sdfTexture
        },
        update: (uniform) => {
          uniform.numSdfs = this.numSdfs;
          uniform.sdfTexture = this.sdfTexture;
          return uniform;
        }
      });
      this.maxEdits = Math.max(16, maxEdits ?? 0);
      this.numEdits = 0;
      this.editData = new Uint32Array(this.maxEdits * 4);
      this.editFloatData = new Float32Array(this.editData.buffer);
      this.dynoNumEdits = new DynoInt({ value: 0 });
      this.dynoEdits = this.newEdits(this.editData, this.maxEdits);
    }
    newSdfTexture(data, maxSdfs) {
      const texture = new DataTexture(
        data,
        8,
        maxSdfs,
        RGBAIntegerFormat,
        UnsignedIntType
      );
      texture.internalFormat = "RGBA32UI";
      texture.needsUpdate = true;
      return texture;
    }
    newEdits(data, maxEdits) {
      return new DynoUniform({
        key: "edits",
        type: "uvec4",
        count: maxEdits,
        globals: () => [defineEdit],
        value: data
      });
    }
    // Ensure our SDF texture and edits uniform array have enough capacity.
    // Reallocate if not.
    ensureCapacity({
      maxSdfs,
      maxEdits
    }) {
      let dynoUpdated = false;
      if (maxSdfs > this.sdfTexture.image.height) {
        this.sdfTexture.dispose();
        this.maxSdfs = Math.max(this.maxSdfs * 2, maxSdfs);
        this.sdfData = new Uint32Array(this.maxSdfs * 8 * 4);
        this.sdfFloatData = new Float32Array(this.sdfData.buffer);
        this.sdfTexture = this.newSdfTexture(this.sdfData, this.maxSdfs);
      }
      if (maxEdits > (this.dynoEdits.count ?? 0)) {
        this.maxEdits = Math.max(this.maxEdits * 2, maxEdits);
        this.editData = new Uint32Array(this.maxEdits * 4);
        this.editFloatData = new Float32Array(this.editData.buffer);
        this.dynoEdits = this.newEdits(this.editData, this.maxEdits);
        dynoUpdated = true;
      }
      return dynoUpdated;
    }
    updateEditData(offset, value) {
      const updated = this.editData[offset] !== value;
      this.editData[offset] = value;
      return updated;
    }
    updateEditFloatData(offset, value) {
      tempFloat32[0] = value;
      const updated = this.editFloatData[offset] !== tempFloat32[0];
      if (updated) {
        this.editFloatData[offset] = tempFloat32[0];
      }
      return updated;
    }
    encodeEdit(editIndex, {
      sdfFirst,
      sdfCount,
      invert,
      rgbaBlendMode,
      softEdge,
      sdfSmooth
    }) {
      const base = editIndex * 4;
      let updated = false;
      updated = this.updateEditData(base + 0, rgbaBlendMode | (invert ? 1 << 8 : 0)) || updated;
      updated = this.updateEditData(base + 1, sdfFirst | sdfCount << 16) || updated;
      updated = this.updateEditFloatData(base + 2, softEdge) || updated;
      updated = this.updateEditFloatData(base + 3, sdfSmooth) || updated;
      return updated;
    }
    updateSdfData(offset, value) {
      const updated = this.sdfData[offset] !== value;
      this.sdfData[offset] = value;
      return updated;
    }
    updateSdfFloatData(offset, value) {
      tempFloat32[0] = value;
      const updated = this.sdfFloatData[offset] !== tempFloat32[0];
      if (updated) {
        this.sdfFloatData[offset] = tempFloat32[0];
      }
      return updated;
    }
    encodeSdf(sdfIndex, {
      sdfType,
      invert,
      center,
      quaternion,
      scale,
      sizes
    }, values) {
      const base = sdfIndex * (8 * 4);
      const flags = sdfType | (invert ? 1 << 8 : 0);
      let updated = false;
      updated = this.updateSdfFloatData(base + 0, (center == null ? void 0 : center.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 1, (center == null ? void 0 : center.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 2, (center == null ? void 0 : center.z) ?? 0) || updated;
      updated = this.updateSdfData(base + 3, flags) || updated;
      updated = this.updateSdfFloatData(base + 4, (quaternion == null ? void 0 : quaternion.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 5, (quaternion == null ? void 0 : quaternion.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 6, (quaternion == null ? void 0 : quaternion.z) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 7, (quaternion == null ? void 0 : quaternion.w) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 8, (scale == null ? void 0 : scale.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 9, (scale == null ? void 0 : scale.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 10, (scale == null ? void 0 : scale.z) ?? 0) || updated;
      updated = this.updateSdfData(base + 11, 0) || updated;
      updated = this.updateSdfFloatData(base + 12, (sizes == null ? void 0 : sizes.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 13, (sizes == null ? void 0 : sizes.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 14, (sizes == null ? void 0 : sizes.z) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 15, (sizes == null ? void 0 : sizes.w) ?? 0) || updated;
      const nValues = Math.min(4, values.length);
      for (let i2 = 0; i2 < nValues; ++i2) {
        const vBase = base + 16 + i2 * 4;
        updated = this.updateSdfFloatData(vBase + 0, values[i2].x) || updated;
        updated = this.updateSdfFloatData(vBase + 1, values[i2].y) || updated;
        updated = this.updateSdfFloatData(vBase + 2, values[i2].z) || updated;
        updated = this.updateSdfFloatData(vBase + 3, values[i2].w) || updated;
      }
      return updated;
    }
    // Update the SDFs and edits from an array of SplatEdits and their
    // associated SplatEditSdfs, updating it for the dyno shader program.
    update(edits) {
      const sdfCount = edits.reduce((total, { sdfs }) => total + sdfs.length, 0);
      const dynoUpdated = this.ensureCapacity({
        maxEdits: edits.length,
        maxSdfs: sdfCount
      });
      const values = [new Vector4(), new Vector4()];
      const center = new Vector3();
      const quaternion = new Quaternion();
      const scale = new Vector3();
      const sizes = new Vector4();
      let sdfIndex = 0;
      let updated = dynoUpdated;
      if (edits.length !== this.dynoNumEdits.value) {
        this.dynoNumEdits.value = edits.length;
        this.numEdits = edits.length;
        updated = true;
      }
      for (const [editIndex, { edit, sdfs }] of edits.entries()) {
        updated = this.encodeEdit(editIndex, {
          sdfFirst: sdfIndex,
          sdfCount: sdfs.length,
          invert: edit.invert,
          rgbaBlendMode: rgbaBlendModeToNumber(edit.rgbaBlendMode),
          softEdge: edit.softEdge,
          sdfSmooth: edit.sdfSmooth
        }) || updated;
        let sdfUpdated = false;
        for (const sdf of sdfs) {
          sizes.set(sdf.scale.x, sdf.scale.y, sdf.scale.z, sdf.radius);
          sdf.scale.setScalar(1);
          sdf.updateMatrixWorld();
          const worldToSdf = sdf.matrixWorld.clone().invert();
          worldToSdf.decompose(center, quaternion, scale);
          sdf.scale.set(sizes.x, sizes.y, sizes.z);
          sdf.updateMatrixWorld();
          values[0].set(sdf.color.r, sdf.color.g, sdf.color.b, sdf.opacity);
          values[1].set(sdf.displace.x, sdf.displace.y, sdf.displace.z, 1);
          sdfUpdated = this.encodeSdf(
            sdfIndex,
            {
              sdfType: sdfTypeToNumber(sdf.type),
              invert: sdf.invert,
              center,
              quaternion,
              scale,
              sizes
            },
            values
          ) || sdfUpdated;
          sdfIndex += 1;
        }
        this.numSdfs = sdfIndex;
        if (sdfUpdated) {
          this.sdfTexture.needsUpdate = true;
        }
        updated || (updated = sdfUpdated);
      }
      return { updated, dynoUpdated };
    }
    // Modify a Gsplat in a dyno shader program using the current edits and SDFs.
    modify(gsplat) {
      return applyGsplatRgbaDisplaceEdits(
        gsplat,
        this.dynoSdfArray,
        this.dynoNumEdits,
        this.dynoEdits
      );
    }
  }
  const SdfArray = { type: "SdfArray" };
  const defineSdfArray = unindent(\`
  struct SdfArray {
    int numSdfs;
    usampler2D sdfTexture;
  };

  void unpackSdfArray(
    usampler2D sdfTexture, int sdfIndex, out uint flags,
    out vec3 center, out vec4 quaternion, out vec3 scale, out vec4 sizes,
    int numValues, out vec4 values[4]
  ) {
    uvec4 temp = texelFetch(sdfTexture, ivec2(0, sdfIndex), 0);
    flags = temp.w;
    center = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(1, sdfIndex), 0);
    quaternion = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    temp = texelFetch(sdfTexture, ivec2(2, sdfIndex), 0);
    scale = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(3, sdfIndex), 0);
    sizes = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    for (int i = 0; i < numValues; ++i) {
      temp = texelFetch(sdfTexture, ivec2(4 + i, sdfIndex), 0);
      values[i] = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));
    }
  }

  const uint SDF_FLAG_TYPE = 0xFFu;
  const uint SDF_FLAG_INVERT = 1u << 8u;

  const uint SDF_TYPE_ALL = 0u;
  const uint SDF_TYPE_PLANE = 1u;
  const uint SDF_TYPE_SPHERE = 2u;
  const uint SDF_TYPE_BOX = 3u;
  const uint SDF_TYPE_ELLIPSOID = 4u;
  const uint SDF_TYPE_CYLINDER = 5u;
  const uint SDF_TYPE_CAPSULE = 6u;
  const uint SDF_TYPE_INFINITE_CONE = 7u;

  float evaluateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 outValues[4]
  ) {
    float distanceAccum = (smoothK == 0.0) ? 1.0 / 0.0 : 0.0;
    float maxExp = -1.0 / 0.0;
    for (int i = 0; i < numValues; ++i) {
        outValues[i] = vec4(0.0);
    }

    uint flags;
    vec3 center, scale;
    vec4 quaternion, sizes;
    vec4 values[4];

    int sdfLast = min(sdfFirst + sdfCount, numSdfs);
    for (int index = sdfFirst; index < sdfLast; ++index) {
      unpackSdfArray(sdfTexture, index, flags, center, quaternion, scale, sizes, numValues, values);
      uint sdfType = flags & SDF_FLAG_TYPE;
      vec3 sdfPos = quatVec(quaternion, pos * scale) + center;

      float distance;
      switch (sdfType) {
        case SDF_TYPE_ALL:
          distance = -1.0 / 0.0;
          break;
        case SDF_TYPE_PLANE: {
          distance = sdfPos.z;
          break;
        }
        case SDF_TYPE_SPHERE: {
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_BOX: {
          vec3 q = abs(sdfPos) - sizes.xyz + sizes.w;
          distance = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - sizes.w;
          break;
        }
        case SDF_TYPE_ELLIPSOID: {
          vec3 sizes = sizes.xyz;
          float k0 = length(sdfPos / sizes);
          float k1 = length(sdfPos / dot(sizes, sizes));
          distance = k0 * (k0 - 1.0) / k1;
          break;
        }
        case SDF_TYPE_CYLINDER: {
          vec2 d = abs(vec2(length(sdfPos.xz), sdfPos.y)) - sizes.wy;
          distance = min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
          break;
        }
        case SDF_TYPE_CAPSULE: {
          sdfPos.y -= clamp(sdfPos.y, -0.5 * sizes.y, 0.5 * sizes.y);
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_INFINITE_CONE: {
          float angle = 0.25 * PI * sizes.w;
          vec2 c = vec2(sin(angle), cos(angle));
          vec2 q = vec2(length(sdfPos.xy), -sdfPos.z);
          float d = length(q - c * max(dot(q, c), 0.0));
          distance = d * (((q.x * c.y - q.y * c.x) < 0.0) ? -1.0 : 1.0);
          break;
        }
      }

      if ((flags & SDF_FLAG_INVERT) != 0u) {
        distance = -distance;
      }

      if (smoothK == 0.0) {
        if (distance < distanceAccum) {
          distanceAccum = distance;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] = values[i];
          }
        }
      } else {
        float scaledDistance = -distance / smoothK;
        if (scaledDistance > maxExp) {
          float scale = exp(maxExp - scaledDistance);
          distanceAccum *= scale;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] *= scale;
          }
          maxExp = scaledDistance;
        }

        float weight = exp(scaledDistance - maxExp);
        distanceAccum += weight;
        for (int i = 0; i < numValues; ++i) {
          outValues[i] += weight * values[i];
        }
      }
    }

    if (smoothK == 0.0) {
      return distanceAccum;
    } else {
      // Very distant SDFs may result in 0 accumulation
      if (distanceAccum == 0.0) {
        return 1.0 / 0.0;
      }
      for (int i = 0; i < numValues; ++i) {
        outValues[i] /= distanceAccum;
      }
      return (-log(distanceAccum) - maxExp) * smoothK;
    }
  }

  float modulateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 values[4],
    float softEdge, bool invert
  ) {
    float distance = evaluateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, numValues, values);
    if (invert) {
      distance = -distance;
    }

    return (softEdge == 0.0) ? ((distance < 0.0) ? 1.0 : 0.0)
      : clamp(-distance / softEdge + 0.5, 0.0, 1.0);
  }
\`);
  const defineEdit = unindent(\`
  const uint EDIT_FLAG_BLEND = 0xFFu;
  const uint EDIT_BLEND_MULTIPLY = 0u;
  const uint EDIT_BLEND_SET_RGB = 1u;
  const uint EDIT_BLEND_ADD_RGBA = 2u;
  const uint EDIT_FLAG_INVERT = 0x100u;

  void decodeEdit(
    uvec4 packedEdit, out int sdfFirst, out int sdfCount,
    out bool invert, out uint rgbaBlendMode, out float softEdge, out float sdfSmooth
  ) {
    rgbaBlendMode = packedEdit.x & EDIT_FLAG_BLEND;
    invert = (packedEdit.x & EDIT_FLAG_INVERT) != 0u;

    sdfFirst = int(packedEdit.y & 0xFFFFu);
    sdfCount = int(packedEdit.y >> 16u);

    softEdge = uintBitsToFloat(packedEdit.z);
    sdfSmooth = uintBitsToFloat(packedEdit.w);
  }

  void applyRgbaDisplaceEdit(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, inout vec3 pos,
    float smoothK, float softEdge, bool invert, uint rgbaBlendMode, inout vec4 rgba
  ) {
    vec4 values[4];
    float modulate = modulateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, 2, values, softEdge, invert);
    // On Android, moving values[0] is necessary to work around a compiler bug.
    vec4 sdfRgba = values[0];
    vec4 sdfDisplaceScale = values[1];

    vec4 target;
    switch (rgbaBlendMode) {
      case EDIT_BLEND_MULTIPLY:
        target = rgba * sdfRgba;
        break;
      case EDIT_BLEND_SET_RGB:
        target = vec4(sdfRgba.rgb, rgba.a * sdfRgba.a);
        break;
      case EDIT_BLEND_ADD_RGBA:
        target = rgba + sdfRgba;
        break;
      default:
        // Debug output if blend mode not set
        target = vec4(fract(pos), 1.0);
    }
    rgba = mix(rgba, target, modulate);
    pos += sdfDisplaceScale.xyz * modulate;
  }

  void applyPackedRgbaDisplaceEdit(uvec4 packedEdit, usampler2D sdfTexture, int numSdfs, inout vec3 pos, inout vec4 rgba) {
    int sdfFirst, sdfCount;
    bool invert;
    uint rgbaBlendMode;
    float softEdge, sdfSmooth;
    decodeEdit(packedEdit, sdfFirst, sdfCount, invert, rgbaBlendMode, softEdge, sdfSmooth);
    applyRgbaDisplaceEdit(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, sdfSmooth, softEdge, invert, rgbaBlendMode, rgba);
  }
\`);
  function applyGsplatRgbaDisplaceEdits(gsplat, sdfArray, numEdits, rgbaDisplaceEdits) {
    const dyno2 = new Dyno({
      inTypes: {
        gsplat: Gsplat,
        sdfArray: SdfArray,
        numEdits: "int",
        rgbaDisplaceEdits: "uvec4"
      },
      outTypes: { gsplat: Gsplat },
      globals: () => [defineSdfArray, defineEdit],
      inputs: { gsplat, sdfArray, numEdits, rgbaDisplaceEdits },
      statements: ({ inputs, outputs }) => {
        const { sdfArray: sdfArray2, numEdits: numEdits2, rgbaDisplaceEdits: rgbaDisplaceEdits2 } = inputs;
        const { gsplat: gsplat2 } = outputs;
        return unindentLines(\`
        \${gsplat2} = \${inputs.gsplat};
        if (isGsplatActive(\${gsplat2}.flags)) {
          for (int editIndex = 0; editIndex < \${numEdits2}; ++editIndex) {
            applyPackedRgbaDisplaceEdit(
              \${rgbaDisplaceEdits2}[editIndex], \${sdfArray2}.sdfTexture, \${sdfArray2}.numSdfs,
              \${gsplat2}.center, \${gsplat2}.rgba
            );
          }
        }
      \`);
      }
    });
    return dyno2.outputs.gsplat;
  }
  const tempFloat32 = new Float32Array(1);
  class SplatTransformer {
    // Create the dyno uniforms that parameterize the transform, setting them
    // to initial values that are different from any valid transform.
    constructor() {
      this.scale = new DynoFloat({ value: Number.NEGATIVE_INFINITY });
      this.rotate = new DynoVec4({
        value: new Quaternion(
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY
        )
      });
      this.translate = new DynoVec3({
        value: new Vector3(
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY
        )
      });
    }
    // Apply the transform to a Vec3 position in a dyno program.
    apply(position) {
      return transformPos(position, {
        scale: this.scale,
        rotate: this.rotate,
        translate: this.translate
      });
    }
    applyDir(dir) {
      return transformDir(dir, {
        rotate: this.rotate
      });
    }
    // Apply the transform to a Gsplat in a dyno program.
    applyGsplat(gsplat) {
      return transformGsplat(gsplat, {
        scale: this.scale,
        rotate: this.rotate,
        translate: this.translate
      });
    }
    // Update the uniforms to match the given transform matrix.
    updateFromMatrix(transform) {
      const scale = new Vector3();
      const quaternion = new Quaternion();
      const position = new Vector3();
      transform.decompose(position, quaternion, scale);
      const newScale = (scale.x + scale.y + scale.z) / 3;
      let updated = false;
      if (newScale !== this.scale.value) {
        this.scale.value = newScale;
        updated = true;
      }
      if (!position.equals(this.translate.value)) {
        this.translate.value.copy(position);
        updated = true;
      }
      if (!quaternion.equals(this.rotate.value)) {
        this.rotate.value.copy(quaternion);
        updated = true;
      }
      return updated;
    }
    // Update this transform to match the object's to-world transform.
    update(object) {
      object.updateMatrixWorld();
      return this.updateFromMatrix(object.matrixWorld);
    }
  }
  class SplatGenerator extends Object3D {
    constructor({
      numSplats,
      generator,
      construct,
      update
    }) {
      super();
      this.numSplats = numSplats ?? 0;
      this.generator = generator;
      this.frameUpdate = update;
      this.version = 0;
      if (construct) {
        const constructed = construct(this);
        Object.assign(this, constructed);
      }
    }
    updateVersion() {
      this.version += 1;
    }
    set needsUpdate(value) {
      if (value) {
        this.updateVersion();
      }
    }
  }
  const _SplatMesh = class _SplatMesh extends SplatGenerator {
    constructor(options = {}) {
      const transform = new SplatTransformer();
      const viewToWorld = new SplatTransformer();
      const worldToView = new SplatTransformer();
      const viewToObject = new SplatTransformer();
      const recolor = new DynoVec4({
        value: new Vector4(
          Number.NEGATIVE_INFINITY,
          Number.NEGATIVE_INFINITY,
          Number.NEGATIVE_INFINITY,
          Number.NEGATIVE_INFINITY
        )
      });
      const time = new DynoFloat({ value: 0 });
      const deltaTime = new DynoFloat({ value: 0 });
      const context = {
        transform,
        viewToWorld,
        worldToView,
        viewToObject,
        recolor,
        time,
        deltaTime
      };
      super({
        update: ({ time: time2, deltaTime: deltaTime2, viewToWorld: viewToWorld2, globalEdits }) => this.update({ time: time2, deltaTime: deltaTime2, viewToWorld: viewToWorld2, globalEdits })
      });
      this.isInitialized = false;
      this.recolor = new Color(1, 1, 1);
      this.opacity = 1;
      this.enableViewToObject = false;
      this.enableViewToWorld = false;
      this.enableWorldToView = false;
      this.skinning = null;
      this.edits = null;
      this.rgbaDisplaceEdits = null;
      this.splatRgba = null;
      this.maxSh = 3;
      this.packedSplats = options.packedSplats ?? new PackedSplats();
      this.numSplats = this.packedSplats.numSplats;
      this.editable = options.editable ?? true;
      this.onFrame = options.onFrame;
      this.context = context;
      this.objectModifier = options.objectModifier;
      this.worldModifier = options.worldModifier;
      this.updateGenerator();
      if (options.url || options.fileBytes || options.constructSplats || options.packedSplats && !options.packedSplats.isInitialized) {
        this.initialized = this.asyncInitialize(options).then(async () => {
          this.updateGenerator();
          this.isInitialized = true;
          if (options.onLoad) {
            const maybePromise = options.onLoad(this);
            if (maybePromise instanceof Promise) {
              await maybePromise;
            }
          }
          return this;
        });
      } else {
        this.isInitialized = true;
        this.initialized = Promise.resolve(this);
        if (options.onLoad) {
          const maybePromise = options.onLoad(this);
          if (maybePromise instanceof Promise) {
            this.initialized = maybePromise.then(() => this);
          }
        }
      }
    }
    async asyncInitialize(options) {
      const { url, fileBytes, fileType, fileName, maxSplats, constructSplats } = options;
      if (url || fileBytes || constructSplats) {
        const packedSplatsOptions = {
          url,
          fileBytes,
          fileType,
          fileName,
          maxSplats,
          construct: constructSplats
        };
        this.packedSplats.reinitialize(packedSplatsOptions);
      }
      if (this.packedSplats) {
        await this.packedSplats.initialized;
        this.numSplats = this.packedSplats.numSplats;
        this.updateGenerator();
      }
    }
    static async staticInitialize() {
      await __wbg_init();
      _SplatMesh.isStaticInitialized = true;
    }
    // Creates a new Gsplat with the provided parameters (all values in "float" space,
    // i.e. 0-1 for opacity and color) and adds it to the end of the packedSplats,
    // increasing numSplats by 1. If necessary, reallocates the buffer with an exponential
    // doubling strategy to fit the new data, so it's fairly efficient to just
    // pushSplat(...) each Gsplat you want to create in a loop.
    pushSplat(center, scales, quaternion, opacity, color) {
      this.packedSplats.pushSplat(center, scales, quaternion, opacity, color);
    }
    // This method iterates over all Gsplats in this instance's packedSplats,
    // invoking the provided callback with index: number in 0..=(this.numSplats-1) and
    // center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion,
    // opacity: number (0..1), and color: THREE.Color (rgb values in 0..1).
    // Note that the objects passed in as center etc. are the same for every callback
    // invocation: these objects are reused for efficiency. Changing these values has
    // no effect as they are decoded/unpacked copies of the underlying data. To update
    // the packedSplats, call .packedSplats.setSplat(index, center, scales,
    // quaternion, opacity, color).
    forEachSplat(callback) {
      this.packedSplats.forEachSplat(callback);
    }
    // Call this when you are finished with the SplatMesh and want to free
    // any buffers it holds (via packedSplats).
    dispose() {
      this.packedSplats.dispose();
    }
    constructGenerator(context) {
      const { transform, viewToObject, recolor } = context;
      const generator = dynoBlock(
        { index: "int" },
        { gsplat: Gsplat },
        ({ index }) => {
          if (!index) {
            throw new Error("index is undefined");
          }
          let gsplat = readPackedSplat(this.packedSplats.dyno, index);
          if (this.maxSh >= 1) {
            const { sh1Texture, sh2Texture, sh3Texture } = this.ensureShTextures();
            if (sh1Texture) {
              const viewCenterInObject = viewToObject.translate;
              const { center } = splitGsplat(gsplat).outputs;
              const viewDir = normalize(sub(center, viewCenterInObject));
              let rgb = evaluateSH1(gsplat, sh1Texture, viewDir);
              if (this.maxSh >= 2 && sh2Texture) {
                rgb = add(rgb, evaluateSH2(gsplat, sh2Texture, viewDir));
              }
              if (this.maxSh >= 3 && sh3Texture) {
                rgb = add(rgb, evaluateSH3(gsplat, sh3Texture, viewDir));
              }
              let { rgba } = splitGsplat(gsplat).outputs;
              rgba = add(rgba, extendVec(rgb, dynoConst("float", 0)));
              gsplat = combineGsplat({ gsplat, rgba });
            }
          }
          if (this.splatRgba) {
            const rgba = readRgbaArray(this.splatRgba.dyno, index);
            gsplat = combineGsplat({ gsplat, rgba });
          }
          if (this.skinning) {
            gsplat = this.skinning.modify(gsplat);
          }
          if (this.objectModifier) {
            gsplat = this.objectModifier.apply({ gsplat }).gsplat;
          }
          gsplat = transform.applyGsplat(gsplat);
          const recolorRgba = mul(recolor, splitGsplat(gsplat).outputs.rgba);
          gsplat = combineGsplat({ gsplat, rgba: recolorRgba });
          if (this.rgbaDisplaceEdits) {
            gsplat = this.rgbaDisplaceEdits.modify(gsplat);
          }
          if (this.worldModifier) {
            gsplat = this.worldModifier.apply({ gsplat }).gsplat;
          }
          return { gsplat };
        }
      );
      this.generator = generator;
    }
    // Call this whenever something changes in the Gsplat processing pipeline,
    // for example changing maxSh or updating objectModifier or worldModifier.
    // Compiled generators are cached for efficiency and re-use when the same
    // pipeline structure emerges after successive changes.
    updateGenerator() {
      this.constructGenerator(this.context);
    }
    // This is called automatically by SparkRenderer and you should not have to
    // call it. It updates parameters for the generated pipeline and calls
    // updateGenerator() if the pipeline needs to change.
    update({
      time,
      viewToWorld,
      deltaTime,
      globalEdits
    }) {
      var _a2;
      this.numSplats = this.packedSplats.numSplats;
      this.context.time.value = time;
      this.context.deltaTime.value = deltaTime;
      _SplatMesh.dynoTime.value = time;
      const { transform, viewToObject, recolor } = this.context;
      let updated = transform.update(this);
      if (this.context.viewToWorld.updateFromMatrix(viewToWorld) && this.enableViewToWorld) {
        updated = true;
      }
      const worldToView = viewToWorld.clone().invert();
      if (this.context.worldToView.updateFromMatrix(worldToView) && this.enableWorldToView) {
        updated = true;
      }
      const objectToWorld = new Matrix4().compose(
        transform.translate.value,
        transform.rotate.value,
        new Vector3().setScalar(transform.scale.value)
      );
      const worldToObject = objectToWorld.invert();
      const viewToObjectMatrix = worldToObject.multiply(viewToWorld);
      if (viewToObject.updateFromMatrix(viewToObjectMatrix) && (this.enableViewToObject || this.packedSplats.extra.sh1)) {
        updated = true;
      }
      const newRecolor = new Vector4(
        this.recolor.r,
        this.recolor.g,
        this.recolor.b,
        this.opacity
      );
      if (!newRecolor.equals(recolor.value)) {
        recolor.value.copy(newRecolor);
        updated = true;
      }
      const edits = this.editable ? (this.edits ?? []).concat(globalEdits) : [];
      if (this.editable && !this.edits) {
        this.traverseVisible((node) => {
          if (node instanceof SplatEdit) {
            edits.push(node);
          }
        });
      }
      edits.sort((a, b) => a.ordering - b.ordering);
      const editsSdfs = edits.map((edit) => {
        if (edit.sdfs != null) {
          return { edit, sdfs: edit.sdfs };
        }
        const sdfs = [];
        edit.traverseVisible((node) => {
          if (node instanceof SplatEditSdf) {
            sdfs.push(node);
          }
        });
        return { edit, sdfs };
      });
      if (editsSdfs.length > 0 && !this.rgbaDisplaceEdits) {
        const edits2 = editsSdfs.length;
        const sdfs = editsSdfs.reduce(
          (total, edit) => total + edit.sdfs.length,
          0
        );
        this.rgbaDisplaceEdits = new SplatEdits({
          maxEdits: edits2,
          maxSdfs: sdfs
        });
        this.updateGenerator();
      }
      if (this.rgbaDisplaceEdits) {
        const editResult = this.rgbaDisplaceEdits.update(editsSdfs);
        updated || (updated = editResult.updated);
        if (editResult.dynoUpdated) {
          this.updateGenerator();
        }
      }
      if (updated) {
        this.updateVersion();
      }
      (_a2 = this.onFrame) == null ? void 0 : _a2.call(this, { mesh: this, time, deltaTime });
    }
    // This method conforms to the standard THREE.Raycaster API, performing object-ray
    // intersections using this method to populate the provided intersects[] array
    // with each intersection point.
    raycast(raycaster, intersects) {
      if (!this.packedSplats.packedArray || !this.packedSplats.numSplats) {
        return;
      }
      const { near, far, ray } = raycaster;
      const worldToMesh = this.matrixWorld.clone().invert();
      const worldToMeshRot = new Matrix3().setFromMatrix4(worldToMesh);
      const origin = ray.origin.clone().applyMatrix4(worldToMesh);
      const direction = ray.direction.clone().applyMatrix3(worldToMeshRot);
      const scales = new Vector3();
      worldToMesh.decompose(new Vector3(), new Quaternion(), scales);
      (scales.x * scales.y * scales.z) ** (1 / 3);
      const RAYCAST_ELLIPSOID = true;
      const distances = raycast_splats(
        origin.x,
        origin.y,
        origin.z,
        direction.x,
        direction.y,
        direction.z,
        near,
        far,
        this.packedSplats.numSplats,
        this.packedSplats.packedArray,
        RAYCAST_ELLIPSOID
      );
      for (const distance of distances) {
        const point = ray.direction.clone().multiplyScalar(distance).add(ray.origin);
        intersects.push({
          distance,
          point,
          object: this
        });
      }
    }
    ensureShTextures() {
      if (!this.packedSplats.extra.sh1) {
        return {};
      }
      let sh1Texture = this.packedSplats.extra.sh1Texture;
      if (!sh1Texture) {
        let sh1 = this.packedSplats.extra.sh1;
        const { width, height, depth, maxSplats } = getTextureSize(
          sh1.length / 2
        );
        if (sh1.length < maxSplats * 2) {
          const newSh1 = new Uint32Array(maxSplats * 2);
          newSh1.set(sh1);
          this.packedSplats.extra.sh1 = newSh1;
          sh1 = newSh1;
        }
        const texture = new DataArrayTexture(sh1, width, height, depth);
        texture.format = RGIntegerFormat;
        texture.type = UnsignedIntType;
        texture.internalFormat = "RG32UI";
        texture.needsUpdate = true;
        sh1Texture = new DynoUsampler2DArray({
          value: texture,
          key: "sh1"
        });
        this.packedSplats.extra.sh1Texture = sh1Texture;
      }
      if (!this.packedSplats.extra.sh2) {
        return { sh1Texture };
      }
      let sh2Texture = this.packedSplats.extra.sh2Texture;
      if (!sh2Texture) {
        let sh2 = this.packedSplats.extra.sh2;
        const { width, height, depth, maxSplats } = getTextureSize(
          sh2.length / 4
        );
        if (sh2.length < maxSplats * 4) {
          const newSh2 = new Uint32Array(maxSplats * 4);
          newSh2.set(sh2);
          this.packedSplats.extra.sh2 = newSh2;
          sh2 = newSh2;
        }
        const texture = new DataArrayTexture(sh2, width, height, depth);
        texture.format = RGBAIntegerFormat;
        texture.type = UnsignedIntType;
        texture.internalFormat = "RGBA32UI";
        texture.needsUpdate = true;
        sh2Texture = new DynoUsampler2DArray({
          value: texture,
          key: "sh2"
        });
        this.packedSplats.extra.sh2Texture = sh2Texture;
      }
      if (!this.packedSplats.extra.sh3) {
        return { sh1Texture, sh2Texture };
      }
      let sh3Texture = this.packedSplats.extra.sh3Texture;
      if (!sh3Texture) {
        let sh3 = this.packedSplats.extra.sh3;
        const { width, height, depth, maxSplats } = getTextureSize(
          sh3.length / 4
        );
        if (sh3.length < maxSplats * 4) {
          const newSh3 = new Uint32Array(maxSplats * 4);
          newSh3.set(sh3);
          this.packedSplats.extra.sh3 = newSh3;
          sh3 = newSh3;
        }
        const texture = new DataArrayTexture(sh3, width, height, depth);
        texture.format = RGBAIntegerFormat;
        texture.type = UnsignedIntType;
        texture.internalFormat = "RGBA32UI";
        texture.needsUpdate = true;
        sh3Texture = new DynoUsampler2DArray({
          value: texture,
          key: "sh3"
        });
        this.packedSplats.extra.sh3Texture = sh3Texture;
      }
      return { sh1Texture, sh2Texture, sh3Texture };
    }
  };
  _SplatMesh.staticInitialized = _SplatMesh.staticInitialize();
  _SplatMesh.isStaticInitialized = false;
  _SplatMesh.dynoTime = new DynoFloat({ value: 0 });
  let SplatMesh = _SplatMesh;
  const defineEvaluateSH1 = unindent(\`
  vec3 evaluateSH1(Gsplat gsplat, usampler2DArray sh1, vec3 viewDir) {
    // Extract sint7 values packed into 2 x uint32
    uvec2 packed = texelFetch(sh1, splatTexCoord(gsplat.index), 0).rg;
    vec3 sh1_0 = vec3(ivec3(
      int(packed.x << 25u) >> 25,
      int(packed.x << 18u) >> 25,
      int(packed.x << 11u) >> 25
    )) / 63.0;
    vec3 sh1_1 = vec3(ivec3(
      int(packed.x << 4u) >> 25,
      int((packed.x >> 3u) | (packed.y << 29u)) >> 25,
      int(packed.y << 22u) >> 25
    )) / 63.0;
    vec3 sh1_2 = vec3(ivec3(
      int(packed.y << 15u) >> 25,
      int(packed.y << 8u) >> 25,
      int(packed.y << 1u) >> 25
    )) / 63.0;

    return sh1_0 * (-0.4886025 * viewDir.y)
      + sh1_1 * (0.4886025 * viewDir.z)
      + sh1_2 * (-0.4886025 * viewDir.x);
  }
\`);
  const defineEvaluateSH2 = unindent(\`
  vec3 evaluateSH2(Gsplat gsplat, usampler2DArray sh2, vec3 viewDir) {
    // Extract sint8 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh2, splatTexCoord(gsplat.index), 0);
    vec3 sh2_0 = vec3(ivec3(
      int(packed.x << 24u) >> 24,
      int(packed.x << 16u) >> 24,
      int(packed.x << 8u) >> 24
    )) / 127.0;
    vec3 sh2_1 = vec3(ivec3(
      int(packed.x) >> 24,
      int(packed.y << 24u) >> 24,
      int(packed.y << 16u) >> 24
    )) / 127.0;
    vec3 sh2_2 = vec3(ivec3(
      int(packed.y << 8u) >> 24,
      int(packed.y) >> 24,
      int(packed.z << 24u) >> 24
    )) / 127.0;
    vec3 sh2_3 = vec3(ivec3(
      int(packed.z << 16u) >> 24,
      int(packed.z << 8u) >> 24,
      int(packed.z) >> 24
    )) / 127.0;
    vec3 sh2_4 = vec3(ivec3(
      int(packed.w << 24u) >> 24,
      int(packed.w << 16u) >> 24,
      int(packed.w << 8u) >> 24
    )) / 127.0;

    return sh2_0 * (1.0925484 * viewDir.x * viewDir.y)
      + sh2_1 * (1.0925484 * viewDir.y * viewDir.z)
      + sh2_2 * (0.3153915 * (2.0 * viewDir.z * viewDir.z - viewDir.x * viewDir.x - viewDir.y * viewDir.y))
      + sh2_3 * (1.0925484 * viewDir.x * viewDir.z)
      + sh2_4 * (0.5462742 * (viewDir.x * viewDir.x - viewDir.y * viewDir.y));
  }
\`);
  const defineEvaluateSH3 = unindent(\`
  vec3 evaluateSH3(Gsplat gsplat, usampler2DArray sh3, vec3 viewDir) {
    // Extract sint6 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh3, splatTexCoord(gsplat.index), 0);
    vec3 sh3_0 = vec3(ivec3(
      int(packed.x << 26u) >> 26,
      int(packed.x << 20u) >> 26,
      int(packed.x << 14u) >> 26
    )) / 31.0;
    vec3 sh3_1 = vec3(ivec3(
      int(packed.x << 8u) >> 26,
      int(packed.x << 2u) >> 26,
      int((packed.x >> 4u) | (packed.y << 28u)) >> 26
    )) / 31.0;
    vec3 sh3_2 = vec3(ivec3(
      int(packed.y << 22u) >> 26,
      int(packed.y << 16u) >> 26,
      int(packed.y << 10u) >> 26
    )) / 31.0;
    vec3 sh3_3 = vec3(ivec3(
      int(packed.y << 4u) >> 26,
      int((packed.y >> 2u) | (packed.z << 30u)) >> 26,
      int(packed.z << 24u) >> 26
    )) / 31.0;
    vec3 sh3_4 = vec3(ivec3(
      int(packed.z << 18u) >> 26,
      int(packed.z << 12u) >> 26,
      int(packed.z << 6u) >> 26
    )) / 31.0;
    vec3 sh3_5 = vec3(ivec3(
      int(packed.z) >> 26,
      int(packed.w << 26u) >> 26,
      int(packed.w << 20u) >> 26
    )) / 31.0;
    vec3 sh3_6 = vec3(ivec3(
      int(packed.w << 14u) >> 26,
      int(packed.w << 8u) >> 26,
      int(packed.w << 2u) >> 26
    )) / 31.0;

    float xx = viewDir.x * viewDir.x;
    float yy = viewDir.y * viewDir.y;
    float zz = viewDir.z * viewDir.z;
    float xy = viewDir.x * viewDir.y;
    float yz = viewDir.y * viewDir.z;
    float zx = viewDir.z * viewDir.x;

    return sh3_0 * (-0.5900436 * viewDir.y * (3.0 * xx - yy))
      + sh3_1 * (2.8906114 * xy * viewDir.z) +
      + sh3_2 * (-0.4570458 * viewDir.y * (4.0 * zz - xx - yy))
      + sh3_3 * (0.3731763 * viewDir.z * (2.0 * zz - 3.0 * xx - 3.0 * yy))
      + sh3_4 * (-0.4570458 * viewDir.x * (4.0 * zz - xx - yy))
      + sh3_5 * (1.4453057 * viewDir.z * (xx - yy))
      + sh3_6 * (-0.5900436 * viewDir.x * (xx - 3.0 * yy));
  }
\`);
  function evaluateSH1(gsplat, sh1, viewDir) {
    return dyno({
      inTypes: { gsplat: Gsplat, sh1: "usampler2DArray", viewDir: "vec3" },
      outTypes: { rgb: "vec3" },
      inputs: { gsplat, sh1, viewDir },
      globals: () => [defineGsplat, defineEvaluateSH1],
      statements: ({ inputs, outputs }) => {
        const statements = unindentLines(\`
        if (isGsplatActive(\${inputs.gsplat}.flags)) {
          \${outputs.rgb} = evaluateSH1(\${inputs.gsplat}, \${inputs.sh1}, \${inputs.viewDir});
        } else {
          \${outputs.rgb} = vec3(0.0);
        }
      \`);
        return statements;
      }
    }).outputs.rgb;
  }
  function evaluateSH2(gsplat, sh2, viewDir) {
    return dyno({
      inTypes: { gsplat: Gsplat, sh2: "usampler2DArray", viewDir: "vec3" },
      outTypes: { rgb: "vec3" },
      inputs: { gsplat, sh2, viewDir },
      globals: () => [defineGsplat, defineEvaluateSH2],
      statements: ({ inputs, outputs }) => unindentLines(\`
        if (isGsplatActive(\${inputs.gsplat}.flags)) {
          \${outputs.rgb} = evaluateSH2(\${inputs.gsplat}, \${inputs.sh2}, \${inputs.viewDir});
        } else {
          \${outputs.rgb} = vec3(0.0);
        }
      \`)
    }).outputs.rgb;
  }
  function evaluateSH3(gsplat, sh3, viewDir) {
    return dyno({
      inTypes: { gsplat: Gsplat, sh3: "usampler2DArray", viewDir: "vec3" },
      outTypes: { rgb: "vec3" },
      inputs: { gsplat, sh3, viewDir },
      globals: () => [defineGsplat, defineEvaluateSH3],
      statements: ({ inputs, outputs }) => unindentLines(\`
        if (isGsplatActive(\${inputs.gsplat}.flags)) {
          \${outputs.rgb} = evaluateSH3(\${inputs.gsplat}, \${inputs.sh3}, \${inputs.viewDir});
        } else {
          \${outputs.rgb} = vec3(0.0);
        }
      \`)
    }).outputs.rgb;
  }
  function WorkerWrapper(options) {
    return new Worker(
      self.location.href,
      {
        name: options == null ? void 0 : options.name
      }
    );
  }
  class SplatWorker {
    constructor() {
      this.messages = {};
      this.messageIdNext = 0;
      this.worker = new WorkerWrapper();
      this.worker.onmessage = (event) => this.onMessage(event);
    }
    makeMessageId() {
      return ++this.messageIdNext;
    }
    makeMessagePromiseId() {
      const id = this.makeMessageId();
      const promise = new Promise((resolve, reject) => {
        this.messages[id] = { resolve, reject };
      });
      return { id, promise };
    }
    onMessage(event) {
      const { id, result, error } = event.data;
      const handler = this.messages[id];
      if (handler) {
        delete this.messages[id];
        if (error) {
          handler.reject(error);
        } else {
          handler.resolve(result);
        }
      }
    }
    // Invoke an RPC on the worker with the given name and arguments.
    // The normal usage of a worker is to run one activity at a time,
    // but this function allows for concurrent calls, tagging each request
    // with a unique message Id and awaiting a response to that same Id.
    // The method will automatically transfer any ArrayBuffers in the
    // arguments to the worker. If you'd like to transfer a copy of a
    // buffer then you must clone it before passing to this function.
    async call(name, args) {
      const { id, promise } = this.makeMessagePromiseId();
      this.worker.postMessage(
        { name, args, id },
        { transfer: getArrayBuffers(args) }
      );
      return promise;
    }
  }
  let maxWorkers = 4;
  let numWorkers = 0;
  const freeWorkers = [];
  const workerQueue = [];
  async function allocWorker() {
    const worker = freeWorkers.shift();
    if (worker) {
      return worker;
    }
    if (numWorkers < maxWorkers) {
      const worker2 = new SplatWorker();
      numWorkers += 1;
      return worker2;
    }
    return new Promise((resolve) => {
      workerQueue.push(resolve);
    });
  }
  function freeWorker(worker) {
    if (numWorkers > maxWorkers) {
      numWorkers -= 1;
      return;
    }
    const waiter = workerQueue.shift();
    if (waiter) {
      waiter(worker);
      return;
    }
    freeWorkers.push(worker);
  }
  async function withWorker(callback) {
    const worker = await allocWorker();
    try {
      return await callback(worker);
    } finally {
      freeWorker(worker);
    }
  }
  var SplatFileType = /* @__PURE__ */ ((SplatFileType2) => {
    SplatFileType2["PLY"] = "ply";
    SplatFileType2["SPZ"] = "spz";
    SplatFileType2["SPLAT"] = "splat";
    SplatFileType2["KSPLAT"] = "ksplat";
    return SplatFileType2;
  })(SplatFileType || {});
  function getSplatFileType(fileBytes) {
    const view = new DataView(fileBytes.buffer);
    if ((view.getUint32(0, true) & 16777215) === 7957616) {
      return "ply";
    }
    if ((view.getUint32(0, true) & 16777215) === 559903) {
      const header = decompressPartialGzip(fileBytes, 4);
      const gView = new DataView(header.buffer);
      if (gView.getUint32(0, true) === 1347635022) {
        return "spz";
      }
      return void 0;
    }
    return void 0;
  }
  function getFileExtension(pathOrUrl) {
    const noTrailing = pathOrUrl.split(/[?#]/, 1)[0];
    const lastSlash = Math.max(
      noTrailing.lastIndexOf("/"),
      noTrailing.lastIndexOf("\\\\")
    );
    const filename = noTrailing.slice(lastSlash + 1);
    const lastDot = filename.lastIndexOf(".");
    if (lastDot <= 0 || lastDot === filename.length - 1) {
      return "";
    }
    return filename.slice(lastDot + 1).toLowerCase();
  }
  function getSplatFileTypeFromPath(pathOrUrl) {
    const extension = getFileExtension(pathOrUrl);
    if (extension === "ply") {
      return "ply";
    }
    if (extension === "spz") {
      return "spz";
    }
    if (extension === "splat") {
      return "splat";
    }
    if (extension === "ksplat") {
      return "ksplat";
    }
    return void 0;
  }
  async function unpackSplats({
    input,
    fileType,
    pathOrUrl
  }) {
    const fileBytes = input instanceof ArrayBuffer ? new Uint8Array(input) : input;
    let splatFileType = fileType;
    if (!fileType) {
      splatFileType = getSplatFileType(fileBytes);
      if (!splatFileType && pathOrUrl) {
        splatFileType = getSplatFileTypeFromPath(pathOrUrl);
      }
    }
    switch (splatFileType) {
      case "ply": {
        const ply = new PlyReader({ fileBytes });
        await ply.parseHeader();
        const numSplats = ply.numSplats;
        const maxSplats = getTextureSize(numSplats).maxSplats;
        const args = { fileBytes, packedArray: new Uint32Array(maxSplats * 4) };
        return await withWorker(async (worker) => {
          const { packedArray, numSplats: numSplats2, extra } = await worker.call(
            "unpackPly",
            args
          );
          return { packedArray, numSplats: numSplats2, extra };
        });
      }
      case "spz": {
        return await withWorker(async (worker) => {
          const { packedArray, numSplats, extra } = await worker.call(
            "decodeSpz",
            {
              fileBytes
            }
          );
          return { packedArray, numSplats, extra };
        });
      }
      case "splat": {
        return await withWorker(async (worker) => {
          const { packedArray, numSplats } = await worker.call(
            "decodeAntiSplat",
            {
              fileBytes
            }
          );
          return { packedArray, numSplats };
        });
      }
      case "ksplat":
        return await withWorker(async (worker) => {
          const { packedArray, numSplats, extra } = await worker.call(
            "decodeKsplat",
            { fileBytes }
          );
          return { packedArray, numSplats, extra };
        });
      default: {
        throw new Error(\`Unknown splat file type: \${splatFileType}\`);
      }
    }
  }
  class SplatData {
    constructor({ maxSplats = 1 } = {}) {
      this.numSplats = 0;
      this.maxSplats = getTextureSize(maxSplats).maxSplats;
      this.centers = new Float32Array(this.maxSplats * 3);
      this.scales = new Float32Array(this.maxSplats * 3);
      this.quaternions = new Float32Array(this.maxSplats * 4);
      this.opacities = new Float32Array(this.maxSplats);
      this.colors = new Float32Array(this.maxSplats * 3);
    }
    pushSplat() {
      const index = this.numSplats;
      this.ensureIndex(index);
      this.numSplats += 1;
      return index;
    }
    unpushSplat(index) {
      if (index === this.numSplats - 1) {
        this.numSplats -= 1;
      } else {
        throw new Error("Cannot unpush splat from non-last position");
      }
    }
    ensureCapacity(numSplats) {
      if (numSplats > this.maxSplats) {
        const targetSplats = Math.max(numSplats, this.maxSplats * 2);
        const newCenters = new Float32Array(targetSplats * 3);
        const newScales = new Float32Array(targetSplats * 3);
        const newQuaternions = new Float32Array(targetSplats * 4);
        const newOpacities = new Float32Array(targetSplats);
        const newColors = new Float32Array(targetSplats * 3);
        newCenters.set(this.centers);
        newScales.set(this.scales);
        newQuaternions.set(this.quaternions);
        newOpacities.set(this.opacities);
        newColors.set(this.colors);
        this.centers = newCenters;
        this.scales = newScales;
        this.quaternions = newQuaternions;
        this.opacities = newOpacities;
        this.colors = newColors;
        if (this.sh1) {
          const newSh1 = new Float32Array(targetSplats * 9);
          newSh1.set(this.sh1);
          this.sh1 = newSh1;
        }
        if (this.sh2) {
          const newSh2 = new Float32Array(targetSplats * 15);
          newSh2.set(this.sh2);
          this.sh2 = newSh2;
        }
        if (this.sh3) {
          const newSh3 = new Float32Array(targetSplats * 21);
          newSh3.set(this.sh3);
          this.sh3 = newSh3;
        }
        this.maxSplats = targetSplats;
      }
    }
    ensureIndex(index) {
      this.ensureCapacity(index + 1);
    }
    setCenter(index, x2, y, z) {
      this.centers[index * 3] = x2;
      this.centers[index * 3 + 1] = y;
      this.centers[index * 3 + 2] = z;
    }
    setScale(index, scaleX, scaleY, scaleZ) {
      this.scales[index * 3] = scaleX;
      this.scales[index * 3 + 1] = scaleY;
      this.scales[index * 3 + 2] = scaleZ;
    }
    setQuaternion(index, x2, y, z, w) {
      this.quaternions[index * 4] = x2;
      this.quaternions[index * 4 + 1] = y;
      this.quaternions[index * 4 + 2] = z;
      this.quaternions[index * 4 + 3] = w;
    }
    setOpacity(index, opacity) {
      this.opacities[index] = opacity;
    }
    setColor(index, r, g, b) {
      this.colors[index * 3] = r;
      this.colors[index * 3 + 1] = g;
      this.colors[index * 3 + 2] = b;
    }
    setSh1(index, sh1) {
      if (!this.sh1) {
        this.sh1 = new Float32Array(this.maxSplats * 9);
      }
      for (let j = 0; j < 9; ++j) {
        this.sh1[index * 9 + j] = sh1[j];
      }
    }
    setSh2(index, sh2) {
      if (!this.sh2) {
        this.sh2 = new Float32Array(this.maxSplats * 15);
      }
      for (let j = 0; j < 15; ++j) {
        this.sh2[index * 15 + j] = sh2[j];
      }
    }
    setSh3(index, sh3) {
      if (!this.sh3) {
        this.sh3 = new Float32Array(this.maxSplats * 21);
      }
      for (let j = 0; j < 21; ++j) {
        this.sh3[index * 21 + j] = sh3[j];
      }
    }
  }
  class SpzReader {
    constructor({ fileBytes }) {
      this.fileBytes = fileBytes instanceof ArrayBuffer ? new Uint8Array(fileBytes) : fileBytes;
      this.reader = new GunzipReader({ fileBytes: this.fileBytes });
      const header = new DataView(this.reader.read(16).buffer);
      if (header.getUint32(0, true) !== 1347635022) {
        throw new Error("Invalid SPZ file");
      }
      this.version = header.getUint32(4, true);
      if (this.version < 1 || this.version > 2) {
        throw new Error(\`Unsupported SPZ version: \${this.version}\`);
      }
      this.numSplats = header.getUint32(8, true);
      this.shDegree = header.getUint8(12);
      this.fractionalBits = header.getUint8(13);
      this.flags = header.getUint8(14);
      this.flagAntiAlias = (this.flags & 1) !== 0;
      this.reserved = header.getUint8(15);
      this.parsed = false;
    }
    parseSplats(centerCallback, alphaCallback, rgbCallback, scalesCallback, quatCallback, shCallback) {
      if (this.parsed) {
        throw new Error("SPZ file already parsed");
      }
      this.parsed = true;
      if (this.version === 1) {
        const centerBytes = this.reader.read(this.numSplats * 3 * 2);
        const centerUint16 = new Uint16Array(centerBytes.buffer);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const x2 = fromHalf(centerUint16[i3]);
          const y = fromHalf(centerUint16[i3 + 1]);
          const z = fromHalf(centerUint16[i3 + 2]);
          centerCallback == null ? void 0 : centerCallback(i2, x2, y, z);
        }
      } else if (this.version === 2) {
        const fixed = 1 << this.fractionalBits;
        const centerBytes = this.reader.read(this.numSplats * 3 * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i9 = i2 * 9;
          const x2 = ((centerBytes[i9 + 2] << 24 | centerBytes[i9 + 1] << 16 | centerBytes[i9] << 8) >> 8) / fixed;
          const y = ((centerBytes[i9 + 5] << 24 | centerBytes[i9 + 4] << 16 | centerBytes[i9 + 3] << 8) >> 8) / fixed;
          const z = ((centerBytes[i9 + 8] << 24 | centerBytes[i9 + 7] << 16 | centerBytes[i9 + 6] << 8) >> 8) / fixed;
          centerCallback == null ? void 0 : centerCallback(i2, x2, y, z);
        }
      } else {
        throw new Error("Unreachable");
      }
      {
        const bytes = this.reader.read(this.numSplats);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          alphaCallback == null ? void 0 : alphaCallback(i2, bytes[i2] / 255);
        }
      }
      {
        const rgbBytes = this.reader.read(this.numSplats * 3);
        const scale = SH_C0 / 0.15;
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const r = (rgbBytes[i3] / 255 - 0.5) * scale + 0.5;
          const g = (rgbBytes[i3 + 1] / 255 - 0.5) * scale + 0.5;
          const b = (rgbBytes[i3 + 2] / 255 - 0.5) * scale + 0.5;
          rgbCallback == null ? void 0 : rgbCallback(i2, r, g, b);
        }
      }
      {
        const scalesBytes = this.reader.read(this.numSplats * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const scaleX = Math.exp(scalesBytes[i3] / 16 - 10);
          const scaleY = Math.exp(scalesBytes[i3 + 1] / 16 - 10);
          const scaleZ = Math.exp(scalesBytes[i3 + 2] / 16 - 10);
          scalesCallback == null ? void 0 : scalesCallback(i2, scaleX, scaleY, scaleZ);
        }
      }
      {
        const quatBytes = this.reader.read(this.numSplats * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const quatX = quatBytes[i3] / 127.5 - 1;
          const quatY = quatBytes[i3 + 1] / 127.5 - 1;
          const quatZ = quatBytes[i3 + 2] / 127.5 - 1;
          const quatW = Math.sqrt(
            Math.max(0, 1 - quatX * quatX - quatY * quatY - quatZ * quatZ)
          );
          quatCallback == null ? void 0 : quatCallback(i2, quatX, quatY, quatZ, quatW);
        }
      }
      if (shCallback && this.shDegree >= 1) {
        const sh1 = new Float32Array(3 * 3);
        const sh2 = this.shDegree >= 2 ? new Float32Array(5 * 3) : void 0;
        const sh3 = this.shDegree >= 3 ? new Float32Array(7 * 3) : void 0;
        const shBytes = this.reader.read(
          this.numSplats * SH_DEGREE_TO_VECS[this.shDegree] * 3
        );
        let offset = 0;
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          for (let j = 0; j < 9; ++j) {
            sh1[j] = (shBytes[offset + j] - 128) / 128;
          }
          offset += 9;
          if (sh2) {
            for (let j = 0; j < 15; ++j) {
              sh2[j] = (shBytes[offset + j] - 128) / 128;
            }
            offset += 15;
          }
          if (sh3) {
            for (let j = 0; j < 21; ++j) {
              sh3[j] = (shBytes[offset + j] - 128) / 128;
            }
            offset += 21;
          }
          shCallback == null ? void 0 : shCallback(i2, sh1, sh2, sh3);
        }
      }
    }
  }
  const SH_DEGREE_TO_VECS = { 1: 3, 2: 8, 3: 15 };
  const SH_C0 = 0.28209479177387814;
  const SPZ_MAGIC = 1347635022;
  const SPZ_VERSION = 2;
  const FLAG_ANTIALIASED = 1;
  class SpzWriter {
    constructor({
      numSplats,
      shDegree,
      fractionalBits = 12,
      flagAntiAlias = true
    }) {
      this.clippedCount = 0;
      const splatSize = 9 + 1 + 3 + 3 + 3 + (shDegree >= 1 ? 9 : 0) + (shDegree >= 2 ? 15 : 0) + (shDegree >= 3 ? 21 : 0);
      const bufferSize = 16 + numSplats * splatSize;
      this.buffer = new ArrayBuffer(bufferSize);
      this.view = new DataView(this.buffer);
      this.view.setUint32(0, SPZ_MAGIC, true);
      this.view.setUint32(4, SPZ_VERSION, true);
      this.view.setUint32(8, numSplats, true);
      this.view.setUint8(12, shDegree);
      this.view.setUint8(13, fractionalBits);
      this.view.setUint8(14, flagAntiAlias ? FLAG_ANTIALIASED : 0);
      this.view.setUint8(15, 0);
      this.numSplats = numSplats;
      this.shDegree = shDegree;
      this.fractionalBits = fractionalBits;
      this.fraction = 1 << fractionalBits;
      this.flagAntiAlias = flagAntiAlias;
    }
    setCenter(index, x2, y, z) {
      const xRounded = Math.round(x2 * this.fraction);
      const xInt = Math.max(-8388607, Math.min(8388607, xRounded));
      const yRounded = Math.round(y * this.fraction);
      const yInt = Math.max(-8388607, Math.min(8388607, yRounded));
      const zRounded = Math.round(z * this.fraction);
      const zInt = Math.max(-8388607, Math.min(8388607, zRounded));
      const clipped = xRounded !== xInt || yRounded !== yInt || zRounded !== zInt;
      if (clipped) {
        this.clippedCount += 1;
      }
      const i9 = index * 9;
      const base = 16 + i9;
      this.view.setUint8(base, xInt & 255);
      this.view.setUint8(base + 1, xInt >> 8 & 255);
      this.view.setUint8(base + 2, xInt >> 16 & 255);
      this.view.setUint8(base + 3, yInt & 255);
      this.view.setUint8(base + 4, yInt >> 8 & 255);
      this.view.setUint8(base + 5, yInt >> 16 & 255);
      this.view.setUint8(base + 6, zInt & 255);
      this.view.setUint8(base + 7, zInt >> 8 & 255);
      this.view.setUint8(base + 8, zInt >> 16 & 255);
    }
    setAlpha(index, alpha) {
      const base = 16 + this.numSplats * 9 + index;
      this.view.setUint8(
        base,
        Math.max(0, Math.min(255, Math.round(alpha * 255)))
      );
    }
    static scaleRgb(r) {
      const v = ((r - 0.5) / (SH_C0 / 0.15) + 0.5) * 255;
      return Math.max(0, Math.min(255, Math.round(v)));
    }
    setRgb(index, r, g, b) {
      const base = 16 + this.numSplats * 10 + index * 3;
      this.view.setUint8(base, SpzWriter.scaleRgb(r));
      this.view.setUint8(base + 1, SpzWriter.scaleRgb(g));
      this.view.setUint8(base + 2, SpzWriter.scaleRgb(b));
    }
    setScale(index, scaleX, scaleY, scaleZ) {
      const base = 16 + this.numSplats * 13 + index * 3;
      this.view.setUint8(
        base,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleX) + 10) * 16)))
      );
      this.view.setUint8(
        base + 1,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleY) + 10) * 16)))
      );
      this.view.setUint8(
        base + 2,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleZ) + 10) * 16)))
      );
    }
    setQuat(index, quatX, quatY, quatZ, quatW) {
      const base = 16 + this.numSplats * 16 + index * 3;
      const quatNeg = quatW < 0;
      this.view.setUint8(
        base,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatX : quatX) + 1) * 127.5))
        )
      );
      this.view.setUint8(
        base + 1,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatY : quatY) + 1) * 127.5))
        )
      );
      this.view.setUint8(
        base + 2,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatZ : quatZ) + 1) * 127.5))
        )
      );
    }
    static quantizeSh(sh, bits2) {
      const value = Math.round(sh * 128) + 128;
      const bucketSize = 1 << 8 - bits2;
      const quantized = Math.floor((value + bucketSize / 2) / bucketSize) * bucketSize;
      return Math.max(0, Math.min(255, quantized));
    }
    setSh(index, sh1, sh2, sh3) {
      const shVecs = SH_DEGREE_TO_VECS[this.shDegree] || 0;
      const base1 = 16 + this.numSplats * 19 + index * shVecs * 3;
      for (let j = 0; j < 9; ++j) {
        this.view.setUint8(base1 + j, SpzWriter.quantizeSh(sh1[j], 5));
      }
      if (sh2) {
        const base2 = base1 + 9;
        for (let j = 0; j < 15; ++j) {
          this.view.setUint8(base2 + j, SpzWriter.quantizeSh(sh2[j], 4));
        }
        if (sh3) {
          const base3 = base2 + 15;
          for (let j = 0; j < 21; ++j) {
            this.view.setUint8(base3 + j, SpzWriter.quantizeSh(sh3[j], 4));
          }
        }
      }
    }
    async finalize() {
      const input = new Uint8Array(this.buffer);
      const stream = new ReadableStream({
        async start(controller) {
          controller.enqueue(input);
          controller.close();
        }
      });
      const compressed = stream.pipeThrough(new CompressionStream("gzip"));
      const response = new Response(compressed);
      const buffer = await response.arrayBuffer();
      console.log(
        "Compressed",
        input.length,
        "bytes to",
        buffer.byteLength,
        "bytes"
      );
      return new Uint8Array(buffer);
    }
  }
  async function transcodeSpz(input) {
    var _a2, _b2, _c;
    const splats = new SplatData();
    const {
      inputs,
      clipXyz,
      maxSh,
      fractionalBits = 12,
      opacityThreshold
    } = input;
    for (const input2 of inputs) {
      let transformPos2 = function(pos) {
        pos.multiplyScalar(scale);
        pos.applyQuaternion(quaternion);
        pos.add(translate);
        return pos;
      }, transformScales = function(scales) {
        scales.multiplyScalar(scale);
        return scales;
      }, transformQuaternion = function(quat) {
        quat.premultiply(quaternion);
        return quat;
      }, withinClip = function(p) {
        return !clip || clip.containsPoint(p);
      }, withinOpacity = function(opacity) {
        return opacityThreshold !== void 0 ? opacity >= opacityThreshold : true;
      };
      const scale = ((_a2 = input2.transform) == null ? void 0 : _a2.scale) ?? 1;
      const quaternion = new Quaternion().fromArray(
        ((_b2 = input2.transform) == null ? void 0 : _b2.quaternion) ?? [0, 0, 0, 1]
      );
      const translate = new Vector3().fromArray(
        ((_c = input2.transform) == null ? void 0 : _c.translate) ?? [0, 0, 0]
      );
      const clip = clipXyz ? new Box3(
        new Vector3().fromArray(clipXyz.min),
        new Vector3().fromArray(clipXyz.max)
      ) : void 0;
      let fileType = input2.fileType;
      if (!fileType) {
        fileType = getSplatFileType(input2.fileBytes);
        if (!fileType && input2.pathOrUrl) {
          fileType = getSplatFileTypeFromPath(input2.pathOrUrl);
        }
      }
      switch (fileType) {
        case SplatFileType.PLY: {
          const ply = new PlyReader({ fileBytes: input2.fileBytes });
          await ply.parseHeader();
          let lastIndex = null;
          ply.parseSplats(
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos2(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                lastIndex = splats.pushSplat();
                splats.setCenter(lastIndex, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(lastIndex, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  lastIndex,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(lastIndex, opacity);
                splats.setColor(lastIndex, r, g, b);
              } else {
                lastIndex = null;
              }
            },
            (index, sh1, sh2, sh3) => {
              if (sh1 && lastIndex !== null) {
                splats.setSh1(lastIndex, sh1);
              }
              if (sh2 && lastIndex !== null) {
                splats.setSh2(lastIndex, sh2);
              }
              if (sh3 && lastIndex !== null) {
                splats.setSh3(lastIndex, sh3);
              }
            }
          );
          break;
        }
        case SplatFileType.SPZ: {
          const spz2 = new SpzReader({ fileBytes: input2.fileBytes });
          const mapping = new Int32Array(spz2.numSplats);
          mapping.fill(-1);
          const centers = new Float32Array(spz2.numSplats * 3);
          const center = new Vector3();
          spz2.parseSplats(
            (index, x2, y, z) => {
              const center2 = transformPos2(new Vector3(x2, y, z));
              centers[index * 3] = center2.x;
              centers[index * 3 + 1] = center2.y;
              centers[index * 3 + 2] = center2.z;
            },
            (index, alpha) => {
              center.fromArray(centers, index * 3);
              if (withinClip(center) && withinOpacity(alpha)) {
                mapping[index] = splats.pushSplat();
                splats.setCenter(mapping[index], center.x, center.y, center.z);
                splats.setOpacity(mapping[index], alpha);
              }
            },
            (index, r, g, b) => {
              if (mapping[index] >= 0) {
                splats.setColor(mapping[index], r, g, b);
              }
            },
            (index, scaleX, scaleY, scaleZ) => {
              if (mapping[index] >= 0) {
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(mapping[index], scales.x, scales.y, scales.z);
              }
            },
            (index, quatX, quatY, quatZ, quatW) => {
              if (mapping[index] >= 0) {
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  mapping[index],
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
              }
            },
            (index, sh1, sh2, sh3) => {
              if (mapping[index] >= 0) {
                splats.setSh1(mapping[index], sh1);
                if (sh2) {
                  splats.setSh2(mapping[index], sh2);
                }
                if (sh3) {
                  splats.setSh3(mapping[index], sh3);
                }
              }
            }
          );
          break;
        }
        case SplatFileType.SPLAT:
          decodeAntiSplat(
            input2.fileBytes,
            (numSplats) => {
            },
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos2(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                const index2 = splats.pushSplat();
                splats.setCenter(index2, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(index2, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  index2,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(index2, opacity);
                splats.setColor(index2, r, g, b);
              }
            }
          );
          break;
        case SplatFileType.KSPLAT: {
          let lastIndex = null;
          decodeKsplat(
            input2.fileBytes,
            (numSplats) => {
            },
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos2(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                lastIndex = splats.pushSplat();
                splats.setCenter(lastIndex, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(lastIndex, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  lastIndex,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(lastIndex, opacity);
                splats.setColor(lastIndex, r, g, b);
              } else {
                lastIndex = null;
              }
            },
            (index, sh1, sh2, sh3) => {
              if (lastIndex !== null) {
                splats.setSh1(lastIndex, sh1);
                if (sh2) {
                  splats.setSh2(lastIndex, sh2);
                }
                if (sh3) {
                  splats.setSh3(lastIndex, sh3);
                }
              }
            }
          );
          break;
        }
        default:
          throw new Error(\`transcodeSpz not implemented for \${fileType}\`);
      }
    }
    const shDegree = Math.min(
      maxSh ?? 3,
      splats.sh3 ? 3 : splats.sh2 ? 2 : splats.sh1 ? 1 : 0
    );
    const spz = new SpzWriter({
      numSplats: splats.numSplats,
      shDegree,
      fractionalBits,
      flagAntiAlias: true
    });
    for (let i2 = 0; i2 < splats.numSplats; ++i2) {
      const i3 = i2 * 3;
      const i4 = i2 * 4;
      spz.setCenter(
        i2,
        splats.centers[i3],
        splats.centers[i3 + 1],
        splats.centers[i3 + 2]
      );
      spz.setScale(
        i2,
        splats.scales[i3],
        splats.scales[i3 + 1],
        splats.scales[i3 + 2]
      );
      spz.setQuat(
        i2,
        splats.quaternions[i4],
        splats.quaternions[i4 + 1],
        splats.quaternions[i4 + 2],
        splats.quaternions[i4 + 3]
      );
      spz.setAlpha(i2, splats.opacities[i2]);
      spz.setRgb(
        i2,
        splats.colors[i3],
        splats.colors[i3 + 1],
        splats.colors[i3 + 2]
      );
      if (splats.sh1 && shDegree >= 1) {
        spz.setSh(
          i2,
          splats.sh1.slice(i2 * 9, (i2 + 1) * 9),
          shDegree >= 2 && splats.sh2 ? splats.sh2.slice(i2 * 15, (i2 + 1) * 15) : void 0,
          shDegree >= 3 && splats.sh3 ? splats.sh3.slice(i2 * 21, (i2 + 1) * 21) : void 0
        );
      }
    }
    const spzBytes = await spz.finalize();
    return { fileBytes: spzBytes, clippedCount: spz.clippedCount };
  }
  async function onMessage(event) {
    const { name, args, id } = event.data;
    let result = void 0;
    let error = void 0;
    try {
      switch (name) {
        case "unpackPly": {
          const { packedArray, fileBytes } = args;
          const decoded = await unpackPly({ packedArray, fileBytes });
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "decodeSpz": {
          const { fileBytes } = args;
          const decoded = unpackSpz(fileBytes);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "decodeAntiSplat": {
          const { fileBytes } = args;
          const decoded = unpackAntiSplat(fileBytes);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray
          };
          break;
        }
        case "decodeKsplat": {
          const { fileBytes } = args;
          const decoded = unpackKsplat(fileBytes);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "sortSplats": {
          const { maxSplats, totalSplats, readback, ordering } = args;
          result = {
            id,
            readback,
            ...sortSplats({ totalSplats, readback, ordering })
          };
          break;
        }
        case "sortDoubleSplats": {
          const { numSplats, readback, ordering } = args;
          result = {
            id,
            readback,
            ordering
          };
          if (WASM_SPLAT_SORT) {
            result = {
              id,
              readback,
              ordering,
              activeSplats: sort_splats(numSplats, readback, ordering)
            };
          }
          break;
        }
        case "transcodeSpz": {
          const input = args;
          const spzBytes = await transcodeSpz(input);
          result = {
            id,
            fileBytes: spzBytes,
            input
          };
          break;
        }
        default: {
          throw new Error(\`Unknown name: \${name}\`);
        }
      }
    } catch (e) {
      error = e;
    }
    self.postMessage(
      { id, result, error },
      { transfer: getArrayBuffers(result) }
    );
  }
  async function unpackPly({
    packedArray,
    fileBytes
  }) {
    const ply = new PlyReader({ fileBytes });
    await ply.parseHeader();
    const numSplats = ply.numSplats;
    const extra = {};
    const ZERO_CUTOFF = Math.exp(-20);
    ply.parseSplats(
      (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
        setPackedSplat(
          packedArray,
          index,
          x2,
          y,
          z,
          scaleX < ZERO_CUTOFF ? 0 : Math.max(SCALE_MIN, scaleX),
          scaleY < ZERO_CUTOFF ? 0 : Math.max(SCALE_MIN, scaleY),
          scaleZ < ZERO_CUTOFF ? 0 : Math.max(SCALE_MIN, scaleZ),
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
      },
      (index, sh1, sh2, sh3) => {
        if (sh1) {
          if (!extra.sh1) {
            extra.sh1 = new Uint32Array(numSplats * 2);
          }
          encodeSh1Rgb(extra.sh1, index, sh1);
        }
        if (sh2) {
          if (!extra.sh2) {
            extra.sh2 = new Uint32Array(numSplats * 4);
          }
          encodeSh2Rgb(extra.sh2, index, sh2);
        }
        if (sh3) {
          if (!extra.sh3) {
            extra.sh3 = new Uint32Array(numSplats * 4);
          }
          encodeSh3Rgb(extra.sh3, index, sh3);
        }
      }
    );
    return { packedArray, numSplats, extra };
  }
  function unpackSpz(fileBytes) {
    const spz = new SpzReader({ fileBytes });
    const numSplats = spz.numSplats;
    const maxSplats = computeMaxSplats(numSplats);
    const packedArray = new Uint32Array(maxSplats * 4);
    const extra = {};
    spz.parseSplats(
      (index, x2, y, z) => {
        setPackedSplatCenter(packedArray, index, x2, y, z);
      },
      (index, alpha) => {
        setPackedSplatOpacity(packedArray, index, alpha);
      },
      (index, r, g, b) => {
        setPackedSplatRgb(packedArray, index, r, g, b);
      },
      (index, scaleX, scaleY, scaleZ) => {
        setPackedSplatScales(packedArray, index, scaleX, scaleY, scaleZ);
      },
      (index, quatX, quatY, quatZ, quatW) => {
        setPackedSplatQuat(packedArray, index, quatX, quatY, quatZ, quatW);
      },
      (index, sh1, sh2, sh3) => {
        if (sh1) {
          if (!extra.sh1) {
            extra.sh1 = new Uint32Array(numSplats * 2);
          }
          encodeSh1Rgb(extra.sh1, index, sh1);
        }
        if (sh2) {
          if (!extra.sh2) {
            extra.sh2 = new Uint32Array(numSplats * 4);
          }
          encodeSh2Rgb(extra.sh2, index, sh2);
        }
        if (sh3) {
          if (!extra.sh3) {
            extra.sh3 = new Uint32Array(numSplats * 4);
          }
          encodeSh3Rgb(extra.sh3, index, sh3);
        }
      }
    );
    return { packedArray, numSplats, extra };
  }
  const DEPTH_INFINITY = 31744;
  const DEPTH_SIZE = DEPTH_INFINITY + 1;
  let depthArray = null;
  function sortSplats({
    totalSplats,
    readback,
    ordering
  }) {
    if (!depthArray) {
      depthArray = new Uint32Array(DEPTH_SIZE);
    }
    depthArray.fill(0);
    const readbackUint32 = readback.map((layer) => new Uint32Array(layer.buffer));
    const layerSize = readbackUint32[0].length;
    const numLayers = Math.ceil(totalSplats / layerSize);
    let layerBase = 0;
    for (let layer = 0; layer < numLayers; ++layer) {
      const readbackLayer = readbackUint32[layer];
      const layerSplats = Math.min(readbackLayer.length, totalSplats - layerBase);
      for (let i2 = 0; i2 < layerSplats; ++i2) {
        const pri = readbackLayer[i2] & 32767;
        if (pri < DEPTH_INFINITY) {
          depthArray[pri] += 1;
        }
      }
      layerBase += layerSplats;
    }
    let activeSplats = 0;
    for (let j = 0; j < DEPTH_SIZE; ++j) {
      const nextIndex = activeSplats + depthArray[j];
      depthArray[j] = activeSplats;
      activeSplats = nextIndex;
    }
    layerBase = 0;
    for (let layer = 0; layer < numLayers; ++layer) {
      const readbackLayer = readbackUint32[layer];
      const layerSplats = Math.min(readbackLayer.length, totalSplats - layerBase);
      for (let i2 = 0; i2 < layerSplats; ++i2) {
        const pri = readbackLayer[i2] & 32767;
        if (pri < DEPTH_INFINITY) {
          ordering[depthArray[pri]] = layerBase + i2;
          depthArray[pri] += 1;
        }
      }
      layerBase += layerSplats;
    }
    if (depthArray[DEPTH_SIZE - 1] !== activeSplats) {
      throw new Error(
        \`Expected \${activeSplats} active splats but got \${depthArray[DEPTH_SIZE - 1]}\`
      );
    }
    return { activeSplats, ordering };
  }
  function sortDoubleSplats({
    numSplats,
    readback,
    ordering
  }) {
    if (!depthArray) {
      depthArray = new Uint32Array(DEPTH_SIZE);
    }
    depthArray.fill(0);
    for (let i2 = 0; i2 < numSplats; ++i2) {
      const pri = readback[i2];
      if (pri < DEPTH_INFINITY) {
        depthArray[pri] += 1;
      }
    }
    let activeSplats = 0;
    for (let j = DEPTH_INFINITY - 1; j >= 0; --j) {
      const nextIndex = activeSplats + depthArray[j];
      depthArray[j] = activeSplats;
      activeSplats = nextIndex;
    }
    for (let i2 = 0; i2 < numSplats; ++i2) {
      const pri = readback[i2];
      if (pri < DEPTH_INFINITY) {
        ordering[depthArray[pri]] = i2;
        depthArray[pri] += 1;
      }
    }
    if (depthArray[0] !== activeSplats) {
      throw new Error(
        \`Expected \${activeSplats} active splats but got \${depthArray[0]}\`
      );
    }
    return { activeSplats, ordering };
  }
  const messageBuffer = [];
  function bufferMessage(event) {
    messageBuffer.push(event);
  }
  async function initialize() {
    self.addEventListener("message", bufferMessage);
    await __wbg_init();
    self.removeEventListener("message", bufferMessage);
    self.addEventListener("message", onMessage);
    for (const event of messageBuffer) {
      onMessage(event);
    }
    messageBuffer.length = 0;
  }
  initialize().catch(console.error);
})();
//# sourceMappingURL=worker-Do1mGyaZ.js.map
`,ce=typeof self<"u"&&self.Blob&&new Blob([ts],{type:"text/javascript;charset=utf-8"});function Da(s){let A;try{if(A=ce&&(self.URL||self.webkitURL).createObjectURL(ce),!A)throw"";const t=new Worker(A,{name:s==null?void 0:s.name});return t.addEventListener("error",()=>{(self.URL||self.webkitURL).revokeObjectURL(A)}),t}catch{return new Worker("data:text/javascript;charset=utf-8,"+encodeURIComponent(ts),{name:s==null?void 0:s.name})}finally{A&&(self.URL||self.webkitURL).revokeObjectURL(A)}}class xa{constructor(){this.messages={},this.messageIdNext=0,this.worker=new Da,this.worker.onmessage=A=>this.onMessage(A)}makeMessageId(){return++this.messageIdNext}makeMessagePromiseId(){const A=this.makeMessageId(),t=new Promise((e,i)=>{this.messages[A]={resolve:e,reject:i}});return{id:A,promise:t}}onMessage(A){const{id:t,result:e,error:i}=A.data,a=this.messages[t];a&&(delete this.messages[t],i?a.reject(i):a.resolve(e))}async call(A,t){const{id:e,promise:i}=this.makeMessagePromiseId();return this.worker.postMessage({name:A,args:t,id:e},{transfer:wi(t)}),i}}let es=4,Dt=0;const ss=[],is=[];async function Sa(){const s=ss.shift();if(s)return s;if(Dt<es){const A=new xa;return Dt+=1,A}return new Promise(A=>{is.push(A)})}function ba(s){if(Dt>es){Dt-=1;return}const A=is.shift();if(A){A(s);return}ss.push(s)}async function XA(s){const A=await Sa();try{return await s(A)}finally{ba(A)}}function ka(s){const A=new DataView(s.buffer);if((A.getUint32(0,!0)&16777215)===7957616)return"ply";if((A.getUint32(0,!0)&16777215)===559903){const t=_i(s,4);return new DataView(t.buffer).getUint32(0,!0)===1347635022?"spz":void 0}}function Ma(s){const A=s.split(/[?#]/,1)[0],t=Math.max(A.lastIndexOf("/"),A.lastIndexOf("\\")),e=A.slice(t+1),i=e.lastIndexOf(".");return i<=0||i===e.length-1?"":e.slice(i+1).toLowerCase()}function Fa(s){const A=Ma(s);if(A==="ply")return"ply";if(A==="spz")return"spz";if(A==="splat")return"splat";if(A==="ksplat")return"ksplat"}async function Na({input:s,fileType:A,pathOrUrl:t}){const e=s instanceof ArrayBuffer?new Uint8Array(s):s;let i=A;switch(A||(i=ka(e),!i&&t&&(i=Fa(t))),i){case"ply":{const a=new fa({fileBytes:e});await a.parseHeader();const r=a.numSplats,n=AA(r).maxSplats,I={fileBytes:e,packedArray:new Uint32Array(n*4)};return await XA(async o=>{const{packedArray:B,numSplats:g,extra:Q}=await o.call("unpackPly",I);return{packedArray:B,numSplats:g,extra:Q}})}case"spz":return await XA(async a=>{const{packedArray:r,numSplats:n,extra:I}=await a.call("decodeSpz",{fileBytes:e});return{packedArray:r,numSplats:n,extra:I}});case"splat":return await XA(async a=>{const{packedArray:r,numSplats:n}=await a.call("decodeAntiSplat",{fileBytes:e});return{packedArray:r,numSplats:n}});case"ksplat":return await XA(async a=>{const{packedArray:r,numSplats:n,extra:I}=await a.call("decodeKsplat",{fileBytes:e});return{packedArray:r,numSplats:n,extra:I}});default:throw new Error(`Unknown splat file type: ${i}`)}}var Ra=`precision highp float;
precision highp int;
precision highp sampler2D;
precision highp usampler2D;
precision highp isampler2D;
precision highp sampler2DArray;
precision highp usampler2DArray;
precision highp isampler2DArray;
precision highp sampler3D;
precision highp usampler3D;
precision highp isampler3D;

#include <splatDefines>

uniform uint targetLayer;
uniform int targetBase;
uniform int targetCount;

out uvec4 target;

{{ GLOBALS }}

void produceSplat(int index) {
    {{ STATEMENTS }}
}

void main() {
    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);
    int index = targetIndex - targetBase;

    if ((index >= 0) && (index < targetCount)) {
        produceSplat(index);
    } else {
        target = uvec4(0u, 0u, 0u, 0u);
    }
}`;const BA=class L{constructor(A={}){this.maxSplats=0,this.numSplats=0,this.packedArray=null,this.isInitialized=!1,this.target=null,this.source=null,this.needsUpdate=!0,this.extra={},this.dyno=new $t({packedSplats:this}),this.initialized=Promise.resolve(this),this.reinitialize(A)}reinitialize(A){this.isInitialized=!1,A.url||A.fileBytes||A.construct?this.initialized=this.asyncInitialize(A).then(()=>(this.isInitialized=!0,this)):(this.initialize(A),this.isInitialized=!0,this.initialized=Promise.resolve(this))}initialize(A){A.packedArray?(this.packedArray=A.packedArray,this.maxSplats=Math.floor(this.packedArray.length/4),this.maxSplats=Math.floor(this.maxSplats/x)*x,this.numSplats=Math.min(this.maxSplats,A.numSplats??Number.POSITIVE_INFINITY)):(this.maxSplats=A.maxSplats??0,this.numSplats=0),this.extra=A.extra??{}}async asyncInitialize(A){let{url:t,fileBytes:e,construct:i}=A;if(t&&(e=await fetch(t).then(async a=>{if(!a.ok)throw new Error(`${a.status} "${a.statusText}" fetching URL: ${t}`);return await a.arrayBuffer()})),e){const a=await Na({input:e,fileType:A.fileType,pathOrUrl:A.fileName??t});this.initialize(a)}if(i){const a=i(this);a instanceof Promise&&await a}}dispose(){this.target&&(this.target.dispose(),this.target=null),this.source&&(this.source.dispose(),this.source=null)}ensureSplats(A){const t=A<=this.maxSplats?this.maxSplats:Math.max(A,2*this.maxSplats),e=this.packedArray?this.packedArray.length/4:0;if(!this.packedArray||t>e){this.maxSplats=AA(t).maxSplats;const i=new Uint32Array(this.maxSplats*4);this.packedArray&&i.set(this.packedArray),this.packedArray=i}return this.packedArray}ensureSplatsSh(A,t){let e,i;if(A===0)return this.ensureSplats(t);if(A===1)e=2,i="sh1";else if(A===2)e=4,i="sh2";else if(A===3)e=4,i="sh3";else throw new Error(`Invalid level: ${A}`);let a=this.extra[i]?this.extra[i].length/e:0;const r=t<=a?a:Math.max(t,2*a);if(!this.extra[i]||r>a){a=AA(r).maxSplats;const n=new Uint32Array(a*e);this.extra[i]&&n.set(this.extra[i]),this.extra[i]=n}return this.extra[i]}getSplat(A){if(!this.packedArray||A>=this.numSplats)throw new Error("Invalid index");return Ie(this.packedArray,A)}setSplat(A,t,e,i,a,r){const n=this.ensureSplats(A+1);oe(n,A,t.x,t.y,t.z,e.x,e.y,e.z,i.x,i.y,i.z,i.w,a,r.r,r.g,r.b),this.numSplats=Math.max(this.numSplats,A+1)}pushSplat(A,t,e,i,a){const r=this.ensureSplats(this.numSplats+1);oe(r,this.numSplats,A.x,A.y,A.z,t.x,t.y,t.z,e.x,e.y,e.z,e.w,i,a.r,a.g,a.b),++this.numSplats}forEachSplat(A){if(!(!this.packedArray||!this.numSplats))for(let t=0;t<this.numSplats;++t){const e=Ie(this.packedArray,t);A(t,e.center,e.scales,e.quaternion,e.opacity,e.color)}}ensureGenerate(A){if(this.target&&(A??1)<=this.maxSplats)return!1;this.dispose();const t=AA(A??1),{width:e,height:i,depth:a}=t;return this.maxSplats=t.maxSplats,this.target=new pe(e,i,a,{depthBuffer:!1,stencilBuffer:!1,generateMipmaps:!1,magFilter:pt,minFilter:pt}),this.target.texture.format=PA,this.target.texture.type=_A,this.target.texture.internalFormat="RGBA32UI",!0}generateMapping(A){let t=0;const e=A.map(i=>{const a=t,r=Math.ceil(i/x)*x;return t+=r,{base:a,count:i}});return{maxSplats:t,mapping:e}}getTexture(){return this.target?this.target.texture:this.source||this.packedArray?this.maybeUpdateSource():L.getEmpty()}maybeUpdateSource(){if(!this.packedArray)throw new Error("No packed splats");if(this.needsUpdate||!this.source){if(this.needsUpdate=!1,this.source){const{width:A,height:t,depth:e}=this.source.image;this.maxSplats!==A*t*e&&(this.source.dispose(),this.source=null)}if(this.source)this.packedArray.buffer!==this.source.image.data.buffer&&(this.source.image.data=new Uint8Array(this.packedArray.buffer));else{const{width:A,height:t,depth:e}=AA(this.maxSplats);this.source=new LA(this.packedArray,A,t,e),this.source.format=PA,this.source.type=_A,this.source.internalFormat="RGBA32UI",this.source.needsUpdate=!0}this.source.needsUpdate=!0}return this.source}static getEmpty(){if(!L.emptySource){const{width:A,height:t,depth:e,maxSplats:i}=AA(1),a=new Uint32Array(i*4);L.emptySource=new LA(a,A,t,e),L.emptySource.format=PA,L.emptySource.type=_A,L.emptySource.internalFormat="RGBA32UI",L.emptySource.needsUpdate=!0}return L.emptySource}prepareProgramMaterial(A){let t=L.generatorProgram.get(A);if(!t){const i=FA({index:"int"},{output:"uvec4"},({index:a})=>{A.inputs.index=a;const r=A.outputs.gsplat;return{output:ni(r)}});L.programTemplate||(L.programTemplate=new Je(Ra)),t=new Te({graph:i,inputs:{index:"index"},outputs:{output:"target"},template:L.programTemplate}),Object.assign(t.uniforms,{targetLayer:{value:0},targetBase:{value:0},targetCount:{value:0}}),L.generatorProgram.set(A,t)}const e=t.prepareMaterial();return L.mesh.material=e,{program:t,material:e}}saveRenderState(A){return{xrPresenting:A.xr.isPresenting,autoClear:A.autoClear,scissorTest:A.getScissorTest(),pixelRatio:A.getPixelRatio()}}resetRenderState(A,t){A.setRenderTarget(null),A.setPixelRatio(t.pixelRatio),A.xr.isPresenting=t.xrPresenting,A.autoClear=t.autoClear,A.setScissorTest(t.scissorTest)}generate({generator:A,base:t,count:e,renderer:i}){if(!this.target)throw new Error("Target must be initialized with ensureSplats");if(t+e>this.maxSplats)throw new Error("Base + count exceeds maxSplats");const{program:a,material:r}=this.prepareProgramMaterial(A);a.update();const n=this.saveRenderState(i),I=Math.ceil((t+e)/x)*x,o=x*RA;for(r.uniforms.targetBase.value=t,r.uniforms.targetCount.value=e;t<I;){const B=Math.floor(t/o);r.uniforms.targetLayer.value=B;const g=B*o,Q=Math.floor((t-g)/x),c=Math.min(RA,Math.ceil((I-g)/x));i.setPixelRatio(1),i.setRenderTarget(this.target,B),i.xr.isPresenting=!1,i.autoClear=!1,i.setScissorTest(!0),i.setScissor(0,Q,x,c-Q),i.render(L.scene,L.camera),t+=x*(c-Q)}return this.resetRenderState(i,n),{nextBase:I}}};BA.emptySource=null;BA.programTemplate=null;BA.generatorProgram=new Map;BA.geometry=new fe(2,2);BA.mesh=new yt(BA.geometry,new Ot({visible:!1}));BA.scene=new MA().add(BA.mesh);BA.camera=new me;let ZA=BA;class $t extends IA{constructor({packedSplats:A}={}){super({key:"packedSplats",type:bt,globals:()=>[Zt],value:{texture:ZA.getEmpty(),numSplats:0},update:t=>{var e,i;return t.texture=((e=this.packedSplats)==null?void 0:e.getTexture())??ZA.getEmpty(),t.numSplats=((i=this.packedSplats)==null?void 0:i.numSplats)??0,t}}),this.packedSplats=A}}class Ht extends vs{constructor(A,t){super(),this.ordering=A,this.setAttribute("position",new se(va,3)),this.setIndex(new se(Ga,1)),this._maxInstanceCount=A.length,this.instanceCount=t,this.attribute=new Gs(A,1,!1,1),this.attribute.setUsage(Us),this.setAttribute("splatIndex",this.attribute)}update(A,t){this.ordering=A,this.attribute.array=A,this.instanceCount=t,this.attribute.addUpdateRange(0,t),this.attribute.needsUpdate=!0}}const va=new Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,1,0]),Ga=new Uint16Array([0,1,2,0,2,3]),Ae=class $A{constructor(A){if(this.lastTime=null,this.encodeLinear=!1,this.superXY=1,this.display=null,this.sorting=null,this.pending=null,this.sortingCheck=!1,this.readback=new Uint16Array(0),this.spark=A.spark,this.camera=A.camera,this.viewToWorld=A.viewToWorld??new kA,A.target){const{width:t,height:e,doubleBuffer:i}=A.target,a=Math.max(1,Math.min(4,A.target.superXY??1));if(this.superXY=a,t*a>8192||e*a>8192)throw new Error("Target size too large");this.target=new ie(t*a,e*a,{format:jA,type:st,colorSpace:ae}),i&&(this.back=new ie(t*a,e*a,{format:jA,type:st,colorSpace:ae})),this.encodeLinear=!0}this.onTextureUpdated=A.onTextureUpdated,this.sortRadial=A.sortRadial??!0,this.sortDistance=A.sortDistance,this.sortCoorient=A.sortCoorient,this.depthBias=A.depthBias,this.sort360=A.sort360,this.orderingFreelist=new Di({allocate:t=>new Uint32Array(t),valid:(t,e)=>t.length===e}),this.autoUpdate=!1,this.setAutoUpdate(A.autoUpdate??!1)}dispose(){var A;this.setAutoUpdate(!1),this.target&&(this.target.dispose(),this.target=void 0),this.back&&(this.back.dispose(),this.back=void 0),this.display&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.geometry.dispose(),this.display=null),(A=this.pending)!=null&&A.accumulator&&(this.spark.releaseAccumulator(this.pending.accumulator),this.pending=null)}setAutoUpdate(A){!this.autoUpdate&&A?this.spark.autoViewpoints.push(this):this.autoUpdate&&!A&&(this.spark.autoViewpoints=this.spark.autoViewpoints.filter(t=>t!==this)),this.autoUpdate=A}async prepare({scene:A,camera:t,viewToWorld:e,update:i,forceOrigin:a}){var r;for(e?this.viewToWorld=e:(this.camera=t??this.camera,this.camera&&(this.camera.updateMatrixWorld(),this.viewToWorld=this.camera.matrixWorld.clone()));i??!0;){const I=a?this.viewToWorld:void 0;if(this.spark.updateInternal({scene:A,originToWorld:I}))break;await new Promise(o=>setTimeout(o,10))}const n=this.spark.active;n!==((r=this.display)==null?void 0:r.accumulator)&&(this.spark.active.refCount+=1),await this.sortUpdate({accumulator:n,viewToWorld:this.viewToWorld})}renderTarget({scene:A,camera:t}){var e;const i=this.back??this.target;if(!i)throw new Error("Must initialize SparkViewpoint with target");if(t=t??this.camera,!t)throw new Error("Must provide camera");if(t instanceof re){const a=new re().copy(t,!1);a.aspect=i.width/i.height,a.updateProjectionMatrix(),t=a}this.viewToWorld=t.matrixWorld.clone();try{this.spark.renderer.setRenderTarget(i),this.spark.prepareViewpoint(this),this.spark.renderer.render(A,t)}finally{this.spark.prepareViewpoint(this.spark.defaultView),this.spark.renderer.setRenderTarget(null)}i!==this.target&&([this.target,this.back]=[this.back,this.target]),(e=this.onTextureUpdated)==null||e.call(this,i.texture)}async readTarget(){if(!this.target)throw new Error("Must initialize SparkViewpoint with target");const{width:A,height:t}=this.target,e=A*t*4;(!this.superPixels||this.superPixels.length<e)&&(this.superPixels=new Uint8Array(e)),await this.spark.renderer.readRenderTargetPixelsAsync(this.target,0,0,A,t,this.superPixels);const{superXY:i}=this;if(i===1)return this.superPixels;const a=A/i,r=t/i,n=a*r*4;(!this.pixels||this.pixels.length<n)&&(this.pixels=new Uint8Array(n));const{superPixels:I,pixels:o}=this,B=i*i;for(let g=0;g<r;g++){const Q=g*a;for(let c=0;c<a;c++){const E=c*i;let C=0,h=0,y=0,u=0;for(let p=0;p<i;p++){const f=(g*i+p)*this.target.width;for(let D=0;D<i;D++){const k=(f+E+D)*4;C+=I[k],h+=I[k+1],y+=I[k+2],u+=I[k+3]}}const l=(Q+c)*4;o[l]=C/B,o[l+1]=h/B,o[l+2]=y/B,o[l+3]=u/B}}return o}async prepareRenderPixels({scene:A,camera:t,viewToWorld:e,update:i,forceOrigin:a}){return await this.prepare({scene:A,camera:t,viewToWorld:e,update:i,forceOrigin:a}),this.renderTarget({scene:A,camera:t}),this.readTarget()}autoPoll({accumulator:A}){var t,e,i,a;this.camera&&(this.camera.updateMatrixWorld(),this.viewToWorld=this.camera.matrixWorld.clone());let r=!1,n=!1;if(!this.display)r=!0;else if(A){r=!0;const{mappingVersion:o}=this.display.accumulator;A.mappingVersion===o&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.accumulator=A,n=!0)}const I=((t=this.sorting)==null?void 0:t.viewToWorld)??((e=this.display)==null?void 0:e.viewToWorld);I&&!Tt({matrix1:this.viewToWorld,matrix2:I,maxDistance:this.sortDistance??.01,minCoorient:this.sortCoorient??this.sortRadial?.99:.999})&&(r=!0),r&&(A&&(A.refCount+=1),A&&(i=this.pending)!=null&&i.accumulator&&this.pending.accumulator!==((a=this.display)==null?void 0:a.accumulator)&&this.spark.releaseAccumulator(this.pending.accumulator),this.pending={accumulator:A,viewToWorld:this.viewToWorld,displayed:n},this.driveSort())}async driveSort(){for(var A;;){if(this.sorting||!this.pending)return;const{viewToWorld:t,displayed:e}=this.pending;let i=this.pending.accumulator??((A=this.display)==null?void 0:A.accumulator);if(i||(i=this.spark.active,i.refCount+=1),this.pending=null,!i)throw new Error("No accumulator to sort");this.sorting={viewToWorld:t},await this.sortUpdate({accumulator:i,viewToWorld:t,displayed:e}),this.sorting=null}}async sortUpdate({accumulator:A,viewToWorld:t,displayed:e=!1}){if(this.sortingCheck)throw new Error("Only one sort at a time");this.sortingCheck=!0,A=A??this.spark.active;const{numSplats:i,maxSplats:a}=A.splats;let r=0,n=this.orderingFreelist.alloc(a);if(i>0){const{reader:I,doubleSortReader:o,dynoSortRadial:B,dynoOrigin:g,dynoDirection:Q,dynoDepthBias:c,dynoSort360:E,dynoSplats:C}=$A.makeSorter(),h=Math.ceil(a/2);this.readback=I.ensureBuffer(h,this.readback);const y=A.toWorld.clone().invert(),u=t.clone().premultiply(y);B.value=this.sort360?!0:this.sortRadial,g.value.set(0,0,0).applyMatrix4(u),Q.value.set(0,0,-1).applyMatrix4(u).sub(g.value).normalize(),c.value=this.depthBias??1,E.value=this.sort360??!1,C.packedSplats=A.splats,await I.renderReadback({renderer:this.spark.renderer,reader:o,count:Math.ceil(i/2),readback:this.readback});const l=await XA(async p=>p.call("sortDoubleSplats",{numSplats:i,readback:this.readback,ordering:n}));this.readback=l.readback,n=l.ordering,r=l.activeSplats}this.updateDisplay({accumulator:A,viewToWorld:t,ordering:n,activeSplats:r,displayed:e}),this.sortingCheck=!1}updateDisplay({accumulator:A,viewToWorld:t,ordering:e,activeSplats:i,displayed:a=!1}){if(!this.display)this.display={accumulator:A,viewToWorld:t,geometry:new Ht(e,i)};else{!a&&A!==this.display.accumulator&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.accumulator=A),this.display.viewToWorld=t;const r=this.display.geometry.ordering;r.length===e.length?this.display.geometry.update(e,i):(this.display.geometry.dispose(),this.display.geometry=new Ht(e,i)),this.orderingFreelist.free(r)}this.spark.viewpoint===this&&this.spark.prepareViewpoint(this)}static makeSorter(){if(!$A.dynos){const A=new ge({value:!0}),t=new mt({value:new d}),e=new mt({value:new d}),i=new at({value:1}),a=new ge({value:!1}),r=new $t,n=new ze,I=FA({index:"int"},{rgba8:"vec4"},({index:o})=>{if(!o)throw new Error("No index");const B={sortRadial:A,sortOrigin:t,sortDirection:e,sortDepthBias:i,sort360:a},g=qe(o,_t("int",2)),Q=ft(r,g),c=le({gsplat:Q,...B}),E=ft(r,et(g,_t("int",1))),C=le({gsplat:E,...B}),h=Wi({vectorType:"vec2",x:c,y:C});return{rgba8:Oi(Pi(h))}});$A.dynos={dynoSortRadial:A,dynoOrigin:t,dynoDirection:e,dynoDepthBias:i,dynoSort360:a,dynoSplats:r,reader:n,doubleSortReader:I}}return $A.dynos}};Ae.EMPTY_TEXTURE=new Ds;Ae.dynos=null;let Ee=Ae;const Ua=O(`
  float computeSort(Gsplat gsplat, bool sortRadial, vec3 sortOrigin, vec3 sortDirection, float sortDepthBias, bool sort360) {
    if (!isGsplatActive(gsplat.flags)) {
      return INFINITY;
    }

    vec3 center = gsplat.center - sortOrigin;
    float biasedDepth = dot(center, sortDirection) + sortDepthBias;
    if (!sort360 && (biasedDepth <= 0.0)) {
      return INFINITY;
    }

    return sortRadial ? length(center) : biasedDepth;
  }
`);function le({gsplat:s,sortRadial:A,sortOrigin:t,sortDirection:e,sortDepthBias:i,sort360:a}){return xt({inTypes:{gsplat:G,sortRadial:"bool",sortOrigin:"vec3",sortDirection:"vec3",sortDepthBias:"float",sort360:"bool"},outTypes:{metric:"float"},globals:()=>[CA,Ua],inputs:{gsplat:s,sortRadial:A,sortOrigin:t,sortDirection:e,sortDepthBias:i,sort360:a},statements:({inputs:r,outputs:n})=>{const{gsplat:I,sortRadial:o,sortOrigin:B,sortDirection:g,sortDepthBias:Q,sort360:c}=r;return QA(`
        ${n.metric} = computeSort(${I}, ${o}, ${B}, ${g}, ${Q}, ${c});
      `)}}).outputs.metric}class Ut{constructor(){this.splats=new ZA,this.toWorld=new kA,this.mapping=[],this.refCount=0,this.splatsVersion=-1,this.mappingVersion=-1}ensureGenerate(A){this.splats.ensureGenerate(A)&&(this.mapping=[])}generateSplats({renderer:A,modifier:t,generators:e,forceUpdate:i,originToWorld:a}){const r=this.mapping.reduce((o,B)=>(o.set(B.node,B),o),new Map);let n=0,I=0;for(const{node:o,generator:B,version:g,base:Q,count:c}of e){const E=r.get(o);if((i||B!==(E==null?void 0:E.generator)||g!==(E==null?void 0:E.version)||Q!==(E==null?void 0:E.base)||c!==(E==null?void 0:E.count))&&B&&c>0){const C=t.apply(B);try{this.splats.generate({generator:C,base:Q,count:c,renderer:A})}catch(h){o.generator=void 0,o.generatorError=h}n+=1}I=Math.max(I,Q+c)}return this.splats.numSplats=I,this.toWorld=a,this.mapping=e,n!==0}hasCorrespondence(A){return this.mapping.length!==A.mapping.length?!1:this.mapping.every(({node:t,base:e,count:i},a)=>{const{node:r,base:n,count:I}=A.mapping[a];return t===r&&e===n&&i===I})}}var La=`const float LN_SCALE_MIN = -9.0;
const float LN_SCALE_MAX = 9.0;
const float LN_RESCALE = (LN_SCALE_MAX - LN_SCALE_MIN) / 254.0; 

const uint SPLAT_TEX_WIDTH_BITS = 11u;
const uint SPLAT_TEX_HEIGHT_BITS = 11u;
const uint SPLAT_TEX_DEPTH_BITS = 11u;
const uint SPLAT_TEX_LAYER_BITS = SPLAT_TEX_WIDTH_BITS + SPLAT_TEX_HEIGHT_BITS;

const uint SPLAT_TEX_WIDTH = 1u << SPLAT_TEX_WIDTH_BITS;
const uint SPLAT_TEX_HEIGHT = 1u << SPLAT_TEX_HEIGHT_BITS;
const uint SPLAT_TEX_DEPTH = 1u << SPLAT_TEX_DEPTH_BITS;

const uint SPLAT_TEX_WIDTH_MASK = SPLAT_TEX_WIDTH - 1u;
const uint SPLAT_TEX_HEIGHT_MASK = SPLAT_TEX_HEIGHT - 1u;
const uint SPLAT_TEX_DEPTH_MASK = SPLAT_TEX_DEPTH - 1u;

const uint F16_INF = 0x7c00u;
const float PI = 3.1415926535897932384626433832795;

const float INFINITY = 1.0 / 0.0;
const float NEG_INFINITY = -INFINITY;

const float MAX_PIXEL_RADIUS = 512.0;
const float MIN_ALPHA = 0.5 * (1.0 / 255.0); 
const float MAX_STDDEV = sqrt(8.0);

float sqr(float x) {
    return x * x;
}

float pow4(float x) {
    float x2 = x * x;
    return x2 * x2;
}

float pow8(float x) {
    float x4 = pow4(x);
    return x4 * x4;
}

vec3 srgbToLinear(vec3 rgb) {
    return pow(rgb, vec3(2.2));
}

vec3 linearToSrgb(vec3 rgb) {
    return pow(rgb, vec3(1.0 / 2.2));
}

uint encodeQuatOctXy88R8(vec4 q) {
    
    if (q.w < 0.0) {
        q = -q;
    }
    
    float theta = 2.0 * acos(q.w);
    float halfTheta = theta * 0.5;
    float s = sin(halfTheta);
    
    vec3 axis = (abs(s) < 1e-6) ? vec3(1.0, 0.0, 0.0) : q.xyz / s;
    
    
    
    float sum = abs(axis.x) + abs(axis.y) + abs(axis.z);
    vec2 p = vec2(axis.x, axis.y) / sum;
    
    if (axis.z < 0.0) {
        float oldPx = p.x;
        p.x = (1.0 - abs(p.y)) * (p.x >= 0.0 ? 1.0 : -1.0);
        p.y = (1.0 - abs(oldPx)) * (p.y >= 0.0 ? 1.0 : -1.0);
    }
    
    float u_f = p.x * 0.5 + 0.5;
    float v_f = p.y * 0.5 + 0.5;
    
    uint quantU = uint(clamp(round(u_f * 255.0), 0.0, 255.0));
    uint quantV = uint(clamp(round(v_f * 255.0), 0.0, 255.0));
    
    
    
    uint angleInt = uint(clamp(round((theta / 3.14159265359) * 255.0), 0.0, 255.0));
    
    
    return (angleInt << 16u) | (quantV << 8u) | quantU;
}

vec4 decodeQuatOctXy88R8(uint encoded) {
    
    uint quantU = encoded & uint(0xFFu);               
    uint quantV = (encoded >> 8u) & uint(0xFFu);         
    uint angleInt = encoded >> 16u;                      

    
    float u_f = float(quantU) / 255.0;
    float v_f = float(quantV) / 255.0;
    vec2 f = vec2(u_f * 2.0 - 1.0, v_f * 2.0 - 1.0);

    vec3 axis = vec3(f.xy, 1.0 - abs(f.x) - abs(f.y));
    float t = max(-axis.z, 0.0);
    axis.x += (axis.x >= 0.0) ? -t : t;
    axis.y += (axis.y >= 0.0) ? -t : t;
    axis = normalize(axis);
    
    
    float theta = (float(angleInt) / 255.0) * 3.14159265359;
    float halfTheta = theta * 0.5;
    float s = sin(halfTheta);
    float w = cos(halfTheta);
    
    return vec4(axis * s, w);
}

    

    

    

    

    

    

    

    

    

    

uvec4 packSplat(vec3 center, vec3 scales, vec4 quaternion, vec4 rgba) {
    uvec4 uRgba = uvec4(round(clamp(rgba * 255.0, 0.0, 255.0)));

    uint uQuat = encodeQuatOctXy88R8(quaternion);
    
    
    uvec3 uQuat3 = uvec3(uQuat & 0xffu, (uQuat >> 8u) & 0xffu, (uQuat >> 16u) & 0xffu);

    
    uvec3 uScales = uvec3(
        (scales.x == 0.0) ? 0u : uint(round(clamp((log(scales.x) - LN_SCALE_MIN) / LN_RESCALE, 0.0, 254.0))) + 1u,
        (scales.y == 0.0) ? 0u : uint(round(clamp((log(scales.y) - LN_SCALE_MIN) / LN_RESCALE, 0.0, 254.0))) + 1u,
        (scales.z == 0.0) ? 0u : uint(round(clamp((log(scales.z) - LN_SCALE_MIN) / LN_RESCALE, 0.0, 254.0))) + 1u
    );

    
    uint word0 = uRgba.r | (uRgba.g << 8u) | (uRgba.b << 16u) | (uRgba.a << 24u);
    uint word1 = packHalf2x16(center.xy);
    uint word2 = packHalf2x16(vec2(center.z, 0.0)) | (uQuat3.x << 16u) | (uQuat3.y << 24u);
    uint word3 = uScales.x | (uScales.y << 8u) | (uScales.z << 16u) | (uQuat3.z << 24u);
    return uvec4(word0, word1, word2, word3);
}

void unpackSplat(uvec4 packed, out vec3 center, out vec3 scales, out vec4 quaternion, out vec4 rgba) {
    uint word0 = packed.x, word1 = packed.y, word2 = packed.z, word3 = packed.w;

    uvec4 uRgba = uvec4(word0 & 0xffu, (word0 >> 8u) & 0xffu, (word0 >> 16u) & 0xffu, (word0 >> 24u) & 0xffu);
    rgba = vec4(uRgba) / 255.0;

    center = vec4(
        unpackHalf2x16(word1),
        unpackHalf2x16(word2 & 0xffffu)
    ).xyz;

    uvec3 uScales = uvec3(word3 & 0xffu, (word3 >> 8u) & 0xffu, (word3 >> 16u) & 0xffu);
    scales = vec3(
        (uScales.x == 0u) ? 0.0 : exp(LN_SCALE_MIN + float(uScales.x - 1u) * LN_RESCALE),
        (uScales.y == 0u) ? 0.0 : exp(LN_SCALE_MIN + float(uScales.y - 1u) * LN_RESCALE),
        (uScales.z == 0u) ? 0.0 : exp(LN_SCALE_MIN + float(uScales.z - 1u) * LN_RESCALE)
    );

    uint uQuat = ((word2 >> 16u) & 0xFFFFu) | ((word3 >> 8u) & 0xFF0000u);
    quaternion = decodeQuatOctXy88R8(uQuat);
    
    
}

vec3 quatVec(vec4 q, vec3 v) {
    
    vec3 t = 2.0 * cross(q.xyz, v);
    return v + q.w * t + cross(q.xyz, t);
}

vec4 quatQuat(vec4 q1, vec4 q2) {
    return vec4(
        q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
        q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
        q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,
        q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z
    );
}

mat3 scaleQuaternionToMatrix(vec3 s, vec4 q) {
    
    return mat3(
        s.x * (1.0 - 2.0 * (q.y * q.y + q.z * q.z)),
        s.x * (2.0 * (q.x * q.y + q.w * q.z)),
        s.x * (2.0 * (q.x * q.z - q.w * q.y)),
        s.y * (2.0 * (q.x * q.y - q.w * q.z)),
        s.y * (1.0 - 2.0 * (q.x * q.x + q.z * q.z)),
        s.y * (2.0 * (q.y * q.z + q.w * q.x)),
        s.z * (2.0 * (q.x * q.z + q.w * q.y)),
        s.z * (2.0 * (q.y * q.z - q.w * q.x)),
        s.z * (1.0 - 2.0 * (q.x * q.x + q.y * q.y))
    );
}

vec4 slerp(vec4 q1, vec4 q2, float t) {
    
    float cosHalfTheta = dot(q1, q2);

    
    if (abs(cosHalfTheta) >= 0.999) {
        return q1;
    }
    
    
    
    if (cosHalfTheta < 0.0) {
        q2 = -q2;
        cosHalfTheta = -cosHalfTheta;
    }

    
    float halfTheta = acos(cosHalfTheta);
    float sinHalfTheta = sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    
    float ratioA = sin((1.0 - t) * halfTheta) / sinHalfTheta;
    float ratioB = sin(t * halfTheta) / sinHalfTheta;

    
    return q1 * ratioA + q2 * ratioB;
}

ivec3 splatTexCoord(int index) {
    uint x = uint(index) & SPLAT_TEX_WIDTH_MASK;
    uint y = (uint(index) >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK;
    uint z = uint(index) >> SPLAT_TEX_LAYER_BITS;
    return ivec3(x, y, z);
}`,_a=`precision highp float;
precision highp int;

#include <splatDefines>

uniform bool encodeLinear;
uniform float maxStdDev;
uniform bool disableFalloff;
uniform float falloff;

out vec4 fragColor;

in vec4 vRgba;
in vec2 vSplatUv;
in vec3 vNdc;

void main() {
    float z = dot(vSplatUv, vSplatUv);
    if (z > (maxStdDev * maxStdDev)) {
        discard;
    }

    float alpha = vRgba.a;
    alpha *= mix(1.0, exp(-0.5 * z), falloff);
    if (alpha < MIN_ALPHA) {
        discard;
    }

    vec3 rgb = vRgba.rgb;
    if (encodeLinear) {
        rgb = srgbToLinear(rgb);
    }
    fragColor = vec4(rgb, alpha);
}`,Ya=`precision highp float;
precision highp int;
precision highp usampler2DArray;

#include <splatDefines>

attribute uint splatIndex;

out vec4 vRgba;
out vec2 vSplatUv;
out vec3 vNdc;

uniform vec2 renderSize;
uniform uint numSplats;
uniform vec4 renderToViewQuat;
uniform vec3 renderToViewPos;
uniform float maxStdDev;
uniform float time;
uniform float deltaTime;
uniform bool debugFlag;
uniform bool enable2DGS;
uniform float blurAmount;
uniform float preBlurAmount;
uniform float clipXY;

uniform usampler2DArray packedSplats;

void main() {
    
    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);

    if (uint(gl_InstanceID) >= numSplats) {
        return;
    }
    if (splatIndex == 0xffffffffu) {
        
        return;
    }

    ivec3 texCoord = ivec3(
        splatIndex & SPLAT_TEX_WIDTH_MASK,
        (splatIndex >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK,
        splatIndex >> SPLAT_TEX_LAYER_BITS
    );
    uvec4 packed = texelFetch(packedSplats, texCoord, 0);

    vec3 center, scales;
    vec4 quaternion, rgba;
    unpackSplat(packed, center, scales, quaternion, rgba);

    if (rgba.a < MIN_ALPHA) {
        return;
    }
    bvec3 zeroScales = equal(scales, vec3(0.0));
    if (all(zeroScales)) {
        return;
    }

    
    vec3 viewCenter = quatVec(renderToViewQuat, center) + renderToViewPos;

    
    if (viewCenter.z >= 0.0) {
        return;
    }

    
    vec4 clipCenter = projectionMatrix * vec4(viewCenter, 1.0);

    
    if (abs(clipCenter.z) >= clipCenter.w) {
        return;
    }

    
    float clip = clipXY * clipCenter.w;
    if (abs(clipCenter.x) > clip || abs(clipCenter.y) > clip) {
        return;
    }

    
    vec4 viewQuaternion = quatQuat(renderToViewQuat, quaternion);

    if (enable2DGS && any(zeroScales)) {
        vRgba = rgba;
        vSplatUv = position.xy * maxStdDev;

        vec3 offset;
        if (zeroScales.z) {
            offset = vec3(vSplatUv.xy * scales.xy, 0.0);
        } else if (zeroScales.y) {
            offset = vec3(vSplatUv.x * scales.x, 0.0, vSplatUv.y * scales.z);
        } else {
            offset = vec3(0.0, vSplatUv.xy * scales.yz);
        }

        vec3 viewPos = viewCenter + quatVec(viewQuaternion, offset);
        gl_Position = projectionMatrix * vec4(viewPos, 1.0);
        vNdc = gl_Position.xyz / gl_Position.w;
        return;
    }

    
    vec3 ndcCenter = clipCenter.xyz / clipCenter.w;

    
    mat3 RS = scaleQuaternionToMatrix(scales, viewQuaternion);
    mat3 cov3D = RS * transpose(RS);

    
    vec2 focal = 0.5 * renderSize * vec2(projectionMatrix[0][0], projectionMatrix[1][1]);
    float invZ = 1.0 / viewCenter.z;
    vec2 J1 = focal * invZ;
    vec2 J2 = -(J1 * viewCenter.xy) * invZ;
    mat3 J = mat3(
        J1.x, 0.0, J2.x,
        0.0, J1.y, J2.y,
        0.0, 0.0, 0.0
    );

    
    
    
    
    
    
    
    mat3 cov2D = transpose(J) * cov3D * J;
    float a = cov2D[0][0];
    float d = cov2D[1][1];
    float b = cov2D[0][1];

    
    a += preBlurAmount;
    d += preBlurAmount;

    
    float detOrig = a * d - b * b;
    a += blurAmount;
    d += blurAmount;
    float det = a * d - b * b;

    
    float blurAdjust = sqrt(max(0.0, detOrig / det));
    rgba.a *= blurAdjust;
    if (rgba.a < MIN_ALPHA) {
        return;
    }

    
    float eigenAvg = 0.5 * (a + d);
    float eigenDelta = sqrt(max(0.0, eigenAvg * eigenAvg - det));
    float eigen1 = eigenAvg + eigenDelta;
    float eigen2 = eigenAvg - eigenDelta;

    vec2 eigenVec1 = normalize(vec2((abs(b) < 0.001) ? 1.0 : b, eigen1 - a));
    vec2 eigenVec2 = vec2(eigenVec1.y, -eigenVec1.x);

    float scale1 = position.x * min(MAX_PIXEL_RADIUS, maxStdDev * sqrt(eigen1));
    float scale2 = position.y * min(MAX_PIXEL_RADIUS, maxStdDev * sqrt(eigen2));

    
    vec2 pixelOffset = eigenVec1 * scale1 + eigenVec2 * scale2;
    vec2 ndcOffset = (2.0 / renderSize) * pixelOffset;
    vec3 ndc = vec3(ndcCenter.xy + ndcOffset, ndcCenter.z);

    vRgba = rgba;
    vSplatUv = position.xy * maxStdDev;
    vNdc = ndc;
    gl_Position = vec4(ndc.xy * clipCenter.w, clipCenter.zw);
}`;let Lt=null;function Ta(){return Lt||(Rs.splatDefines=La,Lt={splatVertex:Ya,splatFragment:_a}),Lt}const he=5;let qt=!1,zt=!1,as;function Ja(s){let A=!1;return s instanceof wt?!0:(s.traverse(t=>{A=A||t instanceof wt}),A)}const rs=MA.prototype.add;MA.prototype.add=function(s){return qt=qt||Ja(s),zt=zt||s instanceof ns,rs.call(this,s),this};const Ha=MA.prototype.onBeforeRender;MA.prototype.onBeforeRender=function(s){if(qt){if(!zt){const A=as||new ns({renderer:s});this.add(A)}MA.prototype.onBeforeRender=Ha,MA.prototype.add=rs}};const te=class V extends yt{constructor(A){const t=V.makeUniforms(),e=Ta(),i=new xs({glslVersion:ye,vertexShader:e.splatVertex,fragmentShader:e.splatFragment,uniforms:t,transparent:!0,blending:bs,depthTest:!0,depthWrite:!1,side:Ss});super(ue,i),this.autoViewpoints=[],this.rotateToAccumulator=new Vt({value:new W}),this.translateToAccumulator=new mt({value:new d}),this.lastFrame=-1,this.lastUpdateTime=null,this.defaultCameras=[],this.pendingUpdate=null,this.envViewpoint=null,this.frustumCulled=!1,this.renderer=A.renderer,this.material=i,this.uniforms=t;const a=FA({gsplat:G},{gsplat:G},({gsplat:r})=>{if(!r)throw new Error("gsplat not defined");return r=ke(r,{rotate:this.rotateToAccumulator,translate:this.translateToAccumulator}),{gsplat:r}});this.modifier=new Ea(a),this.autoUpdate=A.autoUpdate??!0,this.preUpdate=A.preUpdate??!1,this.originDistance=A.originDistance??1,this.maxStdDev=A.maxStdDev??Math.sqrt(8),this.enable2DGS=A.enable2DGS??!0,this.preBlurAmount=A.preBlurAmount??0,this.blurAmount=A.blurAmount??.3,this.falloff=A.falloff??1,this.clipXY=A.clipXY??1.4,this.active=new Ut,this.accumulatorCount=1,this.freeAccumulators=[];for(let r=0;r<1;++r)this.freeAccumulators.push(new Ut),this.accumulatorCount+=1;this.defaultView=new Ee({...A.view,autoUpdate:!0,spark:this}),this.viewpoint=this.defaultView,this.prepareViewpoint(this.viewpoint),this.clock=A.clock?Fi(A.clock):new we,as=this}static makeUniforms(){return{renderSize:{value:new Et},numSplats:{value:0},renderToViewQuat:{value:new W},renderToViewPos:{value:new d},maxStdDev:{value:1},enable2DGS:{value:!1},preBlurAmount:{value:0},blurAmount:{value:.3},falloff:{value:1},clipXY:{value:1.4},packedSplats:{type:"t",value:ZA.getEmpty()},time:{value:0},deltaTime:{value:0},encodeLinear:{value:!1},debugFlag:{value:!1}}}canAllocAccumulator(){return this.freeAccumulators.length>0||this.accumulatorCount<he}maybeAllocAccumulator(){let A=this.freeAccumulators.pop();if(A===void 0){if(this.accumulatorCount>=he)return null;A=new Ut,this.accumulatorCount+=1}return A.refCount=1,A}releaseAccumulator(A){A.refCount-=1,A.refCount===0&&this.freeAccumulators.push(A)}newViewpoint(A){return new Ee({...A,spark:this})}onBeforeRender(A,t,e){var i,a;const r=this.time??this.clock.getElapsedTime(),n=r-(this.viewpoint.lastTime??r);this.viewpoint.lastTime=r;const I=A.info.render.frame,o=I!==this.lastFrame;this.lastFrame=I;const B=this.viewpoint;if(B===this.defaultView){if(o)if(!A.xr.isPresenting)this.defaultView.viewToWorld=e.matrixWorld.clone(),this.defaultCameras=[this.defaultView.viewToWorld];else{const c=A.xr.getCamera().cameras;this.defaultCameras=[c[0].matrixWorld,c[1].matrixWorld],this.defaultView.viewToWorld=qa(this.defaultCameras)??new kA}this.autoUpdate&&this.update({scene:t,viewToWorld:this.defaultView.viewToWorld})}if(o&&(this.uniforms.time.value=r,this.uniforms.deltaTime.value=n,this.uniforms.debugFlag.value=performance.now()/1e3%2<1),B.target)this.uniforms.renderSize.value.set(B.target.width,B.target.height);else{const c=A.getSize(this.uniforms.renderSize.value);if(c.x===1&&c.y===1){const E=(i=A.xr.getSession())==null?void 0:i.renderState.baseLayer;E&&(c.x=E.framebufferWidth,c.y=E.framebufferHeight)}}this.uniforms.encodeLinear.value=B.encodeLinear,this.uniforms.maxStdDev.value=this.maxStdDev,this.uniforms.enable2DGS.value=this.enable2DGS,this.uniforms.preBlurAmount.value=this.preBlurAmount,this.uniforms.blurAmount.value=this.blurAmount,this.uniforms.falloff.value=this.falloff,this.uniforms.clipXY.value=this.clipXY;const g=((a=B.display)==null?void 0:a.accumulator.toWorld)??new kA,Q=e.matrixWorld.clone().invert();g.clone().premultiply(Q).decompose(this.uniforms.renderToViewPos.value,this.uniforms.renderToViewQuat.value,new d)}prepareViewpoint(A){if(this.viewpoint=A??this.viewpoint,this.viewpoint.display){const{accumulator:t,geometry:e}=this.viewpoint.display;this.uniforms.numSplats.value=t.splats.numSplats,this.uniforms.packedSplats.value=t.splats.getTexture(),this.geometry=e}else this.uniforms.numSplats.value=0,this.uniforms.packedSplats.value=ZA.getEmpty(),this.geometry=ue}update({scene:A,viewToWorld:t}){const e=this.matrixWorld.clone();this.preUpdate?this.updateInternal({scene:A,originToWorld:e,viewToWorld:t}):(this.pendingUpdate={scene:A,originToWorld:e},setTimeout(()=>{if(this.pendingUpdate){const{scene:i,originToWorld:a}=this.pendingUpdate;this.pendingUpdate=null,this.updateInternal({scene:i,originToWorld:a,viewToWorld:t})}},1))}updateInternal({scene:A,originToWorld:t,viewToWorld:e}){var i;if(!this.canAllocAccumulator())return!1;t||(t=this.active.toWorld),e=e??t.clone();const a=this.time??this.clock.getElapsedTime(),r=a-(this.lastUpdateTime??a);this.lastUpdateTime=a;const n=this.active.mapping.reduce((Q,c)=>(Q.set(c.node,c),Q),new Map),{generators:I,globalEdits:o}=this.compileScene(A);for(const Q of I)(i=Q.frameUpdate)==null||i.call(Q,{object:Q,time:a,deltaTime:r,viewToWorld:e,globalEdits:o});for(const Q of I){const c=n.get(Q),E=Q.generator?Q.numSplats:0;(Q.generator!==(c==null?void 0:c.generator)||E!==(c==null?void 0:c.count))&&Q.updateVersion()}const B=!Tt({matrix1:t,matrix2:this.active.toWorld,maxDistance:this.originDistance})||I.length!==n.size||I.some(Q=>{var c;return Q.version!==((c=n.get(Q))==null?void 0:c.version)});let g=null;if(B){if(g=this.maybeAllocAccumulator(),!g)throw new Error("Unreachable");const Q=!Tt({matrix1:t,matrix2:this.active.toWorld,maxDistance:1e-5,minCoorient:.99999}),c=I.map((l,p)=>{const f=n.get(l);return f?[l.version-f.version,f.base,l]:[Number.POSITIVE_INFINITY,l.version,l]}).sort((l,p)=>l[0]!==p[0]?l[0]-p[0]:l[1]-p[1]).map(([l,p,f])=>f),E=c.map(l=>l.numSplats),{maxSplats:C,mapping:h}=g.splats.generateMapping(E),y=c.map((l,p)=>{const{base:f,count:D}=h[p];return{node:l,generator:l.generator,version:l.version,base:f,count:D}});t.clone().invert().decompose(this.translateToAccumulator.value,this.rotateToAccumulator.value,new d),g.ensureGenerate(C),g.generateSplats({renderer:this.renderer,modifier:this.modifier,generators:y,forceUpdate:Q,originToWorld:t}),g.splatsVersion=this.active.splatsVersion+1;const u=g.hasCorrespondence(this.active);g.mappingVersion=this.active.mappingVersion+(u?0:1),this.releaseAccumulator(this.active),this.active=g,this.prepareViewpoint()}return setTimeout(()=>{for(const Q of this.autoViewpoints)Q.autoPoll({accumulator:g??void 0})},1),!0}compileScene(A){const t=[];A.traverse(i=>{i instanceof $e&&t.push(i)});const e=new Set;return A.traverseVisible(i=>{if(i instanceof Ze){let a=i.parent;for(;a!=null&&!(a instanceof wt);)a=a.parent;a==null&&e.add(i)}}),{generators:t,globalEdits:Array.from(e)}}async renderEnvMap({renderer:A,scene:t,worldCenter:e,size:i=256,near:a=.1,far:r=1e3,hideObjects:n=[],update:I=!1}){var o,B;if(this.envViewpoint||(this.envViewpoint=this.newViewpoint({sort360:!0})),!V.cubeRender||V.cubeRender.target.width!==i||V.cubeRender.near!==a||V.cubeRender.far!==r){V.cubeRender&&V.cubeRender.target.dispose();const C=new ks(i,{format:jA,generateMipmaps:!0,minFilter:Ms}),h=new Fs(a,r,C);V.cubeRender={target:C,camera:h,near:a,far:r}}V.pmrem||(V.pmrem=new Ns(A??this.renderer));const g=new kA().setPosition(e);await((o=this.envViewpoint)==null?void 0:o.prepare({scene:t,viewToWorld:g,update:I}));const{target:Q,camera:c}=V.cubeRender;c.position.copy(e);const E=new Map;for(const C of n)E.set(C,C.visible),C.visible=!1;this.prepareViewpoint(this.envViewpoint),c.update(A??this.renderer,t),this.prepareViewpoint(this.defaultView);for(const[C,h]of E.entries())C.visible=h;return(B=V.pmrem)==null?void 0:B.fromCubemap(Q.texture).texture}recurseSetEnvMap(A,t){A.traverse(e=>{if(e instanceof yt)if(Array.isArray(e.material))for(const i of e.material)i instanceof ee&&(i.envMap=t);else e.material instanceof ee&&(e.material.envMap=t)})}getRgba({generator:A,rgba:t}){const e=this.active.mapping.find(({node:i})=>i===A);if(!e)throw new Error("Generator not found");return t=t??new ga,t.fromPackedSplats({packedSplats:this.active.splats,base:e.base,count:e.count,renderer:this.renderer}),t}async readRgba({generator:A,rgba:t}){return t=this.getRgba({generator:A,rgba:t}),t.read()}};te.cubeRender=null;te.pmrem=null;let ns=te;const ue=new Ht(new Uint32Array(1),0);FA({packedSplats:bt,index:"int"},{gsplat:G},({packedSplats:s,index:A})=>{if(!s||!A)throw new Error("Invalid input");return{gsplat:ft(s,A)}});function qa(s){if(s.length===0)return null;const A=new d,t=new W,e=new d,i=[],a=[];for(const r of s)r.decompose(A,t,e),i.push(A),a.push(t);return new kA().compose(Ri(i),vi(a),new d(1,1,1))}O(`
  struct GsplatSkinning {
    int numSplats;
    int numBones;
    usampler2DArray skinTexture;
    sampler2D boneTexture;
  };
`);O(`
  void applyGsplatSkinning(
    int numSplats, int numBones,
    usampler2DArray skinTexture, sampler2D boneTexture,
    int splatIndex, inout vec3 center, inout vec4 quaternion
  ) {
    if ((splatIndex < 0) || (splatIndex >= numSplats)) {
      return;
    }

    uvec4 skinData = texelFetch(skinTexture, splatTexCoord(splatIndex), 0);

    float weights[4];
    weights[0] = float(skinData.x & 0xffu) / 255.0;
    weights[1] = float(skinData.y & 0xffu) / 255.0;
    weights[2] = float(skinData.z & 0xffu) / 255.0;
    weights[3] = float(skinData.w & 0xffu) / 255.0;

    uint boneIndices[4];
    boneIndices[0] = (skinData.x >> 8u) & 0xffu;
    boneIndices[1] = (skinData.y >> 8u) & 0xffu;
    boneIndices[2] = (skinData.z >> 8u) & 0xffu;
    boneIndices[3] = (skinData.w >> 8u) & 0xffu;

    vec4 quat = vec4(0.0);
    vec4 dual = vec4(0.0);
    for (int i = 0; i < 4; i++) {
      if (weights[i] > 0.0) {
        int boneIndex = int(boneIndices[i]);
        vec4 boneQuat = vec4(0.0, 0.0, 0.0, 1.0);
        vec4 boneDual = vec4(0.0);
        if (boneIndex < numBones) {
          boneQuat = texelFetch(boneTexture, ivec2(2, boneIndex), 0);
          boneDual = texelFetch(boneTexture, ivec2(3, boneIndex), 0);
        }

        if ((i > 0) && (dot(quat, boneQuat) < 0.0)) {
          // Flip sign if next blend is pointing in the opposite direction
          boneQuat = -boneQuat;
          boneDual = -boneDual;
        }
        quat += weights[i] * boneQuat;
        dual += weights[i] * boneDual;
      }
    }

    // Normalize dual quaternion
    float norm = length(quat);
    quat /= norm;
    dual /= norm;
    vec3 translate = vec3(
      2.0 * (-dual.w * quat.x + dual.x * quat.w - dual.y * quat.z + dual.z * quat.y),
      2.0 * (-dual.w * quat.y + dual.x * quat.z + dual.y * quat.w - dual.z * quat.x),
      2.0 * (-dual.w * quat.z - dual.x * quat.y + dual.y * quat.x + dual.z * quat.w)
    );

    center = quatVec(quat, center) + translate;
    quaternion = quatQuat(quat, quaternion);
  }
`);new De(new d(-1,-1,-1),new d(1,1,1)),new d(-1,-3,1).normalize(),new TA(1,1,1),new TA(.5,.5,1),new d(1,1,1);new De(new d(-2,-1,-2),new d(2,5,2)),new d(0,-1,0),new TA(1,1,1),new TA(.25,.25,.5),new d(.1,1,.1);const gs=class Kt{static createButton(A,t={}){const e=navigator.xr;if(!e)return null;const i=e,a=document.createElement("button");A.xr.enabled=!0,A.xr.setReferenceSpaceType("local");function r(){let g=null;async function Q(C){console.log("onSessionStarted"),C.addEventListener("end",c),await A.xr.setSession(C),a.textContent="EXIT VR",g=C}function c(){console.log("onSessionEnded"),g==null||g.removeEventListener("end",c),a.textContent="ENTER VR",g=null}a.style.display="",a.style.cursor="pointer",a.style.left="calc(50% - 100px)",a.style.width="200px",a.style.height="100px",a.textContent="ENTER VR";const E={...t,optionalFeatures:[...t.optionalFeatures||[]]};a.onmouseenter=()=>{a.style.opacity="1.0"},a.onmouseleave=()=>{a.style.opacity="0.5"},a.onclick=()=>{g===null?(console.log("requesting session"),i.requestSession("immersive-vr",E).then(Q)):(console.log("ending session"),g.end())}}function n(){a.style.display="none",a.style.cursor="auto",a.style.left="calc(50% - 75px)",a.style.width="150px",a.onmouseenter=null,a.onmouseleave=null,a.onclick=null}function I(){n(),a.textContent="VR NOT SUPPORTED"}function o(g){n(),console.warn("Exception when trying to call xr.isSessionSupported",g),a.textContent="VR NOT ALLOWED"}function B(g){g.style.position="absolute",g.style.bottom="20px",g.style.padding="12px 6px",g.style.border="1px solid #fff",g.style.borderRadius="4px",g.style.background="rgba(0,0,0,0.1)",g.style.color="#fff",g.style.font="normal 13px sans-serif",g.style.textAlign="center",g.style.opacity="0.5",g.style.outline="none",g.style.zIndex="999"}return a.id="VRButton",a.style.display="none",B(a),i.isSessionSupported("immersive-vr").then(g=>{g?r():I(),g&&Kt.xrSessionIsGranted&&a.click()}).catch(o),a}static registerSessionGrantedListener(){const A=navigator.xr;if(!A)return null;const t=A;/WebXRViewer\//i.test(navigator.userAgent)||t.addEventListener("sessiongranted",()=>{Kt.xrSessionIsGranted=!0})}};gs.xrSessionIsGranted=!1;let za=gs;za.registerSessionGrantedListener();var os=(s=>(s.w="wrist",s.t0="thumb-metacarpal",s.t1="thumb-phalanx-proximal",s.t2="thumb-phalanx-distal",s.t3="thumb-tip",s.i0="index-finger-metacarpal",s.i1="index-finger-phalanx-proximal",s.i2="index-finger-phalanx-intermediate",s.i3="index-finger-phalanx-distal",s.i4="index-finger-tip",s.m0="middle-finger-metacarpal",s.m1="middle-finger-phalanx-proximal",s.m2="middle-finger-phalanx-intermediate",s.m3="middle-finger-phalanx-distal",s.m4="middle-finger-tip",s.r0="ring-finger-metacarpal",s.r1="ring-finger-phalanx-proximal",s.r2="ring-finger-phalanx-intermediate",s.r3="ring-finger-phalanx-distal",s.r4="ring-finger-tip",s.p0="pinky-finger-metacarpal",s.p1="pinky-finger-phalanx-proximal",s.p2="pinky-finger-phalanx-intermediate",s.p3="pinky-finger-phalanx-distal",s.p4="pinky-finger-tip",s))(os||{});const Ka=Object.keys(os);Ka.length;new d(0,0,-1),new d(0,0,1),new d(-1,0,0),new d(1,0,0),new d(0,1,0),new d(0,-1,0);new d(0,0,-1),new d(0,0,1),new d(-1,0,0),new d(1,0,0),new d(0,1,0),new d(0,-1,0);new d(0,0,1),new d(0,0,-1);new d(0,-1,0),new d(0,1,0),new d(-1,0,0),new d(1,0,0);function Za({_ref:s,_key:A,src:t,...e}){const i=gt.useRef(null),a=s||i,r=ys(({scene:o})=>o),[n,I]=gt.useState(null);return gt.useEffect(()=>{if(!t)return;const o=new wt({url:t});I(o)},[t]),gt.useEffect(()=>{var o;if(a.current&&n)return r.add(n),r.remove(n),(o=a.current)==null||o.add(n),()=>{var B;n&&((B=a.current)==null||B.remove(n),n==null||n.dispose())}},[a.current,n]),ps.jsx("group",{ref:a,...e},A)}export{Za as default};
//# sourceMappingURL=chunk-C92vmGZt.js.map
